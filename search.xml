<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpanT in Unity</title>
      <link href="/2022/05/22/unity/%E5%85%B6%E4%BB%96/SpanT/"/>
      <url>/2022/05/22/unity/%E5%85%B6%E4%BB%96/SpanT/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> gamedev </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剧情对话</title>
      <link href="/2022/05/09/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/%E5%89%A7%E6%83%85%E5%AF%B9%E8%AF%9D/"/>
      <url>/2022/05/09/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/%E5%89%A7%E6%83%85%E5%AF%B9%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> gamedev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么魂系列，被我所以喜欢</title>
      <link href="/2022/04/13/game/why-i-enjoy-souls-like/"/>
      <url>/2022/04/13/game/why-i-enjoy-souls-like/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> souls like </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ecs调研</title>
      <link href="/2022/03/18/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/ecs/"/>
      <url>/2022/03/18/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/ecs/</url>
      
        <content type="html"><![CDATA[<h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><ul><li><a href="https://github.com/sschmid/Entitas-CSharp">Entitas-CSharp</a>（class based, oop）</li><li><a href="https://github.com/Leopotam/ecslite">ecslite</a>（struct based, sparse set）</li></ul><h2 id="库的对比"><a href="#库的对比" class="headerlink" title="库的对比"></a>库的对比</h2><p><a href="https://github.com/Chillu1/CSharpECSComparison">https://github.com/Chillu1/CSharpECSComparison</a></p><h2 id="库的性能测试"><a href="#库的性能测试" class="headerlink" title="库的性能测试"></a>库的性能测试</h2><p><a href="https://github.com/Doraku/Ecs.CSharp.Benchmark">https://github.com/Doraku/Ecs.CSharp.Benchmark</a></p><h2 id="库的选择"><a href="#库的选择" class="headerlink" title="库的选择"></a>库的选择</h2><p>选用<code>ecslite</code></p><ol><li>代码量简洁，易于修改、扩展</li><li>没有代码生成，干净</li></ol><h2 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h2><ol><li>如果使用request/event（添加component）来处理system间的“通信”，怎么决定request/event是存活一帧、两帧？还是延迟一帧再调用？还是某个system里自行消耗（移除component）？也可以是component包含一个queue容器，每帧依次消耗？<br><del>2. 如何从oop向dop转变？如何设计dop模型？</del></li><li>ecs如何模块化？并尽量保证不受执行顺序影响？如何编写模块测试？</li><li>如何从gameobject获取到entity对象？安全？方便？性能？</li><li>能否和现有oop代码结合？例如封装到c或者s里去？</li><li>system无状态，那么状态可以保存到哪里？</li><li>单例组件？</li><li> 如何减少大量相同代码？如何复用？system能不能使用继承？有何优劣？</li><li> 出现bug，如何调试？从哪些方面入手？</li><li>如何让一些system在entity变化时，抛出事件，减少system的遍历？需不需要？</li><li>如何使用jobsystem？</li><li>如何处理包含关系？见Q.1</li><li>如何描述层级结构？例如场景节点树</li><li>不同ecs框架，如何安全创建/销毁ent？</li><li>ecs是否需要代码生成？</li><li>如何使用ecs制作网络游戏？客户端预测？客户端回滚？回放？</li></ol><h2 id="使用ecs"><a href="#使用ecs" class="headerlink" title="使用ecs"></a>使用ecs</h2><p><strong>组织模块</strong></p><p>例如 CameraFeature 包含 CameraZoomSystem 和 CameraMoveSystem</p><p><strong>组件特性</strong></p><!-- IEcsIgnoreInFilter，不会被过滤 --><p>IEcsAutoReset，自动重置，用于清理资源，处理引用类型</p><p><strong>ReactiveSystem</strong></p><p>开启 LEOECS_FILTER_EVENTS 宏，init里使用接口添加自己的监听实现类（待验证）<br>。这样可以不用实现run接口，避免大量forloop。</p><p>使用array+interface实现的监听，非委托的方式，gc更少，但没有多线程支持</p><h2 id="ecs的评估"><a href="#ecs的评估" class="headerlink" title="ecs的评估"></a>ecs的评估</h2><p><strong>ecs的优势</strong></p><ol><li>比ec更进一步，更细分，扁平化，也更抽象</li><li>逻辑数据完全分离</li><li>利于内存排布、多线程，提高性能（打个问号）</li></ol><p><strong>ecs的劣势</strong></p><ol><li>过于规范化？</li><li>难抽象</li><li>class数量变多（打个问号）</li><li>system严格的执行顺序</li><li>system之间的通信问题（打个问号）</li></ol><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h2><p><strong>Q.1.</strong> ECS模型按列解耦功能确实挺好的，但是对于树形结构的数据，比如一场战斗有两个玩家，每个玩家有三个英雄，每个英雄有四个技能，每个技能有五段攻击。该如何设计才能更合理呢？</p><p><strong>A.</strong> 这种叫做 Component 的引用，在我的库中有专门额外结构解决这类问题。在上文中已经提到过了。</p><p>那么，“比如一场战斗有两个玩家”，就可以把“战斗”看成是一个独立的 Component ，玩家则引用它。“战斗”这个 Component 并没有归属到两个玩家中的特定一个。</p><p>我们可以</p><ol><li>用一个 system 遍历玩家，把战斗需要的信息复制到关联的“战斗”中。</li><li>用一个 system 遍历战斗，结算战斗结果。</li><li>用一个 system 遍历玩家，取出战斗结果。</li></ol><p>以上 1 和 3 均可以用 tag 标记出涉及战斗的玩家，过滤掉未参加任何战斗的玩家。</p><p><strong>Q.2.</strong> 如何序列化/反序列化Entity？</p><p><strong>A.</strong> 配置表加载，代码生成；使用unity的序列化制作蓝图，IConvertToEntity；</p><p><strong>Q.3.</strong> Is it safe to store a List<GameEntity> in a Component？</p><p><strong>A.</strong> <a href="https://github.com/sschmid/Entitas-CSharp/issues/964">https://github.com/sschmid/Entitas-CSharp/issues/964</a></p><h2 id="关于接入已有工作流"><a href="#关于接入已有工作流" class="headerlink" title="关于接入已有工作流"></a>关于接入已有工作流</h2><ol><li>GameMode使用oop（可以是一个system基类？）</li><li>定义各种GameMode所有资源路径，excel/scriptableobj都可以</li><li>使用GameContext类定义GameMode上下文数据，这一块，可以自由发挥，用oop/ec都无所谓</li><li>数据集中化，可以使用asset接口异步预加载/下载资源，并且可以方便做池化，也可以延迟到使用时再加载</li><li>GameMode里注册各种system，inject数据，启动ecs world</li></ol><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>ecslite都是简单的demo，可以去参考entities-csharp，有网络同步相关的demo</p><p><a href="https://habr.com/ru/post/661085/">https://habr.com/ru/post/661085/</a></p><p><a href="https://github.com/sschmid/Entitas-CSharp/wiki/Tutorials">https://github.com/sschmid/Entitas-CSharp/wiki/Tutorials</a></p><h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><p><a href="https://blog.codingnow.com/2021/07/lua_ecs.html">https://blog.codingnow.com/2021/07/lua_ecs.html</a></p><p>// TODO 守望先锋ppt</p><h2 id="AbilitySystem"><a href="#AbilitySystem" class="headerlink" title="AbilitySystem"></a>AbilitySystem</h2><p>TODO 究竟是oop的技能系统兼容ecs，还是纯ecs的技能系统？</p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> gamedev </tag>
            
            <tag> ecs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ecs构建stg游戏</title>
      <link href="/2022/03/09/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/ecs-stg/"/>
      <url>/2022/03/09/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/ecs-stg/</url>
      
        <content type="html"><![CDATA[<h2 id="子弹"><a href="#子弹" class="headerlink" title="子弹"></a>子弹</h2><h2 id="碰撞"><a href="#碰撞" class="headerlink" title="碰撞"></a>碰撞</h2><h2 id="玩家"><a href="#玩家" class="headerlink" title="玩家"></a>玩家</h2><h2 id="敌人"><a href="#敌人" class="headerlink" title="敌人"></a>敌人</h2>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> gamedev </tag>
            
            <tag> ecs </tag>
            
            <tag> gameplay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动作编辑器</title>
      <link href="/2022/03/05/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/%E5%8A%A8%E4%BD%9C%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2022/03/05/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/%E5%8A%A8%E4%BD%9C%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><img src="combo.gif" loading="lazy"><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p><code>配置</code>和<code>逻辑</code>完全分离，配置使用ScriptableObject存储，可替换成其他数据源。</p><p><strong>Runtime</strong></p><ul><li>MotionClip。ScriptableObject，纯数据，存储各种MotionNotify</li><li>MotionNotify。Motion事件配置，纯数据，实现接口创建MotionNotifySpec</li><li>MotionNotifySpec。Motion事件逻辑实例，各种逻辑就写在这里，提供Begin、Tick、End事件可供子类重写</li><li>Motion。运行时实例，引用MotionClip，管理MotionNotifySpec</li><li>MotionManager。Motion管理器，管理所有Motion实例</li></ul><p><strong>Editor，基于unity timeline</strong></p><ul><li>MotionNotifyTrack。timeline三件套之一</li><li>MotionNotifyAsset。timeline三件套之一</li><li>MotionNotifyBehaviour。timeline三件套之一</li><li>MotionDesigner。</li><li>MotionEditorController。</li></ul><details><summary>NS_PlayAnimator 参考</summary><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Newtonsoft<span class="token punctuation">.</span>Json</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Sirenix<span class="token punctuation">.</span>OdinInspector</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Saro<span class="token punctuation">.</span>Gameplay<span class="token punctuation">.</span>Motion</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Serializable</span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">NS_PlayAnimator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MotionNotify</span></span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ReadOnly</span></span><span class="token punctuation">]</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> m_AnimHash<span class="token punctuation">;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> m_Layer<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> AnimHash        <span class="token punctuation">&#123;</span>            <span class="token keyword">get</span> <span class="token operator">=></span> m_AnimHash<span class="token punctuation">;</span>            <span class="token keyword">set</span> <span class="token operator">=></span> m_AnimHash <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Layer        <span class="token punctuation">&#123;</span>            <span class="token keyword">get</span> <span class="token operator">=></span> m_Layer<span class="token punctuation">;</span>            <span class="token keyword">set</span> <span class="token operator">=></span> m_Layer <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">MotionNotifySpec</span> <span class="token function">CreateSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> spec <span class="token operator">=</span> SharedPool<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Rent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NS_PlayAnimatorSpec<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            spec<span class="token punctuation">.</span>BaseConfig <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> spec<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">NS_PlayAnimatorSpec</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MotionNotifySpec</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">NS_PlayAnimator</span> Config <span class="token operator">=></span> BaseConfig <span class="token keyword">as</span> <span class="token class-name">NS_PlayAnimator</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> AnimHash <span class="token operator">=></span> Config<span class="token punctuation">.</span>AnimHash<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Layer <span class="token operator">=></span> Config<span class="token punctuation">.</span>Layer<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Animator</span> m_Animator<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> m_OriginalSpeed<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NotifyBegin_Internal</span><span class="token punctuation">(</span><span class="token class-name">IMotionSource</span> source<span class="token punctuation">,</span> <span class="token class-name">Motion</span> motion<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_Animator<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                m_Animator <span class="token operator">=</span> source<span class="token punctuation">.</span>Animator<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            m_OriginalSpeed <span class="token operator">=</span> m_Animator<span class="token punctuation">.</span>speed<span class="token punctuation">;</span>            m_Animator<span class="token punctuation">.</span>speed <span class="token operator">=</span> motion<span class="token punctuation">.</span>PlaybackSpeed<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>motion<span class="token punctuation">.</span>CrossFade <span class="token operator">></span> <span class="token number">0f</span><span class="token punctuation">)</span>                m_Animator<span class="token punctuation">.</span><span class="token function">CrossFadeInFixedTime</span><span class="token punctuation">(</span>AnimHash<span class="token punctuation">,</span> motion<span class="token punctuation">.</span>CrossFade<span class="token punctuation">,</span> Layer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                m_Animator<span class="token punctuation">.</span><span class="token function">Play</span><span class="token punctuation">(</span>AnimHash<span class="token punctuation">,</span> Layer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NotifyEnd_Internal</span><span class="token punctuation">(</span><span class="token class-name">IMotionSource</span> animation<span class="token punctuation">,</span> <span class="token class-name">Motion</span> motion<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_Animator<span class="token punctuation">.</span>speed <span class="token operator">=</span> m_OriginalSpeed<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IReferenceClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">IReferenceClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Animator <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token preprocessor property">#<span class="token directive keyword">if</span> UNITY_EDITOR</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">NS_PlayAnimator</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonIgnore</span></span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OnValueChanged</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"SetAnimHash"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token class-name">AnimationClip</span> m_AnimClip<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">Color</span> <span class="token function">GetClipColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> Color<span class="token punctuation">.</span>blue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetAnimHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_AnimClip<span class="token punctuation">)</span>                m_AnimHash <span class="token operator">=</span> Animator<span class="token punctuation">.</span><span class="token function">StringToHash</span><span class="token punctuation">(</span>m_AnimClip<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                m_AnimHash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Button</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"SetRange"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetStartEndFrameUseClipLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_AnimClip<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                m_Range<span class="token punctuation">.</span>End <span class="token operator">=</span> m_Range<span class="token punctuation">.</span>Start <span class="token operator">+</span> m_AnimClip<span class="token punctuation">.</span><span class="token function">GetFrameLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NotifyTick_Preview</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> gameObj<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> time<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> frame<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">NotifyTick_Preview</span><span class="token punctuation">(</span>gameObj<span class="token punctuation">,</span> time<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//var animator = gameObj.GetComponent&lt;Animator>();</span>            m_AnimClip<span class="token punctuation">.</span><span class="token function">SampleAnimation</span><span class="token punctuation">(</span>gameObj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token preprocessor property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span></code></pre></details>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> gamedev </tag>
            
            <tag> gameplay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c# 委托</title>
      <link href="/2022/02/20/unity/%E5%85%B6%E4%BB%96/%E5%A7%94%E6%89%98/"/>
      <url>/2022/02/20/unity/%E5%85%B6%E4%BB%96/%E5%A7%94%E6%89%98/</url>
      
        <content type="html"><![CDATA[<h2 id="lambda闭包"><a href="#lambda闭包" class="headerlink" title="lambda闭包"></a>lambda闭包</h2><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PostEvent</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token class-name">Action</span> callback<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 过了一段时间后，调用回调</span>    callback<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">PostEvent</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>    <span class="token punctuation">&#123;</span>        Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>上述代码中，PostEvent方法执行到回调时，正常情况下，Test函数早就结束，<code>临时变量a</code>已经被被清理了。但是，PostEvent依然会打印出<code>临时变量a</code>的值，为什么？实际上，鼠标放在lambda的箭头上，vs会提示<code>已捕获变量:a</code>，被捕获的变量编译器会生成一个wrapper class，里面的成员变量就是a。</p><p>一些情况下，可以用以下方式优化掉wrapper class</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PostEvent</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> callback<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 过了一段时间后，调用回调</span>    callback<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">PostEvent</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=></span>    <span class="token punctuation">&#123;</span>        Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>再看以下部分，类似这种额外的内存消耗，完全没有必要</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// gc alloc</span>    <span class="token class-name"><span class="token keyword">var</span></span> ret <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>i <span class="token operator">=></span> i <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// no gc alloc</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> list<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="委托自身内存消耗"><a href="#委托自身内存消耗" class="headerlink" title="委托自身内存消耗"></a>委托自身内存消耗</h2><pre class="language-csharp" data-language="csharp"><code class="language-csharp">UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"[Test.Action Asign 0]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Action</span> action <span class="token operator">=</span> Callback<span class="token punctuation">;</span>action<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"[Test.Action Asign 1]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>action <span class="token operator">=</span> Callback<span class="token punctuation">;</span>action<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"[Test.Action Asign 1.1]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>action <span class="token operator">=</span> Callback<span class="token punctuation">;</span>action<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"[Test.Action Add 2]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>action <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"[Test.Action Add 3]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>action <span class="token operator">+=</span> Callback<span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"[Test.Action Add 4]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>action <span class="token operator">+=</span> Callback<span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"[Test.Action Sub 5]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>action <span class="token operator">-=</span> Callback<span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"[Test.Action Sub 6]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>action <span class="token operator">-=</span> Callback<span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"[Test.Action Sub 7]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>action <span class="token operator">-=</span> Callback<span class="token punctuation">;</span>UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>profiler消耗</p><img src="pic0.jpg" loading="lazy"><ol><li>每次=号赋值，都会有112b的内存分配</li><li>每次+=也会有内存分配，并且越来越多</li><li>每次-=也会有内存分配，剩余的绑定方法越多，每次分配内存越多</li></ol><p>再看一个例子</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span>    UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"[Test.Method outer]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Action</span> action <span class="token operator">=</span> Callback<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Func</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>    UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"[Test.Method]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Func</span><span class="token punctuation">(</span>Callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>profiler消耗</p><img src="pic1.jpg" loading="lazy"><ol><li>经过缓存委托，内存分配，只有112b</li><li>没有缓存的，则是每次都会分配112b</li></ol><h2 id="自定义多播委托"><a href="#自定义多播委托" class="headerlink" title="自定义多播委托"></a>自定义多播委托</h2><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Delegates<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Action<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span><span class="token punctuation">></span></span> RuntimeCalls    <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_RuntimeCalls <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                m_RuntimeCalls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Action<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> m_RuntimeCalls<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>Action<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span><span class="token punctuation">></span></span> m_RuntimeCalls<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Delegates</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">T</span> arg<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_RuntimeCalls <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> m_RuntimeCalls<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> call <span class="token keyword">in</span> m_RuntimeCalls<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Delegates<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">Delegates<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> delegates<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> @<span class="token keyword">delegate</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        delegates<span class="token punctuation">.</span>RuntimeCalls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>@<span class="token keyword">delegate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> delegates<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Delegates<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token class-name">Delegates<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> delegates<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> @<span class="token keyword">delegate</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delegates<span class="token punctuation">.</span>m_RuntimeCalls <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> delegates<span class="token punctuation">;</span>        delegates<span class="token punctuation">.</span>m_RuntimeCalls<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>@<span class="token keyword">delegate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> delegates<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>测试代码</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"[delegate] CSharp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CSharpDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">BeginSample</span><span class="token punctuation">(</span><span class="token string">"[delegate] MyDeletage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MyDelegates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UnityEngine<span class="token punctuation">.</span>Profiling<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span><span class="token function">EndSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CSharpDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Method1</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Method2</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> action <span class="token operator">=</span> Method1<span class="token punctuation">;</span>    <span class="token comment">//action += Method1;</span>    action <span class="token operator">+=</span> Method2<span class="token punctuation">;</span>    action <span class="token operator">+=</span> Method1<span class="token punctuation">;</span>    action <span class="token operator">+=</span> Method2<span class="token punctuation">;</span>    action <span class="token operator">+=</span> Method1<span class="token punctuation">;</span>    action <span class="token operator">+=</span> Method2<span class="token punctuation">;</span>    action <span class="token operator">+=</span> Method1<span class="token punctuation">;</span>    action <span class="token operator">+=</span> Method2<span class="token punctuation">;</span>    action<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    action <span class="token operator">-=</span> Method1<span class="token punctuation">;</span>    action<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    action <span class="token operator">-=</span> Method2<span class="token punctuation">;</span>    action<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyDelegates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Method1</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Method2</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> action <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Delegates<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    action <span class="token operator">+=</span> Method1<span class="token punctuation">;</span>    action <span class="token operator">+=</span> Method2<span class="token punctuation">;</span>    action <span class="token operator">+=</span> Method1<span class="token punctuation">;</span>    action <span class="token operator">+=</span> Method2<span class="token punctuation">;</span>    action <span class="token operator">+=</span> Method1<span class="token punctuation">;</span>    action <span class="token operator">+=</span> Method2<span class="token punctuation">;</span>    action <span class="token operator">+=</span> Method1<span class="token punctuation">;</span>    action <span class="token operator">+=</span> Method2<span class="token punctuation">;</span>    action<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    action <span class="token operator">-=</span> Method1<span class="token punctuation">;</span>    action<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    action <span class="token operator">-=</span> Method2<span class="token punctuation">;</span>    action<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>profiler测试</p><img src="pic2.jpg" loading="lazy"><p>使用List之类的容器封装Action，不使用+=/-=，可以有效减少内存分配，一些常用的事件系统也是这么来处理的。</p><p>一般delegate直接使用EventHandler，事件参数使用多态来处理。</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Listen</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> eventID<span class="token punctuation">,</span> <span class="token class-name">EventHandler<span class="token punctuation">&lt;</span>GameEventArgs<span class="token punctuation">></span></span> handler<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    EventComponent<span class="token punctuation">.</span>Global<span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span>eventID<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    Listeners<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> EventComponent<span class="token punctuation">.</span>Global<span class="token punctuation">.</span><span class="token function">Unsubscribe</span><span class="token punctuation">(</span>eventID<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="问题思考"><a href="#问题思考" class="headerlink" title="问题思考"></a>问题思考</h2><p><strong>Q.</strong> MulticastDelegate类里，每次调用CombineImpl/RemoveImpl都重新new了一个delegate数组进行操作。</p><p>.net为什么要这么做？</p><p><strong>A.</strong> MulticastDelegate设计为immutable的，所以每次都重新创建了一个delegate对象，目的是确保线程安全。而List&lt;Action&gt;则不是线程安全的。</p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gamedev </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏性属性(GameplayAttribute)</title>
      <link href="/2022/01/30/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/%E6%B8%B8%E6%88%8F%E6%80%A7%E5%B1%9E%E6%80%A7/"/>
      <url>/2022/01/30/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/%E6%B8%B8%E6%88%8F%E6%80%A7%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><img src="pic0.jpg" loading="lazy"><ol><li>GameplayAttribute为属性封装，有两个重要字段，BaseValue，基础值，不包含增减益数值，一般为初始属性；CurrentValue，通过Modifier之后的属性值，增减益效果后的最终值。可以被继承，扩展自定义属性，例如，将力量和攻击力两种属性相关联。</li><li>Modifier和ModifierConfig，运行时对象，以及配置对象，通过配置对象产生运行时对象，Modifier会被保存在GameplayAttribute里，通过一系列计算（可重写CalcCurrentValue），得到了GameplayAttribute的CurrentValue。设计为可池化，减少gc压力。</li><li>IModifierSource，属性修改源，用于储存被修改过的属性id，方便追踪修改，移除AttributeSet里的GameplayAttribute的Mofifier实例。</li><li>GameplayAttributeSet为属性集，使用map保存属性对象，key为int类型的属性id，可以方便的使用enum。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://assetstore.unity.com/packages/tools/integration/character-stats-106351">CharacterStats</a></li><li><a href="https://github.com/tranek/GASDocumentation">UE4 GAS</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> gameplay </tag>
            
            <tag> gameplay attribute </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源管理(二)</title>
      <link href="/2022/01/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF3-2%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/"/>
      <url>/2022/01/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF3-2%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>Editor模式，使用AssetDatabase加载。<br>Runtime模式，使用AssetBundle加载。<br>任何情况下，都不使用Resources API。</p><h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><p>使用AssetHandle封装加载、卸载细节，通过轮询机制，管理运行时依赖和异步加载。</p><p>AssetHandle实现接口IRefCounter，通过引用计数(rc)来管理资源的自动卸载。</p><h2 id="资源卸载"><a href="#资源卸载" class="headerlink" title="资源卸载"></a>资源卸载</h2><p>一般来说，有两种资源卸载方案。本资源框架，采用第二项。</p><ol><li>AssetBundle.Unload(false) + Resources.UnloadUnusedAssets，清理掉所有资源，非常耗，一般在切场景才会使用。</li><li>基于rc的资源管理方案，可实时卸载rc=0的资源，也可以切换场景时，卸载全部rc=0的资源。</li></ol><h3 id="1-基于场景的资源卸载"><a href="#1-基于场景的资源卸载" class="headerlink" title="1. 基于场景的资源卸载"></a>1. 基于场景的资源卸载</h3><p>在处理大量资源的游戏时，移动端中低端机型容易爆内存，游戏闪退，特别是切换场景时。优势也比较明显，管理方便，且场景时，调用几个接口即可。</p><h3 id="2-基于rc的资源卸载"><a href="#2-基于rc的资源卸载" class="headerlink" title="2. 基于rc的资源卸载"></a>2. 基于rc的资源卸载</h3><p>优势就是，即用即加载，不用则卸载，内存可以控制在相对较好的水平。缺点也很明显，需要管理rc，管理不当，资源无法卸载，则优势减少，当资源对象生命周期不可控时，管理难度上升。官方推出的Addressable也是基于rc。</p><h2 id="rc半自动化"><a href="#rc半自动化" class="headerlink" title="rc半自动化"></a>rc半自动化</h2><p>手动控制rc，会比较繁琐，各个资源对象生命周期不确定的话，将会更难管理。针对以上难点，设计了一套加载接口IAssetLoader。</p><ul><li>每个子对象持有一个AssetLoader，AssetLoader内部缓存已经加载过的资源对象，并且只会将加载过的资源rc+1，当子对象生命周期结束时，会自动将所有加载的资源rc-1。</li><li>如果一个对象只会加载一个资源，则直接持有AssetHandle即可，根据对象生命周期修正rc。</li></ul><p>从Gameplay框架层面去封装资源的加载/卸载。例如对象池这种，也会有个IAssetLoader对象，对象池通过IAssetLoader加载资源，对象池清理时，也会直接释放掉IAssetLoader加载的资源。</p><h2 id="rc调试面板-运行时"><a href="#rc调试面板-运行时" class="headerlink" title="rc调试面板(运行时)"></a>rc调试面板(运行时)</h2><details><summary>引用调试面板</summary><img src="pic0.jpg" loading="lazy"></details>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> asset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源管理(三)</title>
      <link href="/2022/01/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF3-3%E8%B5%84%E6%BA%90%E6%9B%B4%E6%96%B0/"/>
      <url>/2022/01/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF3-3%E8%B5%84%E6%BA%90%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>最小化启动，Main场景+Manifest文件，即可启动游戏，剩下资源可以全部运行时下载。基于异步的API设计，支持async/await，使边玩边下更从容。</p><h2 id="更新策略"><a href="#更新策略" class="headerlink" title="更新策略"></a>更新策略</h2><p>没有补丁的概念，资源服上的资源一定是最新的，只根据remote和local的manifest清单，对比出需要下载的文件。</p><ol><li>游戏启动时，local和remote的manifest，对比差异，下载差异资源，remote manifest覆盖local</li><li>边玩边下时，manifest清单里有资源记录，如果本地没有资源，便会去remote下载</li><li>每次更新资源时，是覆盖资源服目录，旧的文件不要删掉<!-- 4. 如果有代码，需要先更新代码 --></li></ol><h2 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h2><p>Q. 资源修改后，local的manifest信息会旧，例如size，hash都会变，和remote的资源对不上，下载会报错<br>A. 需要保证资源更新开启，这样会自动下载差异资源</p><p>Q. v1进游戏，什么都没有，需要加载<code>更新界面UI</code>，v2版本修改了<code>更新界面UI</code>，删掉了一些组件，v1的代码使用v2的资源就会报错<br>A1. 需要保证 资源更新等一些ui，都在包里，那么引申一个出新问题，如何确定首包内容<br>A2. 使用append_hash，v1、v2的资源名就不一样了，那么v1的代码，先加载v1的资源，通过资源更新，更新为v2的资源，这种则可以达成首包最小化，只需一个manifest文件</p><p>Q. 如何确定首包内容？<br>A. 可以将某些buildGroup的资源的ab归为初始包，类似与addressable的buildIn group</p><p>Q. 断点续传问题，v1版本的资源下一半，v2版本，更新了，就不能接着下了<br>A. 对比版本号，不一样时，清理cache</p><p>Q. 资源更新完毕，才启动脚本环境？<br>A. 准备尝试huatuo了，需要跟进</p><p>Q. app覆盖安装时，怎么最大化保留正确资源，避免重复下载<br>A. 判断app版本号，不同时，检测remote manifest，扫本地资源，asset名字相同，hash相同，则可以保留，其余全部删除</p><p>Q. The AssetBundle ‘xxx.bundle’ can’t be loaded because another AssetBundle with the same files is already loaded.<br>A. 从没有appendhash，转为appendhash后，因载入了部分内容相同，但名字不一样的ab，热更新完成后，需要卸载掉bundle，调用unload(false)</p><p>Q. 下载到临时目录的必要性？<br>A1. 如果认定为资源完整，但一部分bundle下载失败，就会加载报错。目前，下载会校验所有下载文件，且全部成功才会覆盖local manifest，理论上不会出现问题。<br>A2. 如果需要压缩，则一定是下载到临时目录去，下载成功，再解压。</p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> asset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源管理(一)</title>
      <link href="/2022/01/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF3-1%E8%B5%84%E6%BA%90%E6%89%93%E5%8C%85/"/>
      <url>/2022/01/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF3-1%E8%B5%84%E6%BA%90%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>自定义Manifest文件，维护资源版本等版本，各种AB资源，以及自定义的非AB资源。</li><li>不支持变体，SBP决定的</li><li>资源依赖分析，杜绝资源冗余，<del>支持U2D SpriteAtlas</del>。不使用AssetBundleName，通过相应接口获取资源引用关系后，自己维护AB引用。</li><li>资源分组策略，支持基于文件夹，文件等方式快速资源分组。</li><li>一键打包支持，提供设置面板，反射接口，可以自定义穿插打包逻辑，可快速接入云构建系统。</li><li>文件名使用文件路径hash；文件流hash(md5)，作为文件内容是否一致的判断</li></ul><h2 id="使用ScriptableBuildPipline"><a href="#使用ScriptableBuildPipline" class="headerlink" title="使用ScriptableBuildPipline"></a>使用ScriptableBuildPipline</h2><p>Unity于2018推出了ScriptableBuilPipline，以下会简称SBP，将原本c++层的构建管线，移植到了c#层，方便用户扩展构建管线。</p><p>改用此管线后，最大的优势是，少了很多manifest文件，减少了IO压力。打包没有用Cache，比老管线时间长一些，有了Cache会快一些。可以打包内置资源，杜绝资源冗余。</p><p>另外有一点需要注意，SBP不支持AB变体。</p><h3 id="SBP打包方法和内置资源处理逻辑"><a href="#SBP打包方法和内置资源处理逻辑" class="headerlink" title="SBP打包方法和内置资源处理逻辑"></a>SBP打包方法和内置资源处理逻辑</h3><details><summary>SBP打包脚本</summary><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEditor</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEditor<span class="token punctuation">.</span>Build<span class="token punctuation">.</span>Content</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEditor<span class="token punctuation">.</span>Build<span class="token punctuation">.</span>Pipeline</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEditor<span class="token punctuation">.</span>Build<span class="token punctuation">.</span>Pipeline<span class="token punctuation">.</span>Interfaces</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEditor<span class="token punctuation">.</span>Build<span class="token punctuation">.</span>Pipeline<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Saro<span class="token punctuation">.</span>XAsset<span class="token punctuation">.</span>Build</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SBPBuildAssetBundle</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">ReturnCode</span> <span class="token function">BuildAssetBundles</span><span class="token punctuation">(</span>            <span class="token class-name"><span class="token keyword">string</span></span> outputPath<span class="token punctuation">,</span>            <span class="token class-name">IList<span class="token punctuation">&lt;</span>AssetBundleBuild<span class="token punctuation">></span></span> assetBundleBuilds<span class="token punctuation">,</span>            <span class="token class-name">BuildAssetBundleOptions</span> options<span class="token punctuation">,</span>            <span class="token class-name">BuildTarget</span> buildTarget<span class="token punctuation">,</span>            <span class="token keyword">out</span> <span class="token class-name">IBundleBuildResults</span> results<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> buildContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BundleBuildContent</span><span class="token punctuation">(</span>assetBundleBuilds<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> buildParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BundleBuildParameters</span><span class="token punctuation">(</span>buildTarget<span class="token punctuation">,</span> BuildPipeline<span class="token punctuation">.</span><span class="token function">GetBuildTargetGroup</span><span class="token punctuation">(</span>buildTarget<span class="token punctuation">)</span><span class="token punctuation">,</span> outputPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            buildParams<span class="token punctuation">.</span>ContiguousBundles <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            buildParams<span class="token punctuation">.</span>WriteLinkXML <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            buildParams<span class="token punctuation">.</span>AppendHash <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>BuildAssetBundleOptions<span class="token punctuation">.</span>ChunkBasedCompression<span class="token punctuation">)</span><span class="token punctuation">)</span>                buildParams<span class="token punctuation">.</span>BundleCompression <span class="token operator">=</span> UnityEngine<span class="token punctuation">.</span>BuildCompression<span class="token punctuation">.</span>LZ4<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>BuildAssetBundleOptions<span class="token punctuation">.</span>UncompressedAssetBundle<span class="token punctuation">)</span><span class="token punctuation">)</span>                buildParams<span class="token punctuation">.</span>BundleCompression <span class="token operator">=</span> UnityEngine<span class="token punctuation">.</span>BuildCompression<span class="token punctuation">.</span>Uncompressed<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>BuildAssetBundleOptions<span class="token punctuation">.</span>DisableWriteTypeTree<span class="token punctuation">)</span><span class="token punctuation">)</span>                buildParams<span class="token punctuation">.</span>ContentBuildFlags <span class="token operator">|=</span> ContentBuildFlags<span class="token punctuation">.</span>DisableWriteTypeTree<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>BuildAssetBundleOptions<span class="token punctuation">.</span>ForceRebuildAssetBundle<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">// TODO 需要搞CacheServer</span>                <span class="token comment">//BuildCache</span>                <span class="token comment">//Set build parameters for connecting to the Cache Server</span>                buildParams<span class="token punctuation">.</span>UseCache <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment">//buildParams.CacheServerHost = "buildcache.unitygames.com";</span>                <span class="token comment">//buildParams.CacheServerPort = 8126;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">var</span></span> customTasks <span class="token operator">=</span> <span class="token function">CustomBuildTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ReturnCode</span> exitCode <span class="token operator">=</span> ContentPipeline<span class="token punctuation">.</span><span class="token function">BuildAssetBundles</span><span class="token punctuation">(</span>buildParams<span class="token punctuation">,</span> buildContent<span class="token punctuation">,</span> <span class="token keyword">out</span> results<span class="token punctuation">,</span> customTasks<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exitCode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IList<span class="token punctuation">&lt;</span>IBuildTask<span class="token punctuation">></span></span> <span class="token function">CustomBuildTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> buildTasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>IBuildTask<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Setup</span>            buildTasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SwitchToBuildPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buildTasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RebuildSpriteAtlasCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Player Scripts</span>            buildTasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">BuildPlayerScripts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//buildTasks.Add(new PostScriptsCallback());</span>            <span class="token comment">// Dependency</span>            buildTasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CalculateSceneDependencyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token preprocessor property">#<span class="token directive keyword">if</span> </span><span class="token return-type class-name">UNITY_2019_3_OR_NEWER</span>            buildTasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CalculateCustomDependencyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token preprocessor property">#</span><span class="token return-type class-name">endif</span>            buildTasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CalculateAssetDependencyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buildTasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StripUnusedSpriteSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buildTasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CreateBuiltInResourcesBundle</span><span class="token punctuation">(</span>                <span class="token string">"unitybuiltindata"</span> <span class="token operator">+</span> XAssetPath<span class="token punctuation">.</span>k_AssetExtension<span class="token punctuation">,</span>                <span class="token string">"unitybuiltinshader"</span> <span class="token operator">+</span> XAssetPath<span class="token punctuation">.</span>k_AssetExtension<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//buildTasks.Add(new PostDependencyCallback());</span>            <span class="token comment">// Packing</span>            buildTasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GenerateBundlePacking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buildTasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">UpdateBundleObjectLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buildTasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GenerateBundleCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buildTasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GenerateSubAssetPathMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buildTasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GenerateBundleMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//buildTasks.Add(new PostPackingCallback());</span>            <span class="token comment">// Writing</span>            buildTasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">WriteSerializedFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buildTasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArchiveAndCompressBundles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//buildTasks.Add(new AppendBundleHash());</span>            <span class="token comment">//buildTasks.Add(new PostWritingCallback());</span>            <span class="token comment">// Generate manifest files</span>            <span class="token comment">// TODO: IMPL manifest generation</span>            <span class="token keyword">return</span> buildTasks<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></details><details><summary>打包内置资源</summary><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEditor</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEditor<span class="token punctuation">.</span>Build<span class="token punctuation">.</span>Content</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEditor<span class="token punctuation">.</span>Build<span class="token punctuation">.</span>Pipeline</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEditor<span class="token punctuation">.</span>Build<span class="token punctuation">.</span>Pipeline<span class="token punctuation">.</span>Injector</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEditor<span class="token punctuation">.</span>Build<span class="token punctuation">.</span>Pipeline<span class="token punctuation">.</span>Interfaces</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Saro<span class="token punctuation">.</span>XAsset<span class="token punctuation">.</span>Build</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateBuiltInResourcesBundle</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IBuildTask</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">GUID</span> k_unity_builtin_extra <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GUID</span><span class="token punctuation">(</span><span class="token string">"0000000000000000f000000000000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resources/unity_builtin_extra</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">GUID</span> k_unity_default_resources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GUID</span><span class="token punctuation">(</span><span class="token string">"0000000000000000e000000000000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Library/unity default resources</span>        <span class="token punctuation">[</span><span class="token function">InjectContext</span><span class="token punctuation">(</span>ContextUsage<span class="token punctuation">.</span>In<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">private</span> <span class="token class-name">IDependencyData</span> m_DependencyData<span class="token punctuation">;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InjectContext</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ContextUsage<span class="token punctuation">.</span>InOut<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token keyword">private</span> <span class="token class-name">IBundleExplictObjectLayout</span> m_Layout<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Version <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ShaderBundleName <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> DataBundleName <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token function">CreateBuiltInResourcesBundle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> dataBundleName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> shaderBundleName<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            DataBundleName <span class="token operator">=</span> dataBundleName<span class="token punctuation">;</span>            ShaderBundleName <span class="token operator">=</span> shaderBundleName<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ReturnCode</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">HashSet<span class="token punctuation">&lt;</span>ObjectIdentifier<span class="token punctuation">></span></span> buildInObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span>ObjectIdentifier<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">AssetLoadInfo</span> dependencyInfo <span class="token keyword">in</span> m_DependencyData<span class="token punctuation">.</span>AssetInfo<span class="token punctuation">.</span>Values<span class="token punctuation">)</span>                buildInObjects<span class="token punctuation">.</span><span class="token function">UnionWith</span><span class="token punctuation">(</span>dependencyInfo<span class="token punctuation">.</span>referencedObjects<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span>guid <span class="token operator">==</span> k_unity_builtin_extra<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">SceneDependencyInfo</span> dependencyInfo <span class="token keyword">in</span> m_DependencyData<span class="token punctuation">.</span>SceneInfo<span class="token punctuation">.</span>Values<span class="token punctuation">)</span>                buildInObjects<span class="token punctuation">.</span><span class="token function">UnionWith</span><span class="token punctuation">(</span>dependencyInfo<span class="token punctuation">.</span>referencedObjects<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span>guid <span class="token operator">==</span> k_unity_builtin_extra<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectIdentifier<span class="token punctuation">[</span><span class="token punctuation">]</span></span> usedSet <span class="token operator">=</span> buildInObjects<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> usedTypes <span class="token operator">=</span> ContentBuildInterface<span class="token punctuation">.</span><span class="token function">GetTypeForObjects</span><span class="token punctuation">(</span>usedSet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Layout <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                m_Layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BundleExplictObjectLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将 Shader 和非 Shader 资源分别记录到两个不同的 Bundle 中</span>            <span class="token class-name">Type</span> shader <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Shader</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> usedTypes<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                m_Layout<span class="token punctuation">.</span>ExplicitObjectLocation<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>usedSet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> usedTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token class-name">shader <span class="token punctuation">?</span></span> ShaderBundleName <span class="token punctuation">:</span> DataBundleName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Layout<span class="token punctuation">.</span>ExplicitObjectLocation<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                m_Layout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ReturnCode<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></details><h2 id="资源分组策略"><a href="#资源分组策略" class="headerlink" title="资源分组策略"></a>资源分组策略</h2><ol><li>res一般只放需要动态加载的资源，其他资源直接被prefab/scene引用即可，目的是减少路径序列化，从而减小manifest文件大小</li></ol><h2 id="资源依赖分析"><a href="#资源依赖分析" class="headerlink" title="资源依赖分析"></a>资源依赖分析</h2><h3 id="SpriteAtlas打包问题"><a href="#SpriteAtlas打包问题" class="headerlink" title="SpriteAtlas打包问题"></a>SpriteAtlas打包问题</h3><p><del>可以直接看 <a href="https://www.cnblogs.com/msxh/p/14194756.html">SpriteAtlas与AssetBundle最佳食用方案</a>，讲得非常好了，其他的文章所写的方式，都挺难用的，不需要什么LateBinding啥的。</del></p><p><del>另外，作为SpriteAtlas的资源图片，还作为Texture来使用，会有双份图片打包，即Atlas图片里一份，原图一份，需要注意。</del></p><p><del>由于是直接使用散图的，所以，不会引用到SpriteAtlas，打包时需要特殊处理下，将图集里的散图打到同一个ab里。</del></p><p>经测试，上述仅限于legacy打包管线！sbp打包管线冗余，图集，散图都被打进包了！需要参考下Addressable的处理方式！</p><h2 id="自定义Manifest"><a href="#自定义Manifest" class="headerlink" title="自定义Manifest"></a>自定义Manifest</h2><p>由于我们自己处理了AB依赖，所以需要自己搞一套AB依赖数据结构。同时也支持非AB资源纳入资源清单，例如Wwise音效资源等等，方便直接从资源服直接下载，这也跟资源更新机制实现有关，资源更新以后再说。</p><h2 id="打包工作流"><a href="#打包工作流" class="headerlink" title="打包工作流"></a>打包工作流</h2><h3 id="打包设置面板"><a href="#打包设置面板" class="headerlink" title="打包设置面板"></a>打包设置面板</h3><p>基于接口反射，实现穿插自定义打包方法，提供一个BuiltIn实现，可以仿照着自行实现一个新的。</p><details><summary>打包面板</summary><img src="pic0.jpg" loading="lazy"></details><details><summary>配置面板</summary><img src="pic1.jpg" loading="lazy"></details><h3 id="AssetBundle浏览器"><a href="#AssetBundle浏览器" class="headerlink" title="AssetBundle浏览器"></a>AssetBundle浏览器</h3><p>改造了官方AssetBundleBrowser插件，给本项目使用，移除了编辑功能，添加了打包后AB大小的对比功能</p><h2 id="资源打包常见问题"><a href="#资源打包常见问题" class="headerlink" title="资源打包常见问题"></a>资源打包常见问题</h2><h3 id="1-场景光照异常"><a href="#1-场景光照异常" class="headerlink" title="1.场景光照异常"></a>1.场景光照异常</h3><p>可能是场景设置不对，光照信息打AB后被剔除掉了。</p><h3 id="2-模型材质异常"><a href="#2-模型材质异常" class="headerlink" title="2.模型材质异常"></a>2.模型材质异常</h3><p>例如，没有高光，显示效果异常，和编辑器下有出入。重新收集下变体，保存成svc文件，重新打包Shader AB，观察结果。尽量避免将Shader丢到IncludeShaders里去，不然变体会爆炸。</p><h3 id="3-组件class丢失"><a href="#3-组件class丢失" class="headerlink" title="3.组件class丢失"></a>3.组件class丢失</h3><p>il2cpp将class裁剪掉了，需要配置link文件。例如，AnimatorController打包后，真机丢失，动画失效。但AnimatorContorller为Editor下的类，link文件貌似没有效果，解决方案是Resources文件夹下，弄一个预制体，挂载Animator组件，并赋值一个空的Controller。</p><h2 id="TODO-List"><a href="#TODO-List" class="headerlink" title="TODO List"></a>TODO List</h2><ol><li>Asset Graph 自动化分配group。</li><li>sbp打包SpriteAtlas，使用include build时，冗余问题。</li><li>扫描材质，自动收集变体（通过代码开启的变体，需要特殊处理）。</li><li>分组也可能会考虑添加GUI编辑支持。估计弄成Addressable那样的。</li></ol>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> asset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Moon Game Framework(零)</title>
      <link href="/2022/01/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF0/"/>
      <url>/2022/01/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF0/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><a href="/img/mindmap/mgf_mindmap.html">脑图</a></p><p><a href="/2021/03/09/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF1%E6%A1%86%E6%9E%B6%E5%90%AF%E5%8A%A8">框架启动</a><br><a href="/2022/01/24/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF2%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F">事件系统</a><br><a href="/2022/01/10/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF3%E8%B5%84%E6%BA%90%E6%A1%86%E6%9E%B6">资源管理</a></p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> gamedev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源管理(零)</title>
      <link href="/2022/01/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF3%E8%B5%84%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/01/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF3%E8%B5%84%E6%BA%90%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>基于<code>XAsset4.x</code>改造的资源框架，提供一键打包，打包流程扩展，资源分组策略，AssetBundle查看。资源加载异步化，提供async/await接口，避免回调地狱，支持直接从远端资源服加载资源（边玩边下）。</p><p><a href="/2022/01/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF3-1%E8%B5%84%E6%BA%90%E6%89%93%E5%8C%85/index.html">资源打包</a><br><a href="/2022/01/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF3-2%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/index.html">资源加载</a><br><a href="/2022/01/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF3-3%E8%B5%84%E6%BA%90%E6%9B%B4%E6%96%B0/index.html">资源加载</a></p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/Sarofc/com.saro.moonasset">MoonAsset</a></p><h2 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h2><ol><li>builtin管线，部分builtin shader打包后，洋红，（Legacy Particle、DefaultLine）</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/xasset/xasset">XAsset</a>，由于XAsset开源协议变更，新版本的XAsset，本项目不再参考，只基于MIT协议的旧版本进行修改。</p><!-- ## 资源加载CheckCustomAssets(string assetName) 处理非unity资源，eg. 表格等等表格打成VFS -->]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> asset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Moon Game Framework(二)</title>
      <link href="/2022/01/24/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF2%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/01/24/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF2%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> gamedev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户类持有池对象引用问题</title>
      <link href="/2022/01/22/unity/%E5%85%B6%E4%BB%96/%E7%94%A8%E6%88%B7%E7%B1%BB%E6%8C%81%E6%9C%89%E6%B1%A0%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2022/01/22/unity/%E5%85%B6%E4%BB%96/%E7%94%A8%E6%88%B7%E7%B1%BB%E6%8C%81%E6%9C%89%E6%B1%A0%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>通常游戏开发，带gc的语言，频繁创建的小对象，都会考虑用对象池优化，从而减少gc耗时，内存碎片。但是对象池管理不当，是非常危险的，而且会增加编码难度，可能使原本易于维护的代码变得复杂化。</p><p>用户案例，用户类需要持有<code>池对象A</code>的引用，进行一些操作，但<code>池对象A</code>可能随时被回收掉，或者回收后再利用了，这时候再通过<code>池对象A</code>的引用来使用，就会出现非常严重得错误。</p><p>上述用户案例中，池对象的生命周期可能很难控制，变得难以维护，但有时候又有这种需求，又想享受对象池带来的性能提升。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// struct实现，避免分配堆内存</span><span class="token comment">// 实现IEquatable接口，重写HashCode方法，可用于字典，避免装箱</span><span class="token comment">// 重写操作符，方便使用</span><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">ObjectHandle</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEquatable<span class="token punctuation">&lt;</span>ObjectHandle<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 池对象维护一个ObjectID，每次生成对象时，全局自增</span>    <span class="token keyword">public</span> <span class="token return-type class-name">Object</span> Object <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Handle <span class="token operator">=></span> m_CachedObjectID<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> m_CachedObjectID<span class="token punctuation">;</span> <span class="token comment">// 从1开始有效，0无效</span>    <span class="token keyword">public</span> <span class="token function">ObjectHandle</span><span class="token punctuation">(</span><span class="token class-name">Object</span> Object<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建一个Handle，记录当前对象的引用，以及ObjectID</span>        Object <span class="token operator">=</span> Object<span class="token punctuation">;</span>        m_CachedObjectID <span class="token operator">=</span> Object<span class="token punctuation">.</span>ObjectID<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 对象不为空，且对象的ObjectID等于创建Handle时的ObjectID，才会认为对象可操作，否则，不应该再操作此对象了</span>        <span class="token keyword">return</span> Object <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> m_CachedObjectID <span class="token operator">==</span> Object<span class="token punctuation">.</span>ObjectID<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">implicit</span> <span class="token keyword">operator</span> <span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token class-name">ObjectHandle</span> handle<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> handle<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">explicit</span> <span class="token keyword">operator</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token class-name">ObjectHandle</span> handle<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> handle <span class="token punctuation">?</span> handle<span class="token punctuation">.</span>Object <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name">ObjectHandle</span> other<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">CompareObjects</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> obj<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>obj <span class="token keyword">is</span> <span class="token class-name">ObjectHandle</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ObjectHandle<span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token class-name">ObjectHandle</span> lhs<span class="token punctuation">,</span> <span class="token class-name">ObjectHandle</span> rhs<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">CompareObjects</span><span class="token punctuation">(</span>lhs<span class="token punctuation">,</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">!=</span><span class="token punctuation">(</span><span class="token class-name">ObjectHandle</span> lhs<span class="token punctuation">,</span> <span class="token class-name">ObjectHandle</span> rhs<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">CompareObjects</span><span class="token punctuation">(</span>lhs<span class="token punctuation">,</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CompareObjects</span><span class="token punctuation">(</span><span class="token class-name">ObjectHandle</span> lhs<span class="token punctuation">,</span> <span class="token class-name">ObjectHandle</span> rhs<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> validA <span class="token operator">=</span> lhs<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> validB <span class="token operator">=</span> rhs<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>validA <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>validB<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>validA <span class="token operator">&amp;&amp;</span> validB<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>m_CachedObjectID <span class="token operator">==</span> rhs<span class="token punctuation">.</span>m_CachedObjectID<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> m_CachedObjectID<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>unity引擎的gc算法(BOEHM GC)过于古老，即使多了分帧机制，总gc时长并未被减少，甚至可能还增加了，使用对象池还是很有必要的。</p><p>capcom的re引擎，也是c#作为脚本，也是il2cpp技术，但是gc的效率非常高，即使ps4上每帧分配300k左右的托管堆内存，每帧gc耗时依然可以保持0.2ms左右（cedec演讲，案例是鬼泣5）。这种gc作为后盾，开发效率可以大大提高！希望unity也能达到这种效果，造福广大开发者！</p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> c# </tag>
            
            <tag> object pool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据表</title>
      <link href="/2022/01/14/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E6%95%B0%E6%8D%AE%E8%A1%A8/"/>
      <url>/2022/01/14/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E6%95%B0%E6%8D%AE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Excel库调研"><a href="#Excel库调研" class="headerlink" title="Excel库调研"></a>Excel库调研</h2><table><thead><tr><th>库名</th><th>测试用例</th><th>效率</th></tr></thead><tbody><tr><td>ExcelDataReader</td><td>250excel文件，共计50w行</td><td>16000 ms</td></tr><tr><td>NPOI</td><td>250excel文件，共计50w行</td><td>60000 ms</td></tr><tr><td>EPPlus</td><td>250excel文件，共计50w行</td><td>60000 ms</td></tr></tbody></table><p>ExcelDataReader优势是可以按需读取，内存占用、读取效率都要比另外两个快，NPOI、EPPlus貌似只能全量读取</p><h2 id="使用yield-return"><a href="#使用yield-return" class="headerlink" title="使用yield return"></a>使用yield return</h2><p>测试发现 <code>yield return</code> 返回IEnumerable对象，读取Excel的IO效率会提高很多，从16000ms，到7000ms</p><p>以下代码，V1版本要比V2版本快将很多。</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>ExcelData<span class="token punctuation">></span></span> <span class="token function">LoadExcel_V1</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> filePath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">,</span> FileShare<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> ExcelReaderFactory<span class="token punctuation">.</span><span class="token function">CreateReader</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsSheetNameValid</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    counter<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token class-name">ExcelData</span> data<span class="token punctuation">;</span>                    <span class="token keyword">try</span>                    <span class="token punctuation">&#123;</span>                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"parsing...... </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">reader<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">counter</span><span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">reader<span class="token punctuation">.</span>ResultsCount</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        data <span class="token operator">=</span> <span class="token function">ParseExcel</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"excel:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">filePath</span><span class="token punctuation">&#125;</span></span><span class="token string"> sheet:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">reader<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string"> 读取失败."</span></span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">yield</span> <span class="token keyword">return</span> data<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">NextResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>ExcelData<span class="token punctuation">></span></span> <span class="token function">LoadExcel_V2</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> filePath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ExcelData<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">,</span> FileShare<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> ExcelReaderFactory<span class="token punctuation">.</span><span class="token function">CreateReader</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsSheetNameValid</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    counter<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token class-name">ExcelData</span> data<span class="token punctuation">;</span>                    <span class="token keyword">try</span>                    <span class="token punctuation">&#123;</span>                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"parsing...... </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">reader<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">counter</span><span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">reader<span class="token punctuation">.</span>ResultsCount</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        data <span class="token operator">=</span> <span class="token function">ParseExcel</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"excel:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">filePath</span><span class="token punctuation">&#125;</span></span><span class="token string"> sheet:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">reader<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string"> 读取失败."</span></span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        ret<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">NextResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="yield-return-坑点"><a href="#yield-return-坑点" class="headerlink" title="yield return 坑点"></a>yield return 坑点</h2><p>本读表案例，多了一次forloop遍历，会多增加3000ms读表、解析表格耗时。7000ms上升到10000ms。</p><p>坑点可看以下代码</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"111"</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"222"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name"><span class="token keyword">var</span></span> a <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> a<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"outside loop: "</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">Process</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> inData<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> inData<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Process: "</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// result:</span><span class="token comment">// outside loop: 111</span><span class="token comment">// work</span><span class="token comment">// outside loop: 222</span><span class="token comment">// Process: 111</span><span class="token comment">// work</span><span class="token comment">// Process: 222</span><span class="token comment">// 每次forloop，work都会被调用，需要尽量避免，特别是方法里有繁重逻辑</span></code></pre><h2 id="使用Span"><a href="#使用Span" class="headerlink" title="使用Span"></a>使用Span</h2><p>Span已是 <code>.Net Standard 2.1</code>的标准库的一部分，<code>2.0</code> 需要引入nuget才行。</p><p>Span(ref struct)为内存切片，是内存片段的封装，可以接住<code>栈内存</code>、<code>托管堆</code>和<code>非托管堆内存</code>进行操作，但span有一些限制，不能作为成员变量，不能在async方法里使用，这些情况，有另一个类型Memory来处理。以前版本，也可以开启unsafe直接使用指针操作，但是很危险，所以.net为了性能提供了span/memory，同时保证了代码安全。</p><p>Span能有效降低字符串SubString等操作的开销，不会生成新的字符串，减少gc。</p><p>但是Span对字符串操作，还没有提供Split方法，这个比较蛋疼。<br>使用这个<a href="https://github.com/dotnet/runtime/pull/295/files/2da605832d09f8bd046517b463652cc52ec6553e#diff-caa10aad67c342827c4ba85e5880f6d6b0ef93a8bbb0555669a885e1cc7bb082">ReadOnlySpan.Split</a>，性能比String.Split快一丢丢，也没有零时字符串生成了，但使用起来繁琐一些</p><p>MGF后续升级 .Net Standard 2.1后，也将会大量使用Span</p><h2 id="多key的实现"><a href="#多key的实现" class="headerlink" title="多key的实现"></a>多key的实现</h2><p>支持1到4个key作为数据行的索引，每个key(int)，但支持值得范围有限，最终合成唯一combinekey(ulong)，支持负数。</p><p>ulong为64bit。2个key，则int32和int32，合成64bit，3个key则，int32，int16，int16合成64bit。</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MethodImpl</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MethodImplOptions<span class="token punctuation">.</span>AggressiveInlining<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">ulong</span></span> <span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> key1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> key2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>key1 <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>key2 <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MethodImpl</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MethodImplOptions<span class="token punctuation">.</span>AggressiveInlining<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">ulong</span></span> <span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> key1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> key2<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> key3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">short</span></span> shortKey2 <span class="token operator">=</span> System<span class="token punctuation">.</span>Convert<span class="token punctuation">.</span><span class="token function">ToInt16</span><span class="token punctuation">(</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">short</span></span> shortKey3 <span class="token operator">=</span> System<span class="token punctuation">.</span>Convert<span class="token punctuation">.</span><span class="token function">ToInt16</span><span class="token punctuation">(</span>key3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>key1 <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>shortKey2 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>shortKey3 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MethodImpl</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MethodImplOptions<span class="token punctuation">.</span>AggressiveInlining<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">ulong</span></span> <span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> key1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> key2<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> key3<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> key4<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">short</span></span> shortKey1 <span class="token operator">=</span> System<span class="token punctuation">.</span>Convert<span class="token punctuation">.</span><span class="token function">ToInt16</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">short</span></span> shortKey2 <span class="token operator">=</span> System<span class="token punctuation">.</span>Convert<span class="token punctuation">.</span><span class="token function">ToInt16</span><span class="token punctuation">(</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">short</span></span> shortKey3 <span class="token operator">=</span> System<span class="token punctuation">.</span>Convert<span class="token punctuation">.</span><span class="token function">ToInt16</span><span class="token punctuation">(</span>key3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">short</span></span> shortKey4 <span class="token operator">=</span> System<span class="token punctuation">.</span>Convert<span class="token punctuation">.</span><span class="token function">ToInt16</span><span class="token punctuation">(</span>key4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>shortKey1 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>shortKey2 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>shortKey3 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>shortKey4 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>使用CodeDom，部分代码片使用StringBuilder拼接。</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/Sarofc/GTable">https://github.com/Sarofc/GTable</a></p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏性标签(GameplayTag)</title>
      <link href="/2022/01/09/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/%E6%B8%B8%E6%88%8F%E6%80%A7%E6%A0%87%E7%AD%BE/"/>
      <url>/2022/01/09/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/%E6%B8%B8%E6%88%8F%E6%80%A7%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<summary><p>在UE4中，层次化标签系统(GameplayTag)大量使用。树形结构，可替代一些枚举、bool变量，甚至能当成事件来传递。</p><p>设计如下标签，Buff.Strong.Stun、Buff.Weak.Fire、Buff.Weak.Ice。标签Buff.Weak.Fire、Buff.Weak.Ice，MatchesTag(“Buff.Weak”) 都会返回true。那么就可以很轻松的实现Buff驱散，而不用新增其他变量，来处理这些问题。所以标签设计就尤为重要，尽量不要在项目中后期修改已有标签。</p><p>很多buff都可能会给角色施加Stun效果，通常可以考虑用一个int表示，buff创建时增加1，buff销毁时，减少1，GameplayTagCountConainer也是这样解决的，并且自带了事件系统。如果所有状态使用标记位来实现（int/long存储），那么多个buff源对状态的修改就要特别注意了。</p></summary><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><img src="pic1.png" loading="lazy"><ol><li>GameplayTag是struct，只保存TagName的TagHash(int)，作为Dictionary的Key是非常高效的。UE则是引擎FName直接实现的，也是hash字符串。</li><li>GameplayTagManager管理所有GameplayTagNode以及TagName，可以运行时获取GameplayTag以及TagName。解析TagAsset文本后，用Dictionary保存在内存里，用树形结构管理层级。树形结构可以方便的回溯，很容易实现层级化引用。</li><li>GameplayTagNode是class，被GameplayTagManager所管理，里面只存有GameplayTag和编辑器下才会有的注释信息，以及父节点和子节点引用。</li><li>GameplayTagContainer，是GameplayTag容器，List实现，可序列化，提供多项匹配。内部会额外存储parent节点，以加速匹配。</li><li>GameplayTagCountContainer，可以有效处理GameplayTag堆叠，并抛出对应的事件。内部维护两个Dictionary&lt;GameplayTag,int&gt;，分别处理<code>显式GameplayTag</code>，以及<code>GameplayTag</code>，举个例子，添加1个A.1，则<code>显式GameplayTag</code>只有{A.1,1}，<code>GameplayTag</code>则有{A,1}{A.1,1}，标签A也会被隐式添加。</li><li>GameplayTagAsset，序列化文件json。反序列化细节，使用 [UnityEditor.Callbacks.DidReloadScripts] 特性，来每次脚本编译后，重新反序列化一次TagAsset到内存里。也可以手动点击编辑器里的Load按钮，来刷新。(后面可以考虑监听文件变化，FileSystemWatcher or OnPostprocessAllAssets)。</li></ol><!--```json// json{    "Tags": [        {            "TagName": "A.1",            "DevComment": "test tag A.1"        },        {            "TagName": "B.1",            "DevComment": ""        },        {            "TagName": "B.2",            "DevComment": ""        }    ]}// 结构Root   ├──A   ├  └──A.1   └──B      ├──B.1      └──B.2``` --><h2 id="匹配规则，取自ue4文档"><a href="#匹配规则，取自ue4文档" class="headerlink" title="匹配规则，取自ue4文档"></a>匹配规则，取自ue4文档</h2><table><thead><tr><th>Source</th><th>Function/Operation</th><th>Input Parameter</th><th>Return Value</th></tr></thead><tbody><tr><td>A.1</td><td>MatchesTag</td><td>A</td><td>true</td></tr><tr><td>A.1</td><td>MatchesTagExact (or ==)</td><td>A</td><td>false</td></tr><tr><td>A.1</td><td>MatchesAny</td><td>{A, C}</td><td>true</td></tr><tr><td>A.1</td><td>MatchesAnyExact</td><td>{A, C}</td><td>false</td></tr><tr><td>A.1</td><td>MatchesAll</td><td>{A}</td><td>true</td></tr><tr><td>A.1</td><td>MatchesAllExact</td><td>{A}</td><td>false</td></tr><tr><td>{A.1, B.1}</td><td>HasTag</td><td>A</td><td>true</td></tr><tr><td>{A.1, B.1}</td><td>HasTagExact</td><td>A</td><td>false</td></tr><tr><td>{A.1, B.1}</td><td>HasAny</td><td>{A, C}</td><td>true</td></tr><tr><td>{A.1, B.1}</td><td>HasAnyExact</td><td>{A, C}</td><td>false</td></tr><tr><td>{A.1, B.1}</td><td>HasAll</td><td>{A, B}</td><td>true</td></tr><tr><td>{A.1, B.1}</td><td>HasAllExact</td><td>{A, B}</td><td>false</td></tr></tbody></table><h2 id="编辑器支持"><a href="#编辑器支持" class="headerlink" title="编辑器支持"></a>编辑器支持</h2><ol><li>GameplayTag可以直接编辑Json文本，也可以在Editor面板里直接编辑。</li><li>Inspector面板可以直接选择对应的GameplayTag，Tag注释也会显示成Tooltip，并且Tag丢失时，会标红。</li></ol><p><img src="pic2.png" width="50%" loading="lazy"><img src="pic0.png" width="50%" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>UE4 GameplayTag</p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
          <category> gameplay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gamedev </tag>
            
            <tag> gameplay </tag>
            
            <tag> gameplaytag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟文件系统</title>
      <link href="/2022/01/09/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/01/09/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>TODO</p><ul><li>内存布局</li><li>block分簇算法</li><li>增删改查实现</li><li>文件碎片整理实现</li></ul>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> gamedev </tag>
            
            <tag> vfs </tag>
            
            <tag> 虚拟文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件下载器</title>
      <link href="/2022/01/09/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
      <url>/2022/01/09/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>基于 <code>HttpWebRequest</code> 和 <code>UnityWebRequest</code> 的多线程、断点续传文件下载器</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><img src="pic0.png" loading="lazy"><p><code>IDonwloadAgent</code>为下载器接口，目前有两种实现，HttpDownload和UnityWebRequestDownload，可以无缝切换。IDonwloadAgent继承IEnumerator接口，可以无缝接入unity协程、UniTask(Async)，实现非回调式异步等待，逻辑更清晰。IDonwloadAgent提供各种操作接口供Downloader调用，例如开始、暂停、重试、取消等等。</p><p><code>Downloader</code>为工厂模式实现，管理所有下载器实例，避免重复下载，等等。通过DownloadAsync(DownloadInfo)，即可异步下载文件。覆写s_OnDownloadAgentFactory委托，可以使用自定义IDownloadAgent实例。</p><h2 id="下载器实现"><a href="#下载器实现" class="headerlink" title="下载器实现"></a>下载器实现</h2><h3 id="HttpDownload"><a href="#HttpDownload" class="headerlink" title="HttpDownload"></a>HttpDownload</h3><ol><li>读取已下载文件流的Position，加上Http Range头，即可实现断点续传。</li><li>通过DownloadInfo中的Offset参数，加上Http Range头，即可切片下载。</li><li>每个HttpDownload都会使用c#线程池进行下载任务。（需注意unity切后台，线程终止问题，需要重新开启下载任务，否则下载器会假死，下载任务无法完成）</li><li>修改buffer大小，貌似可以达成限速效果。</li></ol><details><summary>HttpDownload 完整实现</summary><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">HttpDownload</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDownloadAgent</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 通过buffer size 貌似可以限速？</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">long</span></span> s_ReadBufferSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> Instance</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> m_ReadBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>s_ReadBufferSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">FileStream</span> m_Writer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HttpDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">;</span>        Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">DownloadInfo</span> Info <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">EDownloadStatus</span> Status <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Error <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>IDownloadAgent<span class="token punctuation">></span></span> Completed<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsDone <span class="token operator">=></span> Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Failed <span class="token operator">||</span> Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Progress <span class="token operator">=></span> Position <span class="token operator">*</span> <span class="token number">1f</span> <span class="token operator">/</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> Position <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">;</span>        <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Error <span class="token operator">=</span> <span class="token string">"User Cancel."</span><span class="token punctuation">;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Completed <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">Completed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Completed <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span>        <span class="token punctuation">&#123;</span>            <span class="token function">Downloading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Position <span class="token operator">!=</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"Download length </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Position</span><span class="token punctuation">&#125;</span></span><span class="token string"> mismatch to </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Info<span class="token punctuation">.</span>Size</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Error <span class="token operator">=</span> e<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>            Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">finally</span>        <span class="token punctuation">&#123;</span>            <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Writer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_Writer<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Writer<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Writer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CheckValidationResult</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">X509Certificate</span> certificate<span class="token punctuation">,</span> <span class="token class-name">X509Chain</span> chain<span class="token punctuation">,</span>        <span class="token class-name">SslPolicyErrors</span> spe<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Downloading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO</span>        <span class="token comment">// 下载中，长时间没速度，也应该进行处理</span>        <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token function">CreateWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">GetResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ContentLength <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Info<span class="token punctuation">.</span>Size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> Info<span class="token punctuation">.</span>Size <span class="token operator">=</span> response<span class="token punctuation">.</span>ContentLength <span class="token operator">+</span> Position<span class="token punctuation">;</span>                <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">GetResponseStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Position <span class="token operator">&lt;</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Progressing<span class="token punctuation">)</span>                        <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#123;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name">WebRequest</span> <span class="token function">CreateWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">WebRequest</span> request<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Info<span class="token punctuation">.</span>DownloadUrl<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            ServicePointManager<span class="token punctuation">.</span>ServerCertificateValidationCallback <span class="token operator">=</span> CheckValidationResult<span class="token punctuation">;</span>            request <span class="token operator">=</span> <span class="token function">GetHttpWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            request <span class="token operator">=</span> <span class="token function">GetHttpWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> request<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name">WebRequest</span> <span class="token function">GetHttpWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> httpWebRequest <span class="token operator">=</span> <span class="token punctuation">(</span>HttpWebRequest<span class="token punctuation">)</span>WebRequest<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>DownloadUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        httpWebRequest<span class="token punctuation">.</span>ProtocolVersion <span class="token operator">=</span> HttpVersion<span class="token punctuation">.</span>Version11<span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">from</span> <span class="token operator">=</span> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position<span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> to <span class="token operator">=</span> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>        httpWebRequest<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO 加上超时</span>        <span class="token comment">//httpWebRequest.Timeout = 1000000; // 默认是1000s</span>        <span class="token keyword">return</span> httpWebRequest<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token class-name">Stream</span> reader<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> len <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>m_ReadBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> m_ReadBuffer<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>m_ReadBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            Position <span class="token operator">+=</span> len<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Status <span class="token operator">!=</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Progressing<span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> fileInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>SavePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span>Exists <span class="token operator">&amp;&amp;</span> fileInfo<span class="token punctuation">.</span>Length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Info<span class="token punctuation">.</span>Size <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> fileInfo<span class="token punctuation">.</span>Length <span class="token operator">==</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>                Position <span class="token operator">=</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// TODO</span>            <span class="token comment">// issue：</span>            <span class="token comment">// IOException: Sharing violation on path</span>            <span class="token comment">// 文件读取了多次</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Writer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                m_Writer <span class="token operator">=</span> fileInfo<span class="token punctuation">.</span><span class="token function">OpenWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Position <span class="token operator">=</span> m_Writer<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Info<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"Invalid Range [</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position </span><span class="token punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position <span class="token operator">+</span> Info<span class="token punctuation">.</span>Size</span><span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token punctuation">;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Position <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> m_Writer<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>End<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Info<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"Invalid Range [</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position </span><span class="token punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position <span class="token operator">+</span> Info<span class="token punctuation">.</span>Size</span><span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token punctuation">;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">var</span></span> dir <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetDirectoryName</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>SavePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Writer <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>SavePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>Run<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> IEnumerator Impl</span>    <span class="token return-type class-name"><span class="token keyword">bool</span></span> IEnumerator<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>IsDone<span class="token punctuation">;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> IEnumerator<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">object</span></span> IEnumerator<span class="token punctuation">.</span>Current <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span class="token punctuation">&#125;</span></code></pre></details><h3 id="UnityWebRequestDownload"><a href="#UnityWebRequestDownload" class="headerlink" title="UnityWebRequestDownload"></a>UnityWebRequestDownload</h3><ol><li>大体上同HttpDownload，但没有线程操作，unity托管。</li><li>使用DownloadHandlerScript实现下载回调。</li><li>DownloadHandlerScript传入buffer，可以减少内存分配。</li></ol><details><summary>UnityWebRequestDownload 完整实现</summary><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">UnityWebRequestDownload</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDownloadAgent</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">MyDownloadScript</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DownloadHandlerScript</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">UnityWebRequestDownload</span> m_Download<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyDownloadScript</span><span class="token punctuation">(</span><span class="token class-name">UnityWebRequestDownload</span> download<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_Download <span class="token operator">=</span> download<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token function">GetProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> m_Download<span class="token punctuation">.</span>Progress<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ReceiveData</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> buffer<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> dataLength<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> m_Download<span class="token punctuation">.</span><span class="token function">ReceiveData</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> dataLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CompleteContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_Download<span class="token punctuation">.</span><span class="token function">CompleteContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> Position <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">DownloadInfo</span> Info <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsDone <span class="token operator">=></span> Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Failed <span class="token operator">||</span> Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">EDownloadStatus</span> Status <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>IDownloadAgent<span class="token punctuation">></span></span> Completed<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Progress <span class="token operator">=></span> Position <span class="token operator">*</span> <span class="token number">1f</span> <span class="token operator">/</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">UnityWebRequest</span> m_Request<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">FileStream</span> m_Writer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">long</span></span> s_ReadBufferSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> m_ReadBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>s_ReadBufferSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Error <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">internal</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Info<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Status <span class="token operator">!=</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Progressing<span class="token punctuation">;</span>        Error <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> fileInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>SavePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span>Exists <span class="token operator">&amp;&amp;</span> fileInfo<span class="token punctuation">.</span>Length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Info<span class="token punctuation">.</span>Size <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> fileInfo<span class="token punctuation">.</span>Length <span class="token operator">==</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>                Position <span class="token operator">=</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Writer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                m_Writer <span class="token operator">=</span> fileInfo<span class="token punctuation">.</span><span class="token function">OpenWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Position <span class="token operator">=</span> m_Writer<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Info<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"Invalid Range [</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position </span><span class="token punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position <span class="token operator">+</span> Info<span class="token punctuation">.</span>Size</span><span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token punctuation">;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Position <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> m_Writer<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>End<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Info<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"Invalid Range [</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position </span><span class="token punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position <span class="token operator">+</span> Info<span class="token punctuation">.</span>Size</span><span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token punctuation">;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Info<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"Invalid Range [</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position </span><span class="token punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position <span class="token operator">+</span> Info<span class="token punctuation">.</span>Size</span><span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token punctuation">;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">var</span></span> dir <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetDirectoryName</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>SavePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Writer <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>SavePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        m_Request <span class="token operator">=</span> <span class="token function">CreateHttpWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Progressing<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Request<span class="token punctuation">.</span>isDone <span class="token operator">&amp;&amp;</span> m_Request<span class="token punctuation">.</span>downloadedBytes <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>Info<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> <span class="token string">"unknown error: downloadedBytes &lt; len"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>m_Request<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> m_Request<span class="token punctuation">.</span>error<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Error <span class="token operator">=</span> <span class="token string">"User Cancel."</span><span class="token punctuation">;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>        <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Completed <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">Completed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Completed <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name">UnityWebRequest</span> <span class="token function">CreateHttpWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> UnityWebRequest<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>DownloadUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span>downloadHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyDownloadScript</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m_ReadBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">from</span> <span class="token operator">=</span> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position<span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> to <span class="token operator">=</span> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">SetRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Range"</span><span class="token punctuation">,</span> <span class="token string">"bytes="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">SendWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO 加上超时</span>        <span class="token comment">//m_Request.Timeout = 1000000; // 默认是1000s</span>        <span class="token keyword">return</span> request<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Writer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_Writer<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Writer<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Writer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Request <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_Request<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Request<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Request <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">;</span>        <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> Handler</span>    <span class="token keyword">internal</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ReceiveData</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> buffer<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> dataLength<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>m_Request<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Error <span class="token operator">=</span> m_Request<span class="token punctuation">.</span>error<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        m_Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dataLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        Position <span class="token operator">+=</span> dataLength<span class="token punctuation">;</span>        <span class="token keyword">return</span> Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Progressing<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">internal</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CompleteContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>        <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> IEnumerator Impl</span>    <span class="token return-type class-name"><span class="token keyword">bool</span></span> IEnumerator<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>IsDone<span class="token punctuation">;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> IEnumerator<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">object</span></span> IEnumerator<span class="token punctuation">.</span>Current <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span class="token punctuation">&#125;</span></code></pre></details><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>TODO</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/xasset/xasset">XAsset</a></p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ugui组件绑定和代码生成</title>
      <link href="/2021/10/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/ugui%E7%BB%84%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/"/>
      <url>/2021/10/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/ugui%E7%BB%84%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>基于ET <code>ReferenceCollector</code> 的UI代码自动生成</p><h2 id="生成细节"><a href="#生成细节" class="headerlink" title="生成细节"></a>生成细节</h2><ol><li>配置ui类型，使用反射获取<code>字符串-ui类型</code> 键值对。使用接口反射的目的是为了分程序集，可以方便每个项目自定义扩展。</li><li>根据1中的配置，递归收集字段实例，并序列化到容器中，得到 <code>字符串-ui组件实例</code> 键值对。</li><li>根据键值对生成代码。利用partial技术，以及uibinder(Mono脚本)直接引用uiscript，可有效简化操作，适应大多数情况。要扩展到lua，也非常容易。</li></ol><h2 id="上图"><a href="#上图" class="headerlink" title="上图"></a>上图</h2><img src="pic0.png" loading="lazy"><img src="pic1.png" loading="lazy"><img src="pic2.png" loading="lazy"><img src="pic3.png" loading="lazy"><img src="pic4.png" loading="lazy"><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/Sarofc/com.saro.mgf/tree/main/Runtime/Common/UI/Editor">https://github.com/Sarofc/com.saro.mgf/tree/main/Runtime/Common/UI/Editor</a></p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ugui </tag>
            
            <tag> codegen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技能系统(一) Buff</title>
      <link href="/2021/09/06/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/Ability1Buff/"/>
      <url>/2021/09/06/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/Ability1Buff/</url>
      
        <content type="html"><![CDATA[<p>buff处理自身的生命周期、叠加，数值，状态外，还可以响应任何模块的事件。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>buff系统事件模块，主要由Event、Action、Target三部分组成。</p><h3 id="1-Event"><a href="#1-Event" class="headerlink" title="1.Event"></a>1.Event</h3><p>事件，buff的灵魂，参考了Dota2的技能系统。buff里本身没有其他游戏逻辑，只定义事件，绑定Action。buff自身也有一些OnCreated、OnDestroyed事件等，这些buff相关的事件自己管理，其他事件，例如OnDamage事件，则buff监听战斗模块的事件，战斗模块抛出事件，buff便可响应，调用绑定好的Action。所以，buff是一个中介者的角色，真正的游戏效果实现，还是在各个模块里实现的。</p><p>事件参数，通过EventArgs包装，可以方便接入c# EventHandler设计。</p><!-- TODO 补上buff执行逻辑图 --><details><summary>自定义绑定 参考</summary><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">partial</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Register</span><span class="token punctuation">(</span><span class="token class-name">ICombatUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Target <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    Target<span class="token punctuation">.</span>OnAfterDealDamage <span class="token operator">+=</span> Unit_OnAfterDealDamage<span class="token punctuation">;</span>    Target<span class="token punctuation">.</span>OnBeforeReceiveDamage <span class="token operator">+=</span> Unit_BeforeReceiveDamage<span class="token punctuation">;</span>    Target<span class="token punctuation">.</span>OnAfterReceiveDamage <span class="token operator">+=</span> Unit_OnAfterReceiveDamage<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">partial</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Unregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Target <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    Target<span class="token punctuation">.</span>OnAfterDealDamage <span class="token operator">-=</span> Unit_OnAfterDealDamage<span class="token punctuation">;</span>    Target<span class="token punctuation">.</span>OnBeforeReceiveDamage <span class="token operator">-=</span> Unit_BeforeReceiveDamage<span class="token punctuation">;</span>    Target<span class="token punctuation">.</span>OnAfterReceiveDamage <span class="token operator">-=</span> Unit_OnAfterReceiveDamage<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Unit_BeforeReceiveDamage</span><span class="token punctuation">(</span><span class="token class-name">DamageInfo</span> damageInfo<span class="token punctuation">,</span> <span class="token class-name">IHealthOwner</span> target<span class="token punctuation">,</span> <span class="token class-name">IDamageDealer</span> attacker<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> args <span class="token operator">=</span> EventArgs_Damage<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>attacker<span class="token punctuation">,</span> target<span class="token punctuation">,</span> damageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HandleEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>EEvent_Buff<span class="token punctuation">.</span>OnBeforeReceiveDamage<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    EventArgs_Damage<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Unit_OnAfterReceiveDamage</span><span class="token punctuation">(</span><span class="token class-name">DamageInfo</span> damageInfo<span class="token punctuation">,</span> <span class="token class-name">IHealthOwner</span> target<span class="token punctuation">,</span> <span class="token class-name">IDamageDealer</span> attacker<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> args <span class="token operator">=</span> EventArgs_Damage<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>attacker<span class="token punctuation">,</span> target<span class="token punctuation">,</span> damageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HandleEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>EEvent_Buff<span class="token punctuation">.</span>OnAfterReceiveDamage<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    EventArgs_Damage<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Unit_OnAfterDealDamage</span><span class="token punctuation">(</span><span class="token class-name">DamageInfo</span> damageInfo<span class="token punctuation">,</span> <span class="token class-name">IDamageDealer</span> attacker<span class="token punctuation">,</span> <span class="token class-name">IHealthOwner</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> args <span class="token operator">=</span> EventArgs_Damage<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>attacker<span class="token punctuation">,</span> target<span class="token punctuation">,</span> damageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HandleEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>EEvent_Buff<span class="token punctuation">.</span>OnBeforeDealDamage<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    EventArgs_Damage<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><h3 id="2-Action"><a href="#2-Action" class="headerlink" title="2.Action"></a>2.Action</h3><p>行动，buff执行逻辑的代理，非常类似行为树的Action节点。一般来讲，除非是非常简单的逻辑，否则都推荐调用各个模块里的方法来实现。</p><p>Action设计为瞬时调用，调用完，对象将会被释放掉。</p><p>所有的Action都是可以序列化配置的，将配置ActionConfig和运行时对象Action分开，使用多态序列化，可以直接在Inspector面板上编辑，非常方便。</p><p>Action可以嵌套Action，可以实现Condition，或者一些链式需求！</p><details><summary>Action_Random 参考</summary><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Saro<span class="token punctuation">.</span>Gameplay<span class="token punctuation">.</span>Ability</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Action_Random</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseAction</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">FloatValue</span> chance<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">BaseAction</span> onSuccess<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">BaseAction</span> onFailure<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">BaseActionSpec</span> <span class="token function">CreateSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> BaseActionSpec<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateSpec</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ActionSpec_Random<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ActionSpec_Random</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseActionSpec</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Action_Random</span> Cfg <span class="token operator">=></span> BaseCfg <span class="token keyword">as</span> <span class="token class-name">Action_Random</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> chance<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> m_ContextArgs<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">GameplayEventArgs</span> args<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> evtID<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> cfg <span class="token operator">=</span> Cfg<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> rnd <span class="token operator">=</span> UnityEngine<span class="token punctuation">.</span>Random<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rnd <span class="token operator">&lt;=</span> chance<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                AbilityEventHandler<span class="token punctuation">.</span><span class="token function">InvokeAction</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>onSuccess<span class="token punctuation">,</span> evtID<span class="token punctuation">,</span> args<span class="token punctuation">,</span> m_ContextArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                AbilityEventHandler<span class="token punctuation">.</span><span class="token function">InvokeAction</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>onFailure<span class="token punctuation">,</span> evtID<span class="token punctuation">,</span> args<span class="token punctuation">,</span> m_ContextArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            m_ContextArgs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ResolveArgs</span><span class="token punctuation">(</span><span class="token class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_ContextArgs <span class="token operator">=</span> args<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> cfg <span class="token operator">=</span> Cfg<span class="token punctuation">;</span>            cfg<span class="token punctuation">.</span>chance<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token keyword">ref</span> chance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></details><h3 id="3-Target"><a href="#3-Target" class="headerlink" title="3.Target"></a>3.Target</h3><p>目标选择器，用于筛选目标。Action等对象，需要目标，可以通过此对象进行筛选，可以自行扩展。例如Target_UseEventArgs，此筛选器可以通过EventArgs筛选目标。</p><details><summary>Target_UseEventArgs 参考</summary><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Saro<span class="token punctuation">.</span>Utility</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Saro<span class="token punctuation">.</span>Gameplay<span class="token punctuation">.</span>Ability</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Target_UseEventArgs</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseTarget</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">ITargetFilter</span> <span class="token function">CreateSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> spec <span class="token operator">=</span> SharedPool<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Rent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TargetSpec_UseEventArgs<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            spec<span class="token punctuation">.</span>Cfg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> spec<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// 使用 GameplayEventArgs 来筛选目标</span>    <span class="token comment">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetSpec_UseEventArgs</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseTargetSpec</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">BaseTarget</span> Cfg <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">ETargetType</span> TargetType <span class="token operator">=></span> Cfg<span class="token punctuation">.</span>targetType<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetTargets</span><span class="token punctuation">(</span><span class="token class-name">GameplayEventArgs</span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token keyword">is</span> <span class="token class-name">EventArgs_Damage</span> _damageArgs<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>TargetType<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>ETargetType<span class="token punctuation">.</span>Target<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>_damageArgs<span class="token punctuation">.</span>Target <span class="token keyword">is</span> <span class="token class-name">ICombatUnit</span> _combatUnit<span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        Targets<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>_combatUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>TargetType<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>ETargetType<span class="token punctuation">.</span>Caster<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>_damageArgs<span class="token punctuation">.</span>Attacker <span class="token keyword">is</span> <span class="token class-name">ICombatUnit</span> _combatUnit<span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token comment">// Target Caster 可能是相同 对象，需要处理下</span>                        Targets<span class="token punctuation">.</span><span class="token function">AddUnique</span><span class="token punctuation">(</span>_combatUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token keyword">is</span> <span class="token class-name">EventArgs_BuffGeneric</span> _buffGenericArgs<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>TargetType<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>ETargetType<span class="token punctuation">.</span>Target<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    Targets<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>_buffGenericArgs<span class="token punctuation">.</span>BuffSpec<span class="token punctuation">.</span>Target<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>TargetType<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>ETargetType<span class="token punctuation">.</span>Caster<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token comment">// Target Caster 可能是相同 对象，需要处理下</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>_buffGenericArgs<span class="token punctuation">.</span>BuffSpec<span class="token punctuation">.</span>Caster <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        Targets<span class="token punctuation">.</span><span class="token function">AddUnique</span><span class="token punctuation">(</span>_buffGenericArgs<span class="token punctuation">.</span>BuffSpec<span class="token punctuation">.</span>Caster<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token keyword">is</span> <span class="token class-name">EventArgs_BuffStack</span> _buffStackArgs<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">BuffSpec</span> buff <span class="token operator">=</span> <span class="token punctuation">(</span>BuffSpec<span class="token punctuation">)</span>_buffStackArgs<span class="token punctuation">.</span>Handle<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>buff <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>TargetType<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>ETargetType<span class="token punctuation">.</span>Caster<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token comment">// Target Caster 可能是相同 对象，需要处理下</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>buff<span class="token punctuation">.</span>Caster <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#123;</span>                            Targets<span class="token punctuation">.</span><span class="token function">AddUnique</span><span class="token punctuation">(</span>buff<span class="token punctuation">.</span>Caster<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>TargetType<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>ETargetType<span class="token punctuation">.</span>Target<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        Targets<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>buff<span class="token punctuation">.</span>Target<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token keyword">is</span> <span class="token class-name">EventArgs_AbilityGeneric</span> _abilityGenericArgs<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>TargetType<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>ETargetType<span class="token punctuation">.</span>Caster<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token comment">// Target Caster 可能是相同 对象，需要处理下</span>                    Targets<span class="token punctuation">.</span><span class="token function">AddUnique</span><span class="token punctuation">(</span>_abilityGenericArgs<span class="token punctuation">.</span>Ability<span class="token punctuation">.</span>Caster<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>TargetType<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>ETargetType<span class="token punctuation">.</span>Target<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Target is invalid for EventArgs_AbilityGeneric"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token keyword">is</span> <span class="token class-name">EventArgs_AbilityCanActivate</span> _abilityCanActivateArgs<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"unhandled event: EventArgs_AbilityCanActivate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></details><h2 id="Buff自身逻辑"><a href="#Buff自身逻辑" class="headerlink" title="Buff自身逻辑"></a>Buff自身逻辑</h2><h3 id="1-属性改变"><a href="#1-属性改变" class="headerlink" title="1.属性改变"></a>1.属性改变</h3><p>使用<a href="/2022/01/30/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/%E6%B8%B8%E6%88%8F%E6%80%A7%E5%B1%9E%E6%80%A7">GameplayAttribute</a>，游戏性属性。buff成员变量，包含一个MofifierConfig数组，可以通过表格来配置，buff生效时，会应用属性，销毁时，会移除应用的属性。</p><h3 id="2-状态改变"><a href="#2-状态改变" class="headerlink" title="2.状态改变"></a>2.状态改变</h3><p>使用<a href="/2022/01/09/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/%E6%B8%B8%E6%88%8F%E6%80%A7%E6%A0%87%E7%AD%BE">GameplayTag</a>，游戏性标记。buff生效时，都会给buffContainter添加一些配置的tag，通过这个tag，来判断状态，所有buff自己管理自己的tag就够了，buffContainer可以自己处理tag叠加问题，并且提供了tag数量变化的事件，其他模块可以很方便监听，实现tag的响应。</p><h3 id="3-堆叠和溢出"><a href="#3-堆叠和溢出" class="headerlink" title="3.堆叠和溢出"></a>3.堆叠和溢出</h3><p>buff堆叠，会抛出堆叠事件，通过自定义Action进行游戏逻辑处理。</p><p>堆叠时，属性改变也会被堆叠，层数减少时，属性改变也会相应减少。（TODO考虑新增一个参数，控制堆叠是否影响属性改变）</p><p>当buff堆叠超过最大堆叠数量限制时，会抛出溢出事件。</p><h3 id="4-buff的施加和驱散"><a href="#4-buff的施加和驱散" class="headerlink" title="4.buff的施加和驱散"></a>4.buff的施加和驱散</h3><p>也是使用<a href="/2022/01/09/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/%E6%B8%B8%E6%88%8F%E6%80%A7%E6%A0%87%E7%AD%BE">GameplayTag</a>，buff自身包含一系列tag。</p><ul><li>grantedTags，生效时，授予的tags</li><li>applicationTagRequirements，应用时，需要满足的tags</li><li>onGoingTagRequirements，生效期间，满足条件，才会走buff period事件，但不会影响应用属性、grantedTags等瞬时操作。</li></ul><!-- - removalTagRequirements- removeGameplayEffectsWithTags --><p>除了可以通过tag驱散，也可以直接通过buffID、buffHandle驱散，但一般推荐tag，tag可以代表一个系列buff的集合。</p><p>通过DestroyBuff(Buff buff, object destroyer)，传入destroyer，可以判定是自然结束，还是被其他人销毁</p><h3 id="5-buff时间策略"><a href="#5-buff时间策略" class="headerlink" title="5.buff时间策略"></a>5.buff时间策略</h3><h4 id="持续时间-duration"><a href="#持续时间-duration" class="headerlink" title="持续时间(duration)"></a>持续时间(duration)</h4><ul><li>应用buff时，是否刷新已存在buff的duration</li><li>每层结束后，是否刷新duration。不刷新，则清空所有层数，并移除buff；刷新，则减少一层，重新计时</li><li>每层结束或，刷新duration，且抛出事件，可以自定义层数事件，例如，让duration根据层数变化等。</li></ul><h4 id="buff生效周期-period"><a href="#buff生效周期-period" class="headerlink" title="buff生效周期(period)"></a>buff生效周期(period)</h4><ul><li>应用buff时，是否刷新period</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>逻辑数据，在Inspector直接配置多态数据，使用Odin插件，序列化为json，也可以考虑序列化成protobuf。</p><p>等级之类的数值数据，采用配置表配置。新增ValueSource类，处理是否使用表格数据。</p><details><summary>配置 参考</summary><img src="pic0.jpg" loading="lazy"><img src="pic1.jpg" loading="lazy"></details><h2 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h2><h3 id="1-数据驱动化配置"><a href="#1-数据驱动化配置" class="headerlink" title="1.数据驱动化配置"></a>1.数据驱动化配置</h3><ul><li>通过c#自定义可复用Action，数据驱动组合，已经可以在编辑器面板，制作很多buff了</li></ul><h3 id="2-脚本化buff-IScriptRunner"><a href="#2-脚本化buff-IScriptRunner" class="headerlink" title="2.脚本化buff(IScriptRunner)"></a>2.脚本化buff(IScriptRunner)</h3><p>针对特化buff，提供一下支持</p><ul><li>支持c#字符串和委托绑定，继承ICSharpScript</li><li>lua支持</li></ul><details><summary>lua支持 参考</summary><pre class="language-lua" data-language="lua"><code class="language-lua"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"AbilityInterface"</span><span class="token punctuation">)</span><span class="token keyword">local</span> buff1001 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">-- 重写哪些事件</span><span class="token keyword">function</span> buff1001<span class="token punctuation">:</span><span class="token function">DeclareFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> funcs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">-- OnBuffCreated</span>        <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">-- OnBuffPeriod</span>        <span class="token number">27</span> <span class="token comment">-- OnAfterReceiveDamage</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> funcs<span class="token keyword">end</span><span class="token keyword">function</span> buff1001<span class="token punctuation">:</span><span class="token function">OnBuffCreated</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token comment">-- 读取buff数据表的用户数据</span>    <span class="token keyword">local</span> buffDataArgs <span class="token operator">=</span> args<span class="token punctuation">.</span>buff<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>Args    <span class="token keyword">local</span> arg0 <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>buffDataArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> arg1 <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>buffDataArgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> arg2 <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>buffDataArgs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> attributeSet <span class="token operator">=</span> args<span class="token punctuation">.</span>buff<span class="token punctuation">.</span>Target<span class="token punctuation">.</span>AttributeSet    attributeSet<span class="token punctuation">:</span><span class="token function">ApplyModifier</span><span class="token punctuation">(</span>arg0<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> args<span class="token punctuation">.</span>buff<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">function</span> buff1001<span class="token punctuation">:</span><span class="token function">OnBuffPeriod</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"buff1001 OnBuffPeriod. args: ["</span> <span class="token operator">..</span> args<span class="token punctuation">:</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">..</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">function</span> buff1001<span class="token punctuation">:</span><span class="token function">OnAfterReceiveDamage</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">if</span> args<span class="token punctuation">.</span>damageInfo<span class="token punctuation">.</span>damageTag<span class="token punctuation">:</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>EDamageTag<span class="token punctuation">.</span>NoReflect<span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token keyword">return</span>    <span class="token keyword">end</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>attacker <span class="token operator">==</span> <span class="token keyword">nil</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token keyword">return</span>    <span class="token keyword">end</span>    <span class="token comment">-- 造成2.2倍反击伤害</span>    <span class="token keyword">local</span> finalDamage <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>damageInfo<span class="token punctuation">.</span>amount <span class="token operator">*</span> <span class="token number">2.2</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> damageInfo <span class="token operator">=</span> DamageInfo<span class="token punctuation">:</span><span class="token function">Create</span><span class="token punctuation">(</span>EDamageType<span class="token punctuation">.</span>Magical<span class="token punctuation">,</span> finalDamage<span class="token punctuation">,</span> EDamageTag<span class="token punctuation">.</span>NoReflect<span class="token punctuation">)</span>    DamageHelper<span class="token punctuation">:</span><span class="token function">ApplyDamage</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>target<span class="token punctuation">,</span> args<span class="token punctuation">.</span>attacker<span class="token punctuation">,</span> damageInfo<span class="token punctuation">)</span>    DamageInfo<span class="token punctuation">:</span><span class="token function">Release</span><span class="token punctuation">(</span>damageInfo<span class="token punctuation">)</span>    <span class="token comment">-- 眩晕攻击者</span>    args<span class="token punctuation">.</span>attacker<span class="token punctuation">.</span>BuffContainer<span class="token punctuation">:</span><span class="token function">ApplyBuff</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">return</span> buff1001</code></pre></details><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul><li>如何设计游戏事件，提高buff系统的健壮性、扩展性</li><li>如何嵌入ecs系统？或者改成ecs的实现？</li></ul><!--### 实现样板- dot效果。燃烧，每秒掉xx血。- 受到攻击后，触发事件。反击螺旋、人马皮。- 宙斯c。弹道弹射，伤害递减。- 辉耀。一定范围，每x秒aoe伤害、攻击miss。- 死骑被动，一定时间攻击三次目标，目标会受到额外伤害，沉默和减速。--><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.valvesoftware.com/wiki/Dota_2_Workshop_Tools:zh-cn/Scripting:zh-cn/Abilities_Data_Driven:zh-cn">Dota2数据驱动技能</a></li><li><a href="https://bbs.gameres.com/forum.php?mod=viewthread&tid=215027">Buff机制及其实际运用</a></li><li><a href="https://github.com/tranek/GASDocumentation">UE4 GAS</a></li><li><a href="https://zhuanlan.zhihu.com/p/150812545">如何实现一个强大的MMO技能系统——BUFF</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gameplay </tag>
            
            <tag> ability </tag>
            
            <tag> buff </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo!</title>
      <link href="/2021/03/21/hello-hexo!/"/>
      <url>/2021/03/21/hello-hexo!/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>$ hexo new post -p <span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo s$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo g$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo d$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="Markdown-test"><a href="#Markdown-test" class="headerlink" title="Markdown test"></a>Markdown test</h2><h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><ul><li>支持“标准”Markdown / CommonMark和Github风格的语法，也可变身为代码编辑器；</li><li>支持实时预览、图片（跨域）上传、预格式文本/代码/表格插入、代码折叠、搜索替换、只读模式、自定义样式主题和多语言语法高亮等功能；</li><li>支持ToC（Table of Contents）、Emoji表情、Task lists、@链接等Markdown扩展语法；</li><li>支持TeX科学公式（基于KaTeX）、流程图 Flowchart 和 时序图 Sequence Diagram;</li><li>支持识别和解析HTML标签，并且支持自定义过滤标签解析，具有可靠的安全性和几乎无限的扩展性；</li><li>支持 AMD / CMD 模块化加载（支持 Require.js &amp; Sea.js），并且支持自定义扩展插件；</li><li>兼容主流的浏览器（IE8+）和Zepto.js，且支持iPad等平板设备；</li><li>支持自定义主题样式；</li></ul><h1 id="Editor-md"><a href="#Editor-md" class="headerlink" title="Editor.md"></a>Editor.md</h1><p><img src="https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png" loading="lazy"></p><p><img src="https://img.shields.io/github/stars/pandao/editor.md.svg" loading="lazy"> <img src="https://img.shields.io/github/forks/pandao/editor.md.svg" loading="lazy"> <img src="https://img.shields.io/github/tag/pandao/editor.md.svg" loading="lazy"> <img src="https://img.shields.io/github/release/pandao/editor.md.svg" loading="lazy"> <img src="https://img.shields.io/github/issues/pandao/editor.md.svg" loading="lazy"> <img src="https://img.shields.io/bower/v/editor.md.svg" loading="lazy"></p><p><strong>目录 (Table of Contents)</strong></p><ul><li><a href="#editormd">Editor.md</a></li><li><a href="#heading-1">Heading 1</a><ul><li><a href="#heading-2">Heading 2</a><ul><li><a href="#heading-3">Heading 3</a><ul><li><a href="#heading-4">Heading 4</a><ul><li><a href="#heading-5">Heading 5</a><ul><li><a href="#heading-6">Heading 6</a></li></ul></li></ul></li></ul></li></ul></li></ul></li><li><a href="#heading-1-link-heading-link">Heading 1 link Heading link</a><ul><li><a href="#heading-2-link-heading-link">Heading 2 link Heading link</a><ul><li><a href="#heading-3-link-heading-link">Heading 3 link Heading link</a><ul><li><a href="#heading-4-link-heading-link-heading-link-heading-link">Heading 4 link Heading link Heading link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></a><ul><li><a href="#heading-5-link-heading-link">Heading 5 link Heading link</a><ul><li><a href="#heading-6-link-heading-link">Heading 6 link Heading link</a></li></ul></li></ul></li><li><a href="#%E6%A0%87%E9%A2%98%E7%94%A8%E5%BA%95%E7%BA%BF%E7%9A%84%E5%BD%A2%E5%BC%8Fheading-underline">标题（用底线的形式）Heading (underline)</a></li></ul></li></ul></li></ul></li><li><a href="#this-is-an-h1">This is an H1</a><ul><li><a href="#this-is-an-h2">This is an H2</a><ul><li><a href="#%E5%AD%97%E7%AC%A6%E6%95%88%E6%9E%9C%E5%92%8C%E6%A8%AA%E7%BA%BF%E7%AD%89">字符效果和横线等</a></li><li><a href="#%E5%BC%95%E7%94%A8-blockquotes">引用 Blockquotes</a></li><li><a href="#%E9%94%9A%E7%82%B9%E4%B8%8E%E9%93%BE%E6%8E%A5-links">锚点与链接 Links</a></li><li><a href="#%E5%A4%9A%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE-codes">多语言代码高亮 Codes</a><ul><li><a href="#%E8%A1%8C%E5%86%85%E4%BB%A3%E7%A0%81-inline-code">行内代码 Inline code</a></li><li><a href="#%E7%BC%A9%E8%BF%9B%E9%A3%8E%E6%A0%BC">缩进风格</a></li><li><a href="#%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE">代码高亮</a></li></ul></li><li><a href="#%E5%9B%BE%E7%89%87-images">图片 Images</a></li><li><a href="#%E5%88%97%E8%A1%A8-lists">列表 Lists</a><ul><li><a href="#%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8%E5%87%8F%E5%8F%B7unordered-lists--">无序列表（减号）Unordered Lists (-)</a></li><li><a href="#%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8%E6%98%9F%E5%8F%B7unordered-lists-">无序列表（星号）Unordered Lists (*)</a></li><li><a href="#%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8%E5%8A%A0%E5%8F%B7%E5%92%8C%E5%B5%8C%E5%A5%97unordered-lists-">无序列表（加号和嵌套）Unordered Lists (+)</a></li><li><a href="#%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8-ordered-lists--">有序列表 Ordered Lists (-)</a></li><li><a href="#gfm-task-list">GFM task list</a></li></ul></li><li><a href="#%E7%BB%98%E5%88%B6%E8%A1%A8%E6%A0%BC-tables">绘制表格 Tables</a><ul><li><a href="#%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7-html-entities-codes">特殊符号 HTML Entities Codes</a></li></ul></li><li><a href="#emoji%E8%A1%A8%E6%83%85-smiley">Emoji表情 :smiley:</a><ul><li><a href="#gfm-task-lists--emoji--fontawesome-icon-emoji--editormd-logo-emoji-editormd-logo-5x">GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</a></li><li><a href="#%E5%8F%8D%E6%96%9C%E6%9D%A0-escape">反斜杠 Escape</a></li></ul></li><li><a href="#%E7%A7%91%E5%AD%A6%E5%85%AC%E5%BC%8F-texkatex">科学公式 TeX(KaTeX)</a></li><li><a href="#%E7%BB%98%E5%88%B6%E7%B1%BB%E5%9B%BE-class-diagram">绘制类图 Class Diagram</a></li><li><a href="#%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE-flowchart">绘制流程图 Flowchart</a></li><li><a href="#%E7%BB%98%E5%88%B6%E5%BA%8F%E5%88%97%E5%9B%BE-sequence-diagram">绘制序列图 Sequence Diagram</a></li><li><a href="#end">End</a></li></ul></li><li><a href="#httpspandaogithubioeditormd">https://pandao.github.io/editor.md/</a></li></ul></li></ul><h1 id="Heading-1"><a href="#Heading-1" class="headerlink" title="Heading 1"></a>Heading 1</h1><h2 id="Heading-2"><a href="#Heading-2" class="headerlink" title="Heading 2"></a>Heading 2</h2><h3 id="Heading-3"><a href="#Heading-3" class="headerlink" title="Heading 3"></a>Heading 3</h3><h4 id="Heading-4"><a href="#Heading-4" class="headerlink" title="Heading 4"></a>Heading 4</h4><h5 id="Heading-5"><a href="#Heading-5" class="headerlink" title="Heading 5"></a>Heading 5</h5><h6 id="Heading-6"><a href="#Heading-6" class="headerlink" title="Heading 6"></a>Heading 6</h6><h1 id="Heading-1-link-Heading-link"><a href="#Heading-1-link-Heading-link" class="headerlink" title="Heading 1 link Heading link"></a>Heading 1 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h1><h2 id="Heading-2-link-Heading-link"><a href="#Heading-2-link-Heading-link" class="headerlink" title="Heading 2 link Heading link"></a>Heading 2 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h2><h3 id="Heading-3-link-Heading-link"><a href="#Heading-3-link-Heading-link" class="headerlink" title="Heading 3 link Heading link"></a>Heading 3 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h3><h4 id="Heading-4-link-Heading-link-Heading-link-Heading-link"><a href="#Heading-4-link-Heading-link-Heading-link-Heading-link" class="headerlink" title="Heading 4 link Heading link Heading link Heading link"></a>Heading 4 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a> Heading link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h4><h5 id="Heading-5-link-Heading-link"><a href="#Heading-5-link-Heading-link" class="headerlink" title="Heading 5 link Heading link"></a>Heading 5 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h5><h6 id="Heading-6-link-Heading-link"><a href="#Heading-6-link-Heading-link" class="headerlink" title="Heading 6 link Heading link"></a>Heading 6 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h6><h4 id="标题（用底线的形式）Heading-underline"><a href="#标题（用底线的形式）Heading-underline" class="headerlink" title="标题（用底线的形式）Heading (underline)"></a>标题（用底线的形式）Heading (underline)</h4><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h3 id="字符效果和横线等"><a href="#字符效果和横线等" class="headerlink" title="字符效果和横线等"></a>字符效果和横线等</h3><hr><p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><em><strong>粗斜体</strong></em> <em><strong>粗斜体</strong></em></p><p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p><p><strong>缩写(同HTML的abbr标签)</strong></p><blockquote><p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p></blockquote><p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p><h3 id="引用-Blockquotes"><a href="#引用-Blockquotes" class="headerlink" title="引用 Blockquotes"></a>引用 Blockquotes</h3><blockquote><p>引用文本 Blockquotes</p></blockquote><p>引用的行内混合 Blockquotes</p><blockquote><p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href="http://localhost/">普通链接</a>。</p></blockquote><h3 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h3><p><a href="http://localhost/">普通链接</a></p><p><a href="http://localhost/" title="普通链接带标题">普通链接带标题</a></p><p>直接链接：<a href="https://github.com/">https://github.com</a></p><p><a href="http://www.this-anchor-link.com/">锚点链接</a></p><p>GFM a-tail link @pandao</p><blockquote><p>@pandao</p></blockquote><h3 id="多语言代码高亮-Codes"><a href="#多语言代码高亮-Codes" class="headerlink" title="多语言代码高亮 Codes"></a>多语言代码高亮 Codes</h3><h4 id="行内代码-Inline-code"><a href="#行内代码-Inline-code" class="headerlink" title="行内代码 Inline code"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p><h4 id="缩进风格"><a href="#缩进风格" class="headerlink" title="缩进风格"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似<code>&lt;pre&gt;</code>预格式化文本(Preformatted Text)的功能。</p><pre><code>&lt;?php    echo &quot;Hello world!&quot;;?&gt;</code></pre><p>预格式化文本：</p><pre><code>| First Header | Second Header || ------------ | ------------- || Content Cell | Content Cell  || Content Cell | Content Cell  |</code></pre><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello Hexo!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello Hexo!\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="图片-Images"><a href="#图片-Images" class="headerlink" title="图片 Images"></a>图片 Images</h3><p>Image:</p><p><img src="https://pandao.github.io/editor.md/examples/images/4.jpg" loading="lazy"></p><blockquote><p>Follow your heart.</p></blockquote><p><img src="https://pandao.github.io/editor.md/examples/images/8.jpg" loading="lazy"></p><blockquote><p>图为：厦门白城沙滩</p></blockquote><p>图片加链接 (Image + Link)：</p><p><a href="https://pandao.github.io/editor.md/examples/images/7.jpg" title="李健首张专辑《似水流年》封面"><img src="https://pandao.github.io/editor.md/examples/images/7.jpg" loading="lazy"></a></p><blockquote><p>图为：李健首张专辑《似水流年》封面</p></blockquote><hr><h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="无序列表（减号）Unordered-Lists"><a href="#无序列表（减号）Unordered-Lists" class="headerlink" title="无序列表（减号）Unordered Lists (-)"></a>无序列表（减号）Unordered Lists (-)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（星号）Unordered-Lists"><a href="#无序列表（星号）Unordered-Lists" class="headerlink" title="无序列表（星号）Unordered Lists (*)"></a>无序列表（星号）Unordered Lists (*)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（加号和嵌套）Unordered-Lists"><a href="#无序列表（加号和嵌套）Unordered-Lists" class="headerlink" title="无序列表（加号和嵌套）Unordered Lists (+)"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul><li>列表一</li><li>列表二<ul><li>列表二-1</li><li>列表二-2</li><li>列表二-3</li></ul></li><li>列表三<ul><li>列表一</li><li>列表二</li><li>列表三</li></ul></li></ul><h4 id="有序列表-Ordered-Lists"><a href="#有序列表-Ordered-Lists" class="headerlink" title="有序列表 Ordered Lists (-)"></a>有序列表 Ordered Lists (-)</h4><ol><li>第一行</li><li>第二行</li><li>第三行</li></ol><h4 id="GFM-task-list"><a href="#GFM-task-list" class="headerlink" title="GFM task list"></a>GFM task list</h4><ul><li><input checked="" disabled="" type="checkbox"> GFM task list 1</li><li><input checked="" disabled="" type="checkbox"> GFM task list 2</li><li><input disabled="" type="checkbox"> GFM task list 3<ul><li><input disabled="" type="checkbox"> GFM task list 3-1</li><li><input disabled="" type="checkbox"> GFM task list 3-2</li><li><input disabled="" type="checkbox"> GFM task list 3-3</li></ul></li><li><input disabled="" type="checkbox"> GFM task list 4<ul><li><input disabled="" type="checkbox"> GFM task list 4-1</li><li><input disabled="" type="checkbox"> GFM task list 4-2</li></ul></li></ul><hr><h3 id="绘制表格-Tables"><a href="#绘制表格-Tables" class="headerlink" title="绘制表格 Tables"></a>绘制表格 Tables</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>Function name</th><th>Description</th></tr></thead><tbody><tr><td><code>help()</code></td><td>Display the help window.</td></tr><tr><td><code>destroy()</code></td><td><strong>Destroy your computer!</strong></td></tr></tbody></table><table><thead><tr><th align="left">Left-Aligned</th><th align="center">Center Aligned</th><th align="right">Right Aligned</th></tr></thead><tbody><tr><td align="left">col 3 is</td><td align="center">some wordy text</td><td align="right">$1600</td></tr><tr><td align="left">col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td align="left">zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><table><thead><tr><th>Item</th><th align="right">Value</th></tr></thead><tbody><tr><td>Computer</td><td align="right">$1600</td></tr><tr><td>Phone</td><td align="right">$12</td></tr><tr><td>Pipe</td><td align="right">$1</td></tr></tbody></table><hr><h4 id="特殊符号-HTML-Entities-Codes"><a href="#特殊符号-HTML-Entities-Codes" class="headerlink" title="特殊符号 HTML Entities Codes"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;</p><p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p><p>18&ordm;C  &quot;  &apos;</p><h3 id="Emoji表情-smiley"><a href="#Emoji表情-smiley" class="headerlink" title="Emoji表情 :smiley:"></a>Emoji表情 :smiley:</h3><blockquote><p>Blockquotes :star:</p></blockquote><h4 id="GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x"><a href="#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x" class="headerlink" title="GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul><li><input checked="" disabled="" type="checkbox"> :smiley: @mentions, :smiley: #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li><li><input checked="" disabled="" type="checkbox"> list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li><li><input checked="" disabled="" type="checkbox"> [ ] :smiley: this is a complete item :smiley:;</li><li><input disabled="" type="checkbox"> []this is an incomplete item <a href="#">test link</a> :fa-star: @pandao;</li><li><input disabled="" type="checkbox"> [ ]this is an incomplete item :fa-star: :fa-gear:;<ul><li><input disabled="" type="checkbox"> :smiley: this is an incomplete item <a href="#">test link</a> :fa-star: :fa-gear:;</li><li><input disabled="" type="checkbox"> :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href="#">test link</a>;</li></ul></li></ul><h4 id="反斜杠-Escape"><a href="#反斜杠-Escape" class="headerlink" title="反斜杠 Escape"></a>反斜杠 Escape</h4><p>*literal asterisks*</p><h3 id="科学公式-TeX-KaTeX"><a href="#科学公式-TeX-KaTeX" class="headerlink" title="科学公式 TeX(KaTeX)"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p><p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p><p>$$(\sqrt{3x-1}+(1+x)^2)$$</p><p>$$\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i + \cos(f))$$</p><p>多行公式：</p><div>$$\displaystyle\left( \sum\_{k=1}^n a\_k b\_k \right)^2\leq\left( \sum\_{k=1}^n a\_k^2 \right)\left( \sum\_{k=1}^n b\_k^2 \right)$$</div><div>$$\displaystyle    \frac{1}{        \Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{        \frac25 \pi}} = 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {        1+\frac{e^{-6\pi}}        {1+\frac{e^{-8\pi}}         {1+\cdots} }        }    }$$</div><div>$$f(x) = \int_{-\infty}^\infty    \hat f(\xi)\,e^{2 \pi i \xi x}    \,d\xi$$</div><h3 id="绘制类图-Class-Diagram"><a href="#绘制类图-Class-Diagram" class="headerlink" title="绘制类图 Class Diagram"></a>绘制类图 Class Diagram</h3><div class="mermaid">classDiagramClass01 <|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --> C2 : Where am i?Class09 --* C3Class09 --|> Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 <--> C2: Cool label</div><h3 id="绘制流程图-Flowchart"><a href="#绘制流程图-Flowchart" class="headerlink" title="绘制流程图 Flowchart"></a>绘制流程图 Flowchart</h3><div class="mermaid">graph TD;    A-->B;    A-->C;    B-->D;    C-->D;</div><h3 id="绘制序列图-Sequence-Diagram"><a href="#绘制序列图-Sequence-Diagram" class="headerlink" title="绘制序列图 Sequence Diagram"></a>绘制序列图 Sequence Diagram</h3><div class="mermaid">sequenceDiagramAndrew->China: Says HelloNote right of China: China thinks\nabout itChina-->Andrew: How are you?Andrew->>China: I am good thanks!</div><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><h2 id="https-pandao-github-io-editor-md"><a href="#https-pandao-github-io-editor-md" class="headerlink" title="https://pandao.github.io/editor.md/"></a><a href="https://pandao.github.io/editor.md/">https://pandao.github.io/editor.md/</a></h2>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>minheap</title>
      <link href="/2021/03/13/unity/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/minheap/"/>
      <url>/2021/03/13/unity/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/minheap/</url>
      
        <content type="html"><![CDATA[<p>TODO</p>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Moon Game Framework(一)</title>
      <link href="/2021/03/09/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF1%E6%A1%86%E6%9E%B6%E5%90%AF%E5%8A%A8/"/>
      <url>/2021/03/09/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/MGF1%E6%A1%86%E6%9E%B6%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>Async all，一切基于异步。</p><h2 id="始于Main"><a href="#始于Main" class="headerlink" title="始于Main"></a>始于Main</h2><p>Main脚本继承Monobehaviour，设计为单例，是程序入口。提供如下功能：</p><ul><li>Mono事件回调。Awake、Update、LateUpdate、FixedUdpate、OnGUI等等Monobehaviour事件。</li><li>协程管理。统一管理协程，支持一个key多个协程。</li></ul><p>本框架绝大多数的类都不继承Mono脚本，但不反对继承Mono脚本。</p><h2 id="起于IStartup"><a href="#起于IStartup" class="headerlink" title="起于IStartup"></a>起于IStartup</h2><p>通过IStartup，将框架层与游戏逻辑层解耦。</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// 框架入口，挂在初始游戏场景上</span><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoSingleton<span class="token punctuation">&lt;</span>Main<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token keyword">static</span> <span class="token class-name">ThreadSynchronizationContext</span> s_ThreadSynchronizationContext        <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">IServiceLocator</span> m_Locator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DefaultServiceLocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DontDestroyOnLoad</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        SynchronizationContext<span class="token punctuation">.</span><span class="token function">SetSynchronizationContext</span><span class="token punctuation">(</span>s_ThreadSynchronizationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> startup <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IStartup<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">await</span> startup<span class="token punctuation">.</span><span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">INFO</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$"&lt;color=green>MGF initialized.&lt;/color>"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Log<span class="token punctuation">.</span><span class="token function">ERROR</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// 自定义启动脚本</span><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">GameAppStart</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IStartup</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">UniTask</span> <span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 1. 组件注册</span>        <span class="token comment">// profiler显示组件</span>        Main<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Saro<span class="token punctuation">.</span>Profiler<span class="token punctuation">.</span>ProfilerDisplay<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 事件组件</span>        FGame<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>EventComponent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 资源组件</span>        FGame<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>XAssetComponent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 音效组件</span>        <span class="token keyword">await</span> FGame<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SoundComponent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InitializeAsync</span><span class="token punctuation">(</span>FGame<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>XAssetComponent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Assets/Res/Audios/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// UI组件</span>        <span class="token keyword">await</span> FGame<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UIComponent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InitializeAsync</span><span class="token punctuation">(</span>FGame<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>XAssetComponent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Assets/Res/Prefab/UI/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. 启动游戏逻辑</span>        <span class="token comment">// 打开游戏主UI</span>        <span class="token keyword">await</span> UIComponent<span class="token punctuation">.</span>Current<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">OpenUIAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UIStartPanel<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> gamedev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dnf资源导入工作流</title>
      <link href="/2021/03/03/unity/%E5%85%B6%E4%BB%96/Dnf%E8%A7%A3%E5%8C%85%E8%B5%84%E6%BA%90%E5%AF%BC%E5%85%A5%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
      <url>/2021/03/03/unity/%E5%85%B6%E4%BB%96/Dnf%E8%A7%A3%E5%8C%85%E8%B5%84%E6%BA%90%E5%AF%BC%E5%85%A5%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>下载工具 <a href="https://github.com/Sarofc/ExtractorSharp%E3%80%82">https://github.com/Sarofc/ExtractorSharp。</a></li><li>使用工具 下载图包、音效。</li></ul><h2 id="导入思路"><a href="#导入思路" class="headerlink" title="导入思路"></a>导入思路</h2><ul><li>2d游戏一般都会打atlas，atlas里有每个图片的rect信息，导出工具可以将此信息导出。</li><li>unity的sprite importer支持代码处理sprite，可以直接设置spritePivot，使用导出的offset信息，可以直接批量处理所有图片。</li><li>使用代码生成Animation Clip。</li><li>使用代码生成Animator Controller。</li></ul><details><summary>修改 SpritePivot 参考</summary><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEditor</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Newtonsoft<span class="token punctuation">.</span>Json</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Rpg<span class="token punctuation">.</span>Importer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DNFSpriteImporter</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ApplyTextures</span><span class="token punctuation">(</span><span class="token class-name">Texture<span class="token punctuation">[</span><span class="token punctuation">]</span></span> textures<span class="token punctuation">,</span> <span class="token class-name">OffsetData<span class="token punctuation">[</span><span class="token punctuation">]</span></span> offsetDatas<span class="token punctuation">,</span> <span class="token class-name">TextureImporterSettings</span> textureSettings<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> useOffsetInfo<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>textures<span class="token punctuation">.</span>Length <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> offsetDatas<span class="token punctuation">.</span>Length <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> offsetDatas<span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> textures<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"offset is not equal! textures : </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">textures<span class="token punctuation">.</span>Length</span><span class="token punctuation">&#125;</span></span><span class="token string"> , offsetDatas : </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">offsetDatas<span class="token punctuation">.</span>Length</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                AssetDatabase<span class="token punctuation">.</span><span class="token function">StartAssetEditing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> textures<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token class-name"><span class="token keyword">var</span></span> path <span class="token operator">=</span> AssetDatabase<span class="token punctuation">.</span><span class="token function">GetAssetPath</span><span class="token punctuation">(</span>textures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name"><span class="token keyword">var</span></span> texture <span class="token operator">=</span> textures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    EditorUtility<span class="token punctuation">.</span><span class="token function">DisplayProgressBar</span><span class="token punctuation">(</span><span class="token string">"import img"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>i <span class="token operator">/</span> textures<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">TextureImporter</span> import <span class="token operator">=</span> AssetImporter<span class="token punctuation">.</span><span class="token function">GetAtPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">TextureImporter</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>textureSettings <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        textureSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextureImporterSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    import<span class="token punctuation">.</span><span class="token function">ReadTextureSettings</span><span class="token punctuation">(</span>textureSettings<span class="token punctuation">)</span><span class="token punctuation">;</span>                    textureSettings<span class="token punctuation">.</span>textureType <span class="token operator">=</span> TextureImporterType<span class="token punctuation">.</span>Sprite<span class="token punctuation">;</span>                    textureSettings<span class="token punctuation">.</span>npotScale <span class="token operator">=</span> TextureImporterNPOTScale<span class="token punctuation">.</span>None<span class="token punctuation">;</span>                    textureSettings<span class="token punctuation">.</span>sRGBTexture <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    textureSettings<span class="token punctuation">.</span>spritePixelsPerUnit <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>                    textureSettings<span class="token punctuation">.</span>alphaSource <span class="token operator">=</span> TextureImporterAlphaSource<span class="token punctuation">.</span>FromInput<span class="token punctuation">;</span>                    textureSettings<span class="token punctuation">.</span>spriteMode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>SpriteImportMode<span class="token punctuation">.</span>Single<span class="token punctuation">;</span>                    textureSettings<span class="token punctuation">.</span>spriteMeshType <span class="token operator">=</span> SpriteMeshType<span class="token punctuation">.</span>FullRect<span class="token punctuation">;</span>                    textureSettings<span class="token punctuation">.</span>mipmapEnabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    textureSettings<span class="token punctuation">.</span>wrapMode <span class="token operator">=</span> TextureWrapMode<span class="token punctuation">.</span>Repeat<span class="token punctuation">;</span>                    textureSettings<span class="token punctuation">.</span>filterMode <span class="token operator">=</span> FilterMode<span class="token punctuation">.</span>Point<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>useOffsetInfo<span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        textureSettings<span class="token punctuation">.</span>spriteAlignment <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>SpriteAlignment<span class="token punctuation">.</span>Custom<span class="token punctuation">;</span>                        textureSettings<span class="token punctuation">.</span>spritePivot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span>                            <span class="token number">0.5f</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>offsetDatas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>OffsetX <span class="token operator">+</span> texture<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> texture<span class="token punctuation">.</span>width<span class="token punctuation">,</span>                            <span class="token number">0.5f</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>offsetDatas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>OffsetY <span class="token operator">+</span> texture<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> texture<span class="token punctuation">.</span>height                        <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">&#123;</span>                        textureSettings<span class="token punctuation">.</span>spriteAlignment <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>SpriteAlignment<span class="token punctuation">.</span>Center<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    import<span class="token punctuation">.</span><span class="token function">SetTextureSettings</span><span class="token punctuation">(</span>textureSettings<span class="token punctuation">)</span><span class="token punctuation">;</span>                    AssetDatabase<span class="token punctuation">.</span><span class="token function">ImportAsset</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                AssetDatabase<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">finally</span>            <span class="token punctuation">&#123;</span>                AssetDatabase<span class="token punctuation">.</span><span class="token function">StopAssetEditing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                EditorUtility<span class="token punctuation">.</span><span class="token function">ClearProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatDNFSpriteImporterWindow</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EditorWindow</span></span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"DNF/Bat_DNFSpriterImporter"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> window <span class="token operator">=</span> EditorWindow<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetWindow</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BatDNFSpriteImporterWindow<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            window<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> useOffsetInfo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> paths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Vector2</span> m_ScrollPos<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            EditorGUILayout<span class="token punctuation">.</span><span class="token function">HelpBox</span><span class="token punctuation">(</span><span class="token string">"1. Drag folder(s) which contains sprites and info.json to the paths label.\n2. Click process button."</span><span class="token punctuation">,</span> MessageType<span class="token punctuation">.</span>Info<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> dragArea <span class="token operator">=</span> GUILayoutUtility<span class="token punctuation">.</span><span class="token function">GetRect</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">,</span> <span class="token number">35f</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">ExpandWidth</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            EditorGUI<span class="token punctuation">.</span><span class="token function">LabelField</span><span class="token punctuation">(</span>dragArea<span class="token punctuation">,</span> <span class="token string">"Paths : drag folder(s) here."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_ScrollPos <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginScrollView</span><span class="token punctuation">(</span>m_ScrollPos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paths<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                EditorGUILayout<span class="token punctuation">.</span><span class="token function">LabelField</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">. "</span></span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">TextField</span><span class="token punctuation">(</span>paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndScrollView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Event<span class="token punctuation">.</span>current<span class="token punctuation">.</span>type <span class="token operator">==</span> EventType<span class="token punctuation">.</span>DragUpdated <span class="token operator">&amp;&amp;</span> dragArea<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>Event<span class="token punctuation">.</span>current<span class="token punctuation">.</span>mousePosition<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                DragAndDrop<span class="token punctuation">.</span>visualMode <span class="token operator">=</span> DragAndDropVisualMode<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Event<span class="token punctuation">.</span>current<span class="token punctuation">.</span>type <span class="token operator">==</span> EventType<span class="token punctuation">.</span>DragExited <span class="token operator">&amp;&amp;</span> dragArea<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>Event<span class="token punctuation">.</span>current<span class="token punctuation">.</span>mousePosition<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">var</span></span> dragPaths <span class="token operator">=</span> DragAndDrop<span class="token punctuation">.</span>paths<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DragAndDrop<span class="token punctuation">.</span>paths <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> dragPaths<span class="token punctuation">.</span>Length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dragPaths<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>paths<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>dragPaths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            paths<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>dragPaths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Clear all paths"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                paths<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            useOffsetInfo <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token string">"使用info文件"</span><span class="token punctuation">,</span> useOffsetInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            EditorGUILayout<span class="token punctuation">.</span><span class="token function">Space</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Process"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">List<span class="token punctuation">&lt;</span>Texture<span class="token punctuation">></span></span> texArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Texture<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">TextureImporterSettings</span> settings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextureImporterSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paths<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    texArray<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name"><span class="token keyword">var</span></span> texDirs <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"*.png"</span><span class="token punctuation">,</span> SearchOption<span class="token punctuation">.</span>AllDirectories<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name"><span class="token keyword">var</span></span> strDirs <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"*.json"</span><span class="token punctuation">,</span> SearchOption<span class="token punctuation">.</span>AllDirectories<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"texDirs length : "</span> <span class="token operator">+</span> texDirs<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token string">" , strDirs length : "</span> <span class="token operator">+</span> strDirs<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> texDirs<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        texArray<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>AssetDatabase<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">LoadAssetAtPath</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Texture<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>texDirs<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    texArray<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name"><span class="token keyword">var</span></span> offsets <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>OffsetData<span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>AssetDatabase<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">LoadAssetAtPath</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TextAsset<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>strDirs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// Debug.Log($"textures : &#123;texArray.Count&#125; , offsetDatas : &#123;offsets.Count&#125;");</span>                    <span class="token comment">// for (int k = 0; k &lt; texArray.Count; k++)</span>                    <span class="token comment">// &#123;</span>                    <span class="token comment">//     var sprite = AssetDatabase.LoadAssetAtPath&lt;Sprite>(AssetDatabase.GetAssetPath(texArray[k]));</span>                    <span class="token comment">//     Debug.Log(</span>                    <span class="token comment">//         $"[id : &#123;texArray[k].name&#125;] \t [offset : (&#123;offsets[i].x&#125; , &#123;offsets[i].y&#125;)] \t " +</span>                    <span class="token comment">//             $"[pivot : (&#123; 0.5f - (float)(offsets[i].OffsetX + sprite.rect.width / 2) / sprite.rect.width&#125; , " +</span>                    <span class="token comment">//             $"&#123; 0.5f + (float)(offsets[i].OffsetY + sprite.rect.height / 2) / sprite.rect.height&#125;)]");</span>                    <span class="token comment">// &#125;</span>                    DNFSpriteImporter<span class="token punctuation">.</span><span class="token function">ApplyTextures</span><span class="token punctuation">(</span>texArray<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> offsets<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> settings<span class="token punctuation">,</span> useOffsetInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">System<span class="token punctuation">.</span>Serializable</span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OffsetData</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> AddOffsetX <span class="token operator">=</span> <span class="token number">229</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> AddOffsetY <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> OffsetX <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">-</span> AddOffsetX<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> OffsetY <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> y <span class="token operator">-</span> AddOffsetY<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></details><details><summary>生成 Animation Clip 参考</summary><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">Saro<span class="token punctuation">.</span>Paperdoll</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEditor</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Rpg</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DnfAnimationCreator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EditorWindow</span></span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"DNF/Animation Creator"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token generic-method"><span class="token function">GetWindow</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DnfAnimationCreator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> m_OutputPath <span class="token operator">=</span> <span class="token string">"Assets/Arts/Animator/AnimationCreateByScripts/clip new.anim"</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> m_FrameRate <span class="token operator">=</span> <span class="token number">12f</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">SpritePack</span> m_SpritePack<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Paperdoll</span> m_Paperdoll<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_OutputPath <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">TextField</span><span class="token punctuation">(</span><span class="token string">"OutputPath"</span><span class="token punctuation">,</span> m_OutputPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_SpritePack <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">ObjectField</span><span class="token punctuation">(</span><span class="token string">"SpritePack"</span><span class="token punctuation">,</span> m_SpritePack<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">SpritePack</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">SpritePack</span><span class="token punctuation">;</span>            m_Paperdoll <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">ObjectField</span><span class="token punctuation">(</span><span class="token string">"Actor(PaperDoll)"</span><span class="token punctuation">,</span> m_Paperdoll<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Paperdoll</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">Paperdoll</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_SpritePack <span class="token operator">&amp;&amp;</span> m_Paperdoll<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"create aniamtion"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span>                    <span class="token punctuation">&#123;</span>                        <span class="token class-name"><span class="token keyword">var</span></span> clip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AnimationClip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        clip<span class="token punctuation">.</span>frameRate <span class="token operator">=</span> m_FrameRate<span class="token punctuation">;</span>                        clip<span class="token punctuation">.</span>legacy <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token class-name"><span class="token keyword">var</span></span> category <span class="token operator">=</span> m_SpritePack<span class="token punctuation">.</span>m_SpriteCategories<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token class-name"><span class="token keyword">var</span></span> hashKeys <span class="token operator">=</span> category<span class="token punctuation">.</span>hashes<span class="token punctuation">;</span>                        <span class="token class-name"><span class="token keyword">var</span></span> animatedKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Keyframe</span><span class="token punctuation">[</span>category<span class="token punctuation">.</span>sprites<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hashKeys<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#123;</span>                            <span class="token class-name"><span class="token keyword">var</span></span> hash <span class="token operator">=</span> hashKeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                            animatedKeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Keyframe</span>                            <span class="token punctuation">&#123;</span>                                time <span class="token operator">=</span> <span class="token number">1f</span> <span class="token operator">/</span> m_FrameRate <span class="token operator">*</span> i<span class="token punctuation">,</span>                                <span class="token keyword">value</span> <span class="token operator">=</span> PaperdollUtility<span class="token punctuation">.</span><span class="token function">ConvertIntToFloat</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token class-name"><span class="token keyword">var</span></span> curve <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AnimationCurve</span><span class="token punctuation">(</span>animatedKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> animatedKeys<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#123;</span>                            AnimationUtility<span class="token punctuation">.</span><span class="token function">SetKeyLeftTangentMode</span><span class="token punctuation">(</span>curve<span class="token punctuation">,</span> i<span class="token punctuation">,</span> AnimationUtility<span class="token punctuation">.</span>TangentMode<span class="token punctuation">.</span>Constant<span class="token punctuation">)</span><span class="token punctuation">;</span>                            AnimationUtility<span class="token punctuation">.</span><span class="token function">SetKeyRightTangentMode</span><span class="token punctuation">(</span>curve<span class="token punctuation">,</span> i<span class="token punctuation">,</span> AnimationUtility<span class="token punctuation">.</span>TangentMode<span class="token punctuation">.</span>Constant<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token class-name"><span class="token keyword">var</span></span> paths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        m_Paperdoll<span class="token punctuation">.</span>equipSlots<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>slot <span class="token operator">=></span>                            <span class="token punctuation">&#123;</span>                                slot<span class="token punctuation">.</span>PaperdollParts<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>p <span class="token operator">=></span>                                <span class="token punctuation">&#123;</span>                                    <span class="token class-name"><span class="token keyword">var</span></span> path <span class="token operator">=</span> p<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                                    <span class="token class-name"><span class="token keyword">var</span></span> cur <span class="token operator">=</span> p<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>                                    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>parent<span class="token punctuation">)</span>                                    <span class="token punctuation">&#123;</span>                                        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> m_Paperdoll<span class="token punctuation">.</span>transform<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                                        path <span class="token operator">=</span> cur<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> path<span class="token punctuation">;</span>                                    <span class="token punctuation">&#125;</span>                                    paths<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paths<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#123;</span>                            <span class="token class-name"><span class="token keyword">var</span></span> animatedBindings <span class="token operator">=</span> EditorCurveBinding<span class="token punctuation">.</span><span class="token function">FloatCurve</span><span class="token punctuation">(</span>paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">PaperdollPart</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"m_SpriteHash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            AnimationUtility<span class="token punctuation">.</span><span class="token function">SetEditorCurve</span><span class="token punctuation">(</span>clip<span class="token punctuation">,</span> animatedBindings<span class="token punctuation">,</span> curve<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        AssetDatabase<span class="token punctuation">.</span><span class="token function">CreateAsset</span><span class="token punctuation">(</span>clip<span class="token punctuation">,</span> m_OutputPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                        AssetDatabase<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Exception</span> e<span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></details><details><summary>生成 Animator Controller 参考</summary><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEditor</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEditor<span class="token punctuation">.</span>Animations</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Rpg</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DnfAnimatorBuilder</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EditorWindow</span></span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"DNF/AnimatorBuilder"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> window <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetWindow</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DnfAnimatorBuilder<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            window<span class="token punctuation">.</span>titleContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GUIContent</span><span class="token punctuation">(</span><span class="token string">"AnimatorBuilder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            window<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>AnimationClip<span class="token punctuation">></span></span> animClips <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>AnimationClip<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> savePath <span class="token operator">=</span> <span class="token string">"Assets/Arts/Animator/"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> animatorName <span class="token operator">=</span> <span class="token string">"Test.controller"</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Vector2</span> m_ScrollPos<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            EditorGUILayout<span class="token punctuation">.</span><span class="token function">HelpBox</span><span class="token punctuation">(</span><span class="token string">"1. Drag folder(s) to paths label.\n2. Click process button."</span><span class="token punctuation">,</span> MessageType<span class="token punctuation">.</span>Info<span class="token punctuation">)</span><span class="token punctuation">;</span>            savePath <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">TextField</span><span class="token punctuation">(</span>savePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            animatorName <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">TextField</span><span class="token punctuation">(</span>animatorName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> dragArea <span class="token operator">=</span> GUILayoutUtility<span class="token punctuation">.</span><span class="token function">GetRect</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">,</span> <span class="token number">35f</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">ExpandWidth</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            EditorGUI<span class="token punctuation">.</span><span class="token function">LabelField</span><span class="token punctuation">(</span>dragArea<span class="token punctuation">,</span> <span class="token string">"Animation Clips : drag animation(s) here."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_ScrollPos <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginScrollView</span><span class="token punctuation">(</span>m_ScrollPos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> animClips<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                EditorGUILayout<span class="token punctuation">.</span><span class="token function">LabelField</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">. "</span></span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                EditorGUILayout<span class="token punctuation">.</span><span class="token function">ObjectField</span><span class="token punctuation">(</span>animClips<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">AnimationClip</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndScrollView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Event<span class="token punctuation">.</span>current<span class="token punctuation">.</span>type <span class="token operator">==</span> EventType<span class="token punctuation">.</span>DragUpdated <span class="token operator">&amp;&amp;</span> dragArea<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>Event<span class="token punctuation">.</span>current<span class="token punctuation">.</span>mousePosition<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                DragAndDrop<span class="token punctuation">.</span>visualMode <span class="token operator">=</span> DragAndDropVisualMode<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Event<span class="token punctuation">.</span>current<span class="token punctuation">.</span>type <span class="token operator">==</span> EventType<span class="token punctuation">.</span>DragExited <span class="token operator">&amp;&amp;</span> dragArea<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>Event<span class="token punctuation">.</span>current<span class="token punctuation">.</span>mousePosition<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">var</span></span> dragPaths <span class="token operator">=</span> DragAndDrop<span class="token punctuation">.</span>objectReferences<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DragAndDrop<span class="token punctuation">.</span>paths <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> dragPaths<span class="token punctuation">.</span>Length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dragPaths<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token class-name"><span class="token keyword">var</span></span> animClip <span class="token operator">=</span> dragPaths<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">AnimationClip</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>animClip<span class="token punctuation">)</span>                        <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>animClips<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>animClip<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#123;</span>                                animClips<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>animClip<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Clear all animations"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                animClips<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            EditorGUILayout<span class="token punctuation">.</span><span class="token function">Space</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Process"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">BuildAnimator</span><span class="token punctuation">(</span>savePath <span class="token operator">+</span> animatorName<span class="token punctuation">,</span> animClips<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">BuildAnimator</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> controllerPath<span class="token punctuation">,</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>AnimationClip<span class="token punctuation">></span></span> clips<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">/**************************************************************            /* create animator controller            /**************************************************************/</span>            <span class="token class-name"><span class="token keyword">var</span></span> controller <span class="token operator">=</span> AnimatorController<span class="token punctuation">.</span><span class="token function">CreateAnimatorControllerAtPath</span><span class="token punctuation">(</span>controllerPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> baseLayer <span class="token operator">=</span> controller<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>stateMachine<span class="token punctuation">;</span>            baseLayer<span class="token punctuation">.</span>anyStatePosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            baseLayer<span class="token punctuation">.</span>entryPosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">,</span> <span class="token number">50f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            baseLayer<span class="token punctuation">.</span>exitPosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">1000f</span><span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**************************************************************            /* create states            /**************************************************************/</span>            <span class="token class-name"><span class="token keyword">var</span></span> nullstate <span class="token operator">=</span> baseLayer<span class="token punctuation">.</span><span class="token function">AddState</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">,</span> <span class="token number">100f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            baseLayer<span class="token punctuation">.</span>defaultState <span class="token operator">=</span> nullstate<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> startPos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">400f</span><span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> clips<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">var</span></span> state <span class="token operator">=</span> baseLayer<span class="token punctuation">.</span><span class="token function">AddState</span><span class="token punctuation">(</span>clips<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> startPos<span class="token punctuation">)</span><span class="token punctuation">;</span>                state<span class="token punctuation">.</span>motion <span class="token operator">=</span> clips<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">var</span></span> transition <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">AddExitTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                transition<span class="token punctuation">.</span>hasExitTime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                transition<span class="token punctuation">.</span>exitTime <span class="token operator">=</span> <span class="token number">1f</span><span class="token punctuation">;</span>                transition<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">0f</span><span class="token punctuation">;</span>                startPos<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token number">50f</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            AssetDatabase<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></details><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ol><li>AssetDatabase.StartAssetEditing 能加速批量导入。</li></ol>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> gamedev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据的编辑和读写</title>
      <link href="/2021/02/20/unity/%E7%BC%96%E8%BE%91%E5%99%A8%E6%89%A9%E5%B1%95/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BC%96%E8%BE%91%E5%92%8C%E8%AF%BB%E5%86%99/"/>
      <url>/2021/02/20/unity/%E7%BC%96%E8%BE%91%E5%99%A8%E6%89%A9%E5%B1%95/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BC%96%E8%BE%91%E5%92%8C%E8%AF%BB%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>在游戏开发中，必定会有数据编辑、保存和读取。需要兼顾<code>开发效率、运行效率和兼容性</code>。</p><img src="pic0.png" loading="lazy"><h2 id="数据的显示、编辑"><a href="#数据的显示、编辑" class="headerlink" title="数据的显示、编辑"></a>数据的显示、编辑</h2><p>unity的内置序列化还是比较好用的，所见即所得，但有个比较蛋疼的地方，不支持<code>接口、多态对象</code>。在设计数据结构的时候，如果没有多态，将会有很多数据冗余。。。</p><p>在unity2020版本中，多了一个<code>SerializeReference</code>特性，可以帮助我们显示多态数据，但也有个比较蛋疼的地方，它只能显示，不能编辑，你说艹蛋不艹蛋🙄，做功能只做一半之unity。</p><p>这里，我们使用Odin插件。如果没有Odin，可以考虑<a href="https://github.com/TextusGames/UnitySerializedReferenceUI">UnitySerializedReferenceUI</a>。有了上面的基础，就可以在编辑器下快速创建、删除多态对象了！</p><h3 id="不使用多态"><a href="#不使用多态" class="headerlink" title="不使用多态"></a>不使用多态</h3><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">data</span><span class="token punctuation">&#123;</span>    <span class="token comment">// event id</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> id<span class="token punctuation">;</span>    <span class="token comment">// animation event parameter</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> animationName<span class="token punctuation">;</span>    <span class="token comment">// sound event parameter</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> soundName<span class="token punctuation">;</span>    <span class="token comment">// more and more...</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">table</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>data<span class="token punctuation">></span></span> datas<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>动画事件只会用到animationName，声音事件只会用到soundName，但每个data都包含了其他无用字段，这真是太。。。</p><p>如果在unityeditor下编辑，还得根据事件类型做switch case，只在面板中只曝露出有用的参数。。。不然。。。</p><p>如果采用json、xml之类自动化的方式来保存，那无用的参数就全进文本了。。。手写parser？那慢慢写吧。。。</p><h3 id="使用多态"><a href="#使用多态" class="headerlink" title="使用多态"></a>使用多态</h3><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">data</span><span class="token punctuation">&#123;</span>    <span class="token comment">// event id</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">animation_data</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">data</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// animation event parameter</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> animationName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">sound_data</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">data</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// sound event parameter</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> soundName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// more and more...</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">table</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>data<span class="token punctuation">></span></span> datas<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这样数据结构看起来就清晰多了，而且不会存储不必要的东西！文件大小、内存大小都会降低！也不用编写又臭又长的编辑器代码和序列化代码！</p><h2 id="数据的读写"><a href="#数据的读写" class="headerlink" title="数据的读写"></a>数据的读写</h2><p>处理了显示、编辑的问题，另一个问题就是编辑器读取，以及运行时读写的问题了，不过一般运行时只考虑读。</p><p>序列化库可以先选用 json.net 或者 protobuf.net，都支持多态序列化。</p><p>数据的读写有个问题，我们可能在开发过程中修改数据结构，可能有以下几种问题：</p><ol><li>字段名改变</li><li>基元类型改变，如，int-&gt;string</li><li>容器类型改变，如，list-&gt;dictionary</li><li>数据结构类改版，如，classA包含a、b、c，现要改为classA包含classB，classB包含a、b、c</li></ol><p>出现上述问题后，plan A，手动检查，重新弄。<s>策划：头伸过来，我给你加个buff。</s>哈哈哈~</p><p>plan B，使用序列化库解决：</p><ol><li>字段名改变<br> protobuf使用int作为key，仅改变字段名，没有任何影响。<br> json.net则使用JsonProperty即可指定名称，类似unity的SerializeAs。</li><li>剩下所有，可以考虑如下方案<br>被<code>（ProtoAfterDeserializaton、ProtoBeforeDeserializaton）、（OnSerializing、OnDeserialized）</code>等特性标记的方法可以在对应时机的被反射调用，所以利用这个，我们可以编写兼容代码，来最大化保证数据的兼容性！</li></ol><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>Q: SerializeReference 在类名修改后，可能会出现报错，且编辑器下ScriptableObject无法保存。</p><p>A1: 由于我们是序列化成自己的数据文件了，则可以删掉后，再重新生成ScriptableObject。<br><br>A2: 添加 [MovedFrom(false, “OldNameSpaceName”, “OldAssemblyName”, “OldClassName”)] 特性也可以解决。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>有了以上基础，即可在unity里编辑逻辑数据，从了避免在excel里抽象数据结构了。</p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> gamedev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2D纸娃娃系统</title>
      <link href="/2021/02/19/unity/%E5%B7%A5%E5%85%B7%E6%8F%92%E4%BB%B6/2D%E7%BA%B8%E5%A8%83%E5%A8%83%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/02/19/unity/%E5%B7%A5%E5%85%B7%E6%8F%92%E4%BB%B6/2D%E7%BA%B8%E5%A8%83%E5%A8%83%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="先上效果"><a href="#先上效果" class="headerlink" title="先上效果"></a>先上效果</h2><p><img src="pic0.jpg" loading="lazy"><br><br><img src="gif0.gif" loading="lazy"><br><br><img src="gif1.gif" loading="lazy"></p><h2 id="常规思路"><a href="#常规思路" class="headerlink" title="常规思路"></a>常规思路</h2><p>用sprite作为animation clip的关键帧，LateUpdate里直接使用SpriteRenderer.sprite.name来查表替换sprite。</p><h2 id="改进思路"><a href="#改进思路" class="headerlink" title="改进思路"></a>改进思路</h2><p>UnityEngine.Object.name每次调用都会分配一个新的字符串，在update里调用，压力较大。</p><ul><li>每组图片，根据每张图片的名称hash，作为animation的一组key。</li><li>SpritePack保存hash数组，以及对应的图片数组。</li><li>PaperdollPart根据animation的key索引出图片，在LateUpdate里替换SpriteRenderer.sprite。</li></ul><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>Q. unity为什么用float作为animation clip的keyframe，而不是用int？</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Unity Animation2D package</p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> gamedev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio 配色</title>
      <link href="/2021/01/29/misc/vs%E9%85%8D%E8%89%B2/"/>
      <url>/2021/01/29/misc/vs%E9%85%8D%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="Dracula配色方案的下载与安装"><a href="#Dracula配色方案的下载与安装" class="headerlink" title="Dracula配色方案的下载与安装"></a>Dracula配色方案的下载与安装</h2><p>Dracula是一款Dark（Deep）系的配色方案。<a href="https://draculatheme.com/visual-studio/">点我下载</a></p><p>下载完成，会获得一个.vssettings文件。</p><p>照着Dracula官网的安装步骤，就可以顺利安装完成啦。</p><p><em>NOTE ：</em></p><p><em>这里还有一个很多人推荐过的网站，<a href="https://studiostyl.es/">https://studiostyl.es/</a>，里面有很多VS的配色，也支持在线编辑~</em></p><h2 id="修改配色"><a href="#修改配色" class="headerlink" title="修改配色"></a>修改配色</h2><p>Dracula的配色方案我很喜欢，但是有一点有点不顺心，就是函数名与变量名的颜色是一模一样的。</p><p>当很多变量与函数在一起的时候，不太容易分清楚。</p><p>而VS Code上的Dracula配色方案却没有这个问题，那就改进一下VS的配色吧。</p><h3 id="修改-vssettings文件"><a href="#修改-vssettings文件" class="headerlink" title="修改.vssettings文件"></a>修改.vssettings文件</h3><p>这是一个XML文件，可以用编辑器打开，这里选用VS Code。</p><p>添加一行代码，如下图所示。找到method name，Foreground为字体颜色，我们修改这个就行了。</p><img src="sc01.JPG" width = 80% loading="lazy"><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p> <strong>C#</strong></p><img src="sc02.JPG" width = 50% loading="lazy"><p> <strong>C++</strong></p><img src="sc03.JPG" width = 50% loading="lazy">]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> visual studio </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
