<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用户类持有池对象引用问题</title>
      <link href="/2022/01/22/unity/%E5%85%B6%E4%BB%96/%E7%94%A8%E6%88%B7%E7%B1%BB%E6%8C%81%E6%9C%89%E6%B1%A0%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2022/01/22/unity/%E5%85%B6%E4%BB%96/%E7%94%A8%E6%88%B7%E7%B1%BB%E6%8C%81%E6%9C%89%E6%B1%A0%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>通常游戏开发，带gc的语言，频繁创建的小对象，都会考虑用对象池优化，从而减少gc耗时，内存碎片。但是对象池管理不当，是非常危险的，而且会增加编码难度，可能使原本易于维护的代码变得复杂化。</p><p>用户案例，用户类需要持有<code>池对象A</code>的引用，进行一些操作，但<code>池对象A</code>可能随时被回收掉，或者回收后再利用了，这时候再通过<code>池对象A</code>的引用来使用，就会出现非常严重得错误。</p><p>上述用户案例中，池对象的生命周期可能很难控制，变得难以维护，但有时候又有这种需求，又想享受对象池带来的性能提升。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// struct实现，避免分配堆内存</span><span class="token comment">// 实现IEquatable接口，重写HashCode方法，可用于字典，而没有额外内存分配</span><span class="token comment">// 重写操作符，方便使用</span><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">ObjectHandle</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEquatable<span class="token punctuation">&lt;</span>ObjectHandle<span class="token punctuation">></span></span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 池对象维护一个ObjectID，每次生成对象时，全局自增</span>    <span class="token keyword">public</span> <span class="token return-type class-name">Object</span> Object <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Handle <span class="token operator">=></span> m_CachedObjectID<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> m_CachedObjectID<span class="token punctuation">;</span> <span class="token comment">// 从1开始有效，0无效</span>    <span class="token keyword">public</span> <span class="token function">ObjectHandle</span><span class="token punctuation">(</span><span class="token class-name">Object</span> Object<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建一个Handle，记录当前对象的引用，以及ObjectID</span>        Object <span class="token operator">=</span> Object<span class="token punctuation">;</span>        m_CachedObjectID <span class="token operator">=</span> Object<span class="token punctuation">.</span>ObjectID<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 对象不为空，且对象的ObjectID等于创建Handle时的ObjectID，才会认为对象可操作，否则，不应该再操作此对象了</span>        <span class="token keyword">return</span> Object <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> m_CachedObjectID <span class="token operator">==</span> Object<span class="token punctuation">.</span>ObjectID<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">implicit</span> <span class="token keyword">operator</span> <span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token class-name">ObjectHandle</span> handle<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> handle<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">explicit</span> <span class="token keyword">operator</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token class-name">ObjectHandle</span> handle<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> handle <span class="token punctuation">?</span> handle<span class="token punctuation">.</span>Object <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name">ObjectHandle</span> other<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">CompareObjects</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> obj<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>obj <span class="token keyword">is</span> <span class="token class-name">ObjectHandle</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ObjectHandle<span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token class-name">ObjectHandle</span> lhs<span class="token punctuation">,</span> <span class="token class-name">ObjectHandle</span> rhs<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">CompareObjects</span><span class="token punctuation">(</span>lhs<span class="token punctuation">,</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">!=</span><span class="token punctuation">(</span><span class="token class-name">ObjectHandle</span> lhs<span class="token punctuation">,</span> <span class="token class-name">ObjectHandle</span> rhs<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">CompareObjects</span><span class="token punctuation">(</span>lhs<span class="token punctuation">,</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CompareObjects</span><span class="token punctuation">(</span><span class="token class-name">ObjectHandle</span> lhs<span class="token punctuation">,</span> <span class="token class-name">ObjectHandle</span> rhs<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> validA <span class="token operator">=</span> lhs<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> validB <span class="token operator">=</span> rhs<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>validA <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>validB<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>validA <span class="token operator">&amp;&amp;</span> validB<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>m_CachedObjectID <span class="token operator">==</span> rhs<span class="token punctuation">.</span>m_CachedObjectID<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> m_CachedObjectID<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>unity引擎的gc算法(BOEHM GC)过于古老，即使多了分帧机制，总gc时长并未被减少，甚至可能还增加了，对象池的使用还是很有必要。</p><p>capcom的re引擎，也是c#作为脚本，也是il2cpp技术，但是gc的效率非常高，即使ps4上每帧分配300k左右的托管堆内存，每帧gc耗时依然可以保持0.2ms左右（cedec演讲，案例是鬼泣5）。这种gc作为后盾，开发效率可以大大提高！希望unity也能达到这种效果，造福广大开发者！</p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> object pool </tag>
            
            <tag> unity </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据表</title>
      <link href="/2022/01/14/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E6%95%B0%E6%8D%AE%E8%A1%A8/"/>
      <url>/2022/01/14/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E6%95%B0%E6%8D%AE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Excel库调研"><a href="#Excel库调研" class="headerlink" title="Excel库调研"></a>Excel库调研</h2><table><thead><tr><th>库名</th><th>测试用例</th><th>效率</th></tr></thead><tbody><tr><td>ExcelDataReader</td><td>250excel文件，共计50w行</td><td>16000 ms</td></tr><tr><td>NPOI</td><td>250excel文件，共计50w行</td><td>60000 ms</td></tr><tr><td>EPPlus</td><td>250excel文件，共计50w行</td><td>60000 ms</td></tr></tbody></table><p>ExcelDataReader优势是可以按需读取，内存占用、读取效率都要比另外两个快，NPOI、EPPlus貌似只能全量读取</p><h2 id="使用yield-return"><a href="#使用yield-return" class="headerlink" title="使用yield return"></a>使用yield return</h2><p>测试发现 <code>yield return</code> 返回IEnumerable对象，读取Excel的IO效率会提高很多，从16000ms，到7000ms</p><p>以下代码，V1版本要比V2版本快将很多。</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>ExcelData<span class="token punctuation">></span></span> <span class="token function">LoadExcel_V1</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> filePath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">,</span> FileShare<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> ExcelReaderFactory<span class="token punctuation">.</span><span class="token function">CreateReader</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsSheetNameValid</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    counter<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token class-name">ExcelData</span> data<span class="token punctuation">;</span>                    <span class="token keyword">try</span>                    <span class="token punctuation">&#123;</span>                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"parsing...... </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">reader<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">counter</span><span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">reader<span class="token punctuation">.</span>ResultsCount</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        data <span class="token operator">=</span> <span class="token function">ParseExcel</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"excel:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">filePath</span><span class="token punctuation">&#125;</span></span><span class="token string"> sheet:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">reader<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string"> 读取失败."</span></span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">yield</span> <span class="token keyword">return</span> data<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">NextResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>ExcelData<span class="token punctuation">></span></span> <span class="token function">LoadExcel_V2</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> filePath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ExcelData<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">,</span> FileShare<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> ExcelReaderFactory<span class="token punctuation">.</span><span class="token function">CreateReader</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsSheetNameValid</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    counter<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token class-name">ExcelData</span> data<span class="token punctuation">;</span>                    <span class="token keyword">try</span>                    <span class="token punctuation">&#123;</span>                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"parsing...... </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">reader<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">counter</span><span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">reader<span class="token punctuation">.</span>ResultsCount</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        data <span class="token operator">=</span> <span class="token function">ParseExcel</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"excel:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">filePath</span><span class="token punctuation">&#125;</span></span><span class="token string"> sheet:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">reader<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string"> 读取失败."</span></span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        ret<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">NextResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="yield-return-坑点"><a href="#yield-return-坑点" class="headerlink" title="yield return 坑点"></a>yield return 坑点</h2><p>本读表案例，多了一次forloop遍历，会多增加3000ms读表、解析表格耗时。7000ms上升到10000ms。</p><p>坑点可看以下代码</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"111"</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"222"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name"><span class="token keyword">var</span></span> a <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> a<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"outside loop: "</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">Process</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> inData<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> inData<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Process: "</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// result:</span><span class="token comment">// outside loop: 111</span><span class="token comment">// work</span><span class="token comment">// outside loop: 222</span><span class="token comment">// Process: 111</span><span class="token comment">// work</span><span class="token comment">// Process: 222</span><span class="token comment">// 每次forloop，work都会被调用，需要尽量避免，特别是方法里有繁重逻辑</span></code></pre><h2 id="使用Span"><a href="#使用Span" class="headerlink" title="使用Span"></a>使用Span</h2><p>Span已是 <code>.Net Standard 2.1</code>的标准库的一部分，<code>2.0</code> 需要引入nuget才行。</p><p>Span(ref struct)为内存切片，是内存片段的封装，可以接住<code>栈内存</code>和<code>非托管堆内存</code>进行操作，<code>托管堆</code>则有另一个类型Memory来处理。以前版本，也可以开启unsafe直接使用指针操作，但是很危险，所以.net为了性能提供了这玩意儿，同时保证了代码安全。</p><p>Span能有效降低字符串SubString等操作的开销，不会生成新的字符串，减少gc。</p><p>但是Span对字符串操作，还没有提供Split方法，这个比较蛋疼。<br>使用这个<a href="https://github.com/dotnet/runtime/pull/295/files/2da605832d09f8bd046517b463652cc52ec6553e#diff-caa10aad67c342827c4ba85e5880f6d6b0ef93a8bbb0555669a885e1cc7bb082">ReadOnlySpan.Split</a>，性能比String.Split快一丢丢，也没有零时字符串生成了，但使用起来繁琐一些</p><p>MGF后续升级 .Net Standard 2.1后，也将会大量使用Span</p><h2 id="多key的实现"><a href="#多key的实现" class="headerlink" title="多key的实现"></a>多key的实现</h2><p>支持1到4个key作为数据行的索引，每个key(int)，但支持值得范围有限，最终合成唯一combinekey(ulong)，支持负数。</p><p>ulong为64bit。2个key，则int32和int32，合成64bit，3个key则，int32，int16，int16合成64bit。</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MethodImpl</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MethodImplOptions<span class="token punctuation">.</span>AggressiveInlining<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">ulong</span></span> <span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> key1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> key2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>key1 <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>key2 <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MethodImpl</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MethodImplOptions<span class="token punctuation">.</span>AggressiveInlining<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">ulong</span></span> <span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> key1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> key2<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> key3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">short</span></span> shortKey2 <span class="token operator">=</span> System<span class="token punctuation">.</span>Convert<span class="token punctuation">.</span><span class="token function">ToInt16</span><span class="token punctuation">(</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">short</span></span> shortKey3 <span class="token operator">=</span> System<span class="token punctuation">.</span>Convert<span class="token punctuation">.</span><span class="token function">ToInt16</span><span class="token punctuation">(</span>key3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>key1 <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>shortKey2 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>shortKey3 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MethodImpl</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MethodImplOptions<span class="token punctuation">.</span>AggressiveInlining<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">ulong</span></span> <span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> key1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> key2<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> key3<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> key4<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">short</span></span> shortKey1 <span class="token operator">=</span> System<span class="token punctuation">.</span>Convert<span class="token punctuation">.</span><span class="token function">ToInt16</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">short</span></span> shortKey2 <span class="token operator">=</span> System<span class="token punctuation">.</span>Convert<span class="token punctuation">.</span><span class="token function">ToInt16</span><span class="token punctuation">(</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">short</span></span> shortKey3 <span class="token operator">=</span> System<span class="token punctuation">.</span>Convert<span class="token punctuation">.</span><span class="token function">ToInt16</span><span class="token punctuation">(</span>key3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">short</span></span> shortKey4 <span class="token operator">=</span> System<span class="token punctuation">.</span>Convert<span class="token punctuation">.</span><span class="token function">ToInt16</span><span class="token punctuation">(</span>key4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>shortKey1 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>shortKey2 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>shortKey3 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>shortKey4 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>使用CodeDom，部分代码片使用StringBuilder拼接。</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/Sarofc/GTable">https://github.com/Sarofc/GTable</a></p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源框架</title>
      <link href="/2022/01/10/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E8%B5%84%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/01/10/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E8%B5%84%E6%BA%90%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>基于<code>XAsset4.1</code>改造的资源框架，提供一键打包，打包流程扩展，资源分组策略，AssetBundle查看。资源加载异步化，提供async/await接口，避免回调地狱，支持直接从远端资源服加载资源（边玩边下）。</p><h2 id="资源加载"><a href="#资源加载" class="headerlink" title="资源加载"></a>资源加载</h2><p>CheckCustomAssets(string assetName) 处理非unity资源，eg. 表格等等</p><p>表格打成VFS</p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> asset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏性标签(GameplayTag)</title>
      <link href="/2022/01/09/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/%E6%B8%B8%E6%88%8F%E6%80%A7%E6%A0%87%E7%AD%BE/"/>
      <url>/2022/01/09/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/%E6%B8%B8%E6%88%8F%E6%80%A7%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<p>在UE4中，层次化标签系统(GameplayTag)大量使用。树形结构，可替代枚举、一些变量，甚至能当成事件来传递。</p><p>设计如下标签，Buff.Strong.Stun、Buff.Weak.Fire、Buff.Weak.Ice。标签Buff.Weak.Fire、Buff.Weak.Ice，MatchesTag(“Buff.Weak”) 都会返回true。那么就可以很轻松的实现Buff驱散，而不用新增各种变量，来处理这些问题。所以GameplayTag的设计尤为重要。</p><p>很多buff都可能会给角色施加Stun效果，如果Stun状态仅仅为一个bool的话，buff的移除就要格外小心，而GameplayTagCountConainer则可以有效解决这个问题。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><img src="pic1.png" loading="lazy"><ol><li>GameplayTag是struct，只保存TagName的TagHash(int)，作为Dictionary的Key是非常高效的。UE则是引擎FName直接实现的，也是hash字符串。</li><li>GameplayTagManager管理所有GameplayTagNode以及TagName，可以运行时获取GameplayTag以及TagName。解析TagAsset文本后，用Dictionary保存在内存里，用树形结构管理层级。树形结构可以方便的回溯，很容易实现层级化引用。</li><li>GameplayTagNode是class，被GameplayTagManager所管理，里面只存有GameplayTag和编辑器下才会有的注释信息，以及父节点和子节点引用。</li><li>GameplayTagContainer，是GameplayTag容器，List实现，可序列化，提供多项匹配。内部会额外存储parent节点，以加速匹配。</li><li>GameplayTagCountContainer，可以有效处理GameplayTag堆叠，并抛出对应的事件。内部维护两个Dictionary&lt;GameplayTag,int&gt;，分别处理<code>显式GameplayTag</code>，以及<code>GameplayTag</code>，举个例子，添加1个A.1，则<code>显式GameplayTag</code>只有{A.1,1}，<code>GameplayTag</code>则有{A,1}{A.1,1}，标签A也会被隐式添加。</li><li>GameplayTagAsset，序列化文件json。反序列化细节，使用 [UnityEditor.Callbacks.DidReloadScripts] 特性，来每次脚本编译后，重新反序列化一次TagAsset到内存里。也可以手动点击编辑器里的Load按钮，来刷新。</li></ol><pre class="language-json" data-language="json"><code class="language-json"><span class="token comment">// json</span><span class="token punctuation">&#123;</span>    <span class="token property">"Tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"TagName"</span><span class="token operator">:</span> <span class="token string">"A.1"</span><span class="token punctuation">,</span>            <span class="token property">"DevComment"</span><span class="token operator">:</span> <span class="token string">"test tag A.1"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"TagName"</span><span class="token operator">:</span> <span class="token string">"B.1"</span><span class="token punctuation">,</span>            <span class="token property">"DevComment"</span><span class="token operator">:</span> <span class="token string">""</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"TagName"</span><span class="token operator">:</span> <span class="token string">"B.2"</span><span class="token punctuation">,</span>            <span class="token property">"DevComment"</span><span class="token operator">:</span> <span class="token string">""</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">// 内存布局</span>Root   ├──A   ├  └──A.<span class="token number">1</span>   └──B      ├──B.<span class="token number">1</span>      └──B.<span class="token number">2</span></code></pre><h2 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h2><table><thead><tr><th>Source</th><th>Function/Operation</th><th>Input Parameter</th><th>Return Value</th></tr></thead><tbody><tr><td>A.1</td><td>MatchesTag</td><td>A</td><td>true</td></tr><tr><td>A.1</td><td>MatchesTagExact (or ==)</td><td>A</td><td>false</td></tr><tr><td>A.1</td><td>MatchesAny</td><td>{A, C}</td><td>true</td></tr><tr><td>A.1</td><td>MatchesAnyExact</td><td>{A, C}</td><td>false</td></tr><tr><td>A.1</td><td>MatchesAll</td><td>{A}</td><td>true</td></tr><tr><td>A.1</td><td>MatchesAllExact</td><td>{A}</td><td>false</td></tr><tr><td>{A.1, B.1}</td><td>HasTag</td><td>A</td><td>true</td></tr><tr><td>{A.1, B.1}</td><td>HasTagExact</td><td>A</td><td>false</td></tr><tr><td>{A.1, B.1}</td><td>HasAny</td><td>{A, C}</td><td>true</td></tr><tr><td>{A.1, B.1}</td><td>HasAnyExact</td><td>{A, C}</td><td>false</td></tr><tr><td>{A.1, B.1}</td><td>HasAll</td><td>{A, B}</td><td>true</td></tr><tr><td>{A.1, B.1}</td><td>HasAllExact</td><td>{A, B}</td><td>false</td></tr></tbody></table><h2 id="编辑器支持"><a href="#编辑器支持" class="headerlink" title="编辑器支持"></a>编辑器支持</h2><ol><li>GameplayTag可以直接编辑Json文本，也可以在Editor面板里直接编辑。</li><li>Inspector面板可以直接选择对应的GameplayTag，Tag注释也会显示成Tooltip，并且Tag丢失时，会标红。</li></ol><p><img src="pic2.png" width="50%" loading="lazy"><img src="pic0.png" width="50%" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>UE4 GameplayTag</p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
          <category> gameplay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gameplay </tag>
            
            <tag> gamedev </tag>
            
            <tag> gameplaytag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟文件系统</title>
      <link href="/2022/01/09/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/01/09/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>TODO</p><ul><li>内存布局</li><li>block分簇算法</li><li>增删改查实现</li><li>文件碎片整理实现</li></ul>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> gamedev </tag>
            
            <tag> vfs </tag>
            
            <tag> 虚拟文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件下载器</title>
      <link href="/2022/01/09/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
      <url>/2022/01/09/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>基于 <code>HttpWebRequest</code> 和 <code>UnityWebRequest</code> 的多线程、断点续传文件下载器</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><img src="/img/index/文件下载器.png" loading="lazy"><p><code>IDonwloadAgent</code>为下载器接口，目前有两种实现，HttpDownload和UnityWebRequestDownload，可以无缝切换。IDonwloadAgent继承IEnumerator接口，可以无缝接入unity协程、UniTask(Async)，实现非回调式异步等待，逻辑更清晰。IDonwloadAgent提供各种操作接口供Downloader调用，例如开始、暂停、重试、取消等等。</p><p><code>Downloader</code>为工厂模式实现，管理所有下载器实例，避免重复下载，等等。通过DownloadAsync(DownloadInfo)，即可异步下载文件。覆写s_OnDownloadAgentFactory委托，可以使用自定义IDownloadAgent实例。</p><h2 id="下载器实现"><a href="#下载器实现" class="headerlink" title="下载器实现"></a>下载器实现</h2><h3 id="HttpDownload"><a href="#HttpDownload" class="headerlink" title="HttpDownload"></a>HttpDownload</h3><ol><li>读取已下载文件流的Position，加上Http Range头，即可实现断点续传。</li><li>通过DownloadInfo中的Offset参数，加上Http Range头，即可切片下载。</li><li>每个HttpDownload都会使用c#线程池进行下载任务。（需注意unity切后台，线程终止问题，需要重新开启下载任务，否则下载器会假死，下载任务无法完成）</li><li>修改buffer大小，貌似可以达成限速效果。</li></ol><p>以下为完整实现</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">HttpDownload</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDownloadAgent</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 通过buffer size 貌似可以限速？</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">long</span></span> s_ReadBufferSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> Instance</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> m_ReadBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>s_ReadBufferSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">FileStream</span> m_Writer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HttpDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">;</span>        Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">DownloadInfo</span> Info <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">EDownloadStatus</span> Status <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Error <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>IDownloadAgent<span class="token punctuation">></span></span> Completed<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsDone <span class="token operator">=></span> Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Failed <span class="token operator">||</span> Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Progress <span class="token operator">=></span> Position <span class="token operator">*</span> <span class="token number">1f</span> <span class="token operator">/</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> Position <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">;</span>        <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Error <span class="token operator">=</span> <span class="token string">"User Cancel."</span><span class="token punctuation">;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Completed <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">Completed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Completed <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span>        <span class="token punctuation">&#123;</span>            <span class="token function">Downloading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Position <span class="token operator">!=</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"Download length </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Position</span><span class="token punctuation">&#125;</span></span><span class="token string"> mismatch to </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Info<span class="token punctuation">.</span>Size</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Error <span class="token operator">=</span> e<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>            Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">finally</span>        <span class="token punctuation">&#123;</span>            <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Writer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_Writer<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Writer<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Writer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CheckValidationResult</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">X509Certificate</span> certificate<span class="token punctuation">,</span> <span class="token class-name">X509Chain</span> chain<span class="token punctuation">,</span>        <span class="token class-name">SslPolicyErrors</span> spe<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Downloading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO</span>        <span class="token comment">// 下载中，长时间没速度，也应该进行处理</span>        <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token function">CreateWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">GetResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ContentLength <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Info<span class="token punctuation">.</span>Size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> Info<span class="token punctuation">.</span>Size <span class="token operator">=</span> response<span class="token punctuation">.</span>ContentLength <span class="token operator">+</span> Position<span class="token punctuation">;</span>                <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">GetResponseStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Position <span class="token operator">&lt;</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Progressing<span class="token punctuation">)</span>                        <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#123;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name">WebRequest</span> <span class="token function">CreateWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">WebRequest</span> request<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Info<span class="token punctuation">.</span>DownloadUrl<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            ServicePointManager<span class="token punctuation">.</span>ServerCertificateValidationCallback <span class="token operator">=</span> CheckValidationResult<span class="token punctuation">;</span>            request <span class="token operator">=</span> <span class="token function">GetHttpWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            request <span class="token operator">=</span> <span class="token function">GetHttpWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> request<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name">WebRequest</span> <span class="token function">GetHttpWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> httpWebRequest <span class="token operator">=</span> <span class="token punctuation">(</span>HttpWebRequest<span class="token punctuation">)</span>WebRequest<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>DownloadUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        httpWebRequest<span class="token punctuation">.</span>ProtocolVersion <span class="token operator">=</span> HttpVersion<span class="token punctuation">.</span>Version11<span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">from</span> <span class="token operator">=</span> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position<span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> to <span class="token operator">=</span> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>        httpWebRequest<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO 加上超时</span>        <span class="token comment">//httpWebRequest.Timeout = 1000000; // 默认是1000s</span>        <span class="token keyword">return</span> httpWebRequest<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token class-name">Stream</span> reader<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> len <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>m_ReadBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> m_ReadBuffer<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>m_ReadBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            Position <span class="token operator">+=</span> len<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Status <span class="token operator">!=</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Progressing<span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> fileInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>SavePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span>Exists <span class="token operator">&amp;&amp;</span> fileInfo<span class="token punctuation">.</span>Length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Info<span class="token punctuation">.</span>Size <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> fileInfo<span class="token punctuation">.</span>Length <span class="token operator">==</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>                Position <span class="token operator">=</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// TODO</span>            <span class="token comment">// issue：</span>            <span class="token comment">// IOException: Sharing violation on path</span>            <span class="token comment">// 文件读取了多次</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Writer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                m_Writer <span class="token operator">=</span> fileInfo<span class="token punctuation">.</span><span class="token function">OpenWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Position <span class="token operator">=</span> m_Writer<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Info<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"Invalid Range [</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position </span><span class="token punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position <span class="token operator">+</span> Info<span class="token punctuation">.</span>Size</span><span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token punctuation">;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Position <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> m_Writer<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>End<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Info<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"Invalid Range [</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position </span><span class="token punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position <span class="token operator">+</span> Info<span class="token punctuation">.</span>Size</span><span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token punctuation">;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">var</span></span> dir <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetDirectoryName</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>SavePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Writer <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>SavePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>Run<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> IEnumerator Impl</span>    <span class="token return-type class-name"><span class="token keyword">bool</span></span> IEnumerator<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>IsDone<span class="token punctuation">;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> IEnumerator<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">object</span></span> IEnumerator<span class="token punctuation">.</span>Current <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span class="token punctuation">&#125;</span></code></pre><h3 id="UnityWebRequestDownload"><a href="#UnityWebRequestDownload" class="headerlink" title="UnityWebRequestDownload"></a>UnityWebRequestDownload</h3><ol><li>大体上同HttpDownload，但没有线程操作，unity托管。</li><li>使用DownloadHandlerScript实现下载回调。</li><li>DownloadHandlerScript传入buffer，可以减少内存分配。</li></ol><p>以下为完整实现</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">UnityWebRequestDownload</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDownloadAgent</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">MyDownloadScript</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DownloadHandlerScript</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">UnityWebRequestDownload</span> m_Download<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyDownloadScript</span><span class="token punctuation">(</span><span class="token class-name">UnityWebRequestDownload</span> download<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_Download <span class="token operator">=</span> download<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token function">GetProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> m_Download<span class="token punctuation">.</span>Progress<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ReceiveData</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> buffer<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> dataLength<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> m_Download<span class="token punctuation">.</span><span class="token function">ReceiveData</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> dataLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CompleteContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_Download<span class="token punctuation">.</span><span class="token function">CompleteContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> Position <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">DownloadInfo</span> Info <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsDone <span class="token operator">=></span> Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Failed <span class="token operator">||</span> Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">EDownloadStatus</span> Status <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>IDownloadAgent<span class="token punctuation">></span></span> Completed<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Progress <span class="token operator">=></span> Position <span class="token operator">*</span> <span class="token number">1f</span> <span class="token operator">/</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">UnityWebRequest</span> m_Request<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">FileStream</span> m_Writer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">long</span></span> s_ReadBufferSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> m_ReadBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>s_ReadBufferSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Error <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">internal</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Info<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Status <span class="token operator">!=</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Progressing<span class="token punctuation">;</span>        Error <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> fileInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>SavePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span>Exists <span class="token operator">&amp;&amp;</span> fileInfo<span class="token punctuation">.</span>Length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Info<span class="token punctuation">.</span>Size <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> fileInfo<span class="token punctuation">.</span>Length <span class="token operator">==</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>                Position <span class="token operator">=</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Writer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                m_Writer <span class="token operator">=</span> fileInfo<span class="token punctuation">.</span><span class="token function">OpenWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Position <span class="token operator">=</span> m_Writer<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Info<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"Invalid Range [</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position </span><span class="token punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position <span class="token operator">+</span> Info<span class="token punctuation">.</span>Size</span><span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token punctuation">;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Position <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> m_Writer<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>End<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Info<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"Invalid Range [</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position </span><span class="token punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position <span class="token operator">+</span> Info<span class="token punctuation">.</span>Size</span><span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token punctuation">;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Info<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"Invalid Range [</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position </span><span class="token punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position <span class="token operator">+</span> Info<span class="token punctuation">.</span>Size</span><span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token punctuation">;</span>                Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">var</span></span> dir <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetDirectoryName</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>SavePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Writer <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>SavePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        m_Request <span class="token operator">=</span> <span class="token function">CreateHttpWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Progressing<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Request<span class="token punctuation">.</span>isDone <span class="token operator">&amp;&amp;</span> m_Request<span class="token punctuation">.</span>downloadedBytes <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">ulong</span><span class="token punctuation">)</span>Info<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> <span class="token string">"unknown error: downloadedBytes &lt; len"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>m_Request<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Error <span class="token operator">=</span> m_Request<span class="token punctuation">.</span>error<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Error <span class="token operator">=</span> <span class="token string">"User Cancel."</span><span class="token punctuation">;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Failed<span class="token punctuation">;</span>        <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Completed <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">Completed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Completed <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name">UnityWebRequest</span> <span class="token function">CreateHttpWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> UnityWebRequest<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span>DownloadUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span>downloadHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyDownloadScript</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m_ReadBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">from</span> <span class="token operator">=</span> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Position<span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> to <span class="token operator">=</span> Info<span class="token punctuation">.</span>Offset <span class="token operator">+</span> Info<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">SetRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Range"</span><span class="token punctuation">,</span> <span class="token string">"bytes="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">SendWebRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO 加上超时</span>        <span class="token comment">//m_Request.Timeout = 1000000; // 默认是1000s</span>        <span class="token keyword">return</span> request<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Writer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_Writer<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Writer<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Writer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Request <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_Request<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Request<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Request <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Wait<span class="token punctuation">;</span>        <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> Handler</span>    <span class="token keyword">internal</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ReceiveData</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> buffer<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> dataLength<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>m_Request<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Error <span class="token operator">=</span> m_Request<span class="token punctuation">.</span>error<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        m_Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dataLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        Position <span class="token operator">+=</span> dataLength<span class="token punctuation">;</span>        <span class="token keyword">return</span> Status <span class="token operator">==</span> EDownloadStatus<span class="token punctuation">.</span>Progressing<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">internal</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CompleteContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Status <span class="token operator">=</span> EDownloadStatus<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>        <span class="token function">CloseWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> IEnumerator Impl</span>    <span class="token return-type class-name"><span class="token keyword">bool</span></span> IEnumerator<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>IsDone<span class="token punctuation">;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> IEnumerator<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">object</span></span> IEnumerator<span class="token punctuation">.</span>Current <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span class="token punctuation">&#125;</span></code></pre><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>TODO</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/xasset/xasset">XAsset</a></p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ugui组件绑定和代码生成</title>
      <link href="/2021/10/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/ugui%E7%BB%84%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/"/>
      <url>/2021/10/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/ugui%E7%BB%84%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>基于ET <code>ReferenceCollector</code> 的UI代码自动生成</p><h2 id="生成细节"><a href="#生成细节" class="headerlink" title="生成细节"></a>生成细节</h2><ol><li>配置ui类型，使用反射获取<code>字符串-ui类型</code> 键值对。使用接口反射的目的是为了分程序集，可以方便每个项目自定义扩展。</li><li>根据1中的配置，递归收集字段实例，并序列化到容器中，得到 <code>字符串-ui组件实例</code> 键值对。</li><li>根据键值对生成代码。利用partial技术，以及uibinder(Mono脚本)直接引用uiscript，可有效简化操作，适应大多数情况。要扩展到lua，也非常容易。</li></ol><h2 id="补上代码"><a href="#补上代码" class="headerlink" title="补上代码"></a>补上代码</h2><img src="pic0.png" loading="lazy"><img src="pic1.png" loading="lazy"><img src="pic2.png" loading="lazy"><img src="pic3.png" loading="lazy"><img src="pic4.png" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ugui </tag>
            
            <tag> codegen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buff的设计与实现</title>
      <link href="/2021/09/06/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/buff%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/09/06/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/buff%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>buff处理自身的生命周期、叠加，数值，状态外，还响应任何模块的事件。</p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ul><li>状态应用</li><li>属性应用</li><li>堆叠效果</li><li>堆叠溢出效果（堆叠满了，触发额外效果）</li><li>整体runtime框架定下来后，整理数据表结构</li></ul><h1 id="思考，尝试"><a href="#思考，尝试" class="headerlink" title="思考，尝试"></a>思考，尝试</h1><ul><li>如何设计游戏事件，提高buff系统的健壮性、扩展性</li></ul><h3 id="实现样板"><a href="#实现样板" class="headerlink" title="实现样板"></a>实现样板</h3><ul><li>dot效果。燃烧，每秒掉xx血。</li><li>受到攻击后，触发事件。反击螺旋、人马皮。</li><li>宙斯c。弹道弹射，伤害递减。</li><li>辉耀。一定范围，每x秒aoe伤害、攻击miss。</li><li>死骑被动，一定时间攻击三次目标，目标会受到额外伤害，沉默和减速。</li></ul>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
          <category> gameplay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gameplay </tag>
            
            <tag> gamedev </tag>
            
            <tag> gameplaytag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo!</title>
      <link href="/2021/03/21/hello-hexo!/"/>
      <url>/2021/03/21/hello-hexo!/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>$ hexo new post -p <span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo s$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo g$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo d$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="Markdown-test"><a href="#Markdown-test" class="headerlink" title="Markdown test"></a>Markdown test</h2><h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><ul><li>支持“标准”Markdown / CommonMark和Github风格的语法，也可变身为代码编辑器；</li><li>支持实时预览、图片（跨域）上传、预格式文本/代码/表格插入、代码折叠、搜索替换、只读模式、自定义样式主题和多语言语法高亮等功能；</li><li>支持ToC（Table of Contents）、Emoji表情、Task lists、@链接等Markdown扩展语法；</li><li>支持TeX科学公式（基于KaTeX）、流程图 Flowchart 和 时序图 Sequence Diagram;</li><li>支持识别和解析HTML标签，并且支持自定义过滤标签解析，具有可靠的安全性和几乎无限的扩展性；</li><li>支持 AMD / CMD 模块化加载（支持 Require.js &amp; Sea.js），并且支持自定义扩展插件；</li><li>兼容主流的浏览器（IE8+）和Zepto.js，且支持iPad等平板设备；</li><li>支持自定义主题样式；</li></ul><h1 id="Editor-md"><a href="#Editor-md" class="headerlink" title="Editor.md"></a>Editor.md</h1><p><img src="https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png" loading="lazy"></p><p><img src="https://img.shields.io/github/stars/pandao/editor.md.svg" loading="lazy"> <img src="https://img.shields.io/github/forks/pandao/editor.md.svg" loading="lazy"> <img src="https://img.shields.io/github/tag/pandao/editor.md.svg" loading="lazy"> <img src="https://img.shields.io/github/release/pandao/editor.md.svg" loading="lazy"> <img src="https://img.shields.io/github/issues/pandao/editor.md.svg" loading="lazy"> <img src="https://img.shields.io/bower/v/editor.md.svg" loading="lazy"></p><p><strong>目录 (Table of Contents)</strong></p><ul><li><a href="#editormd">Editor.md</a></li><li><a href="#heading-1">Heading 1</a><ul><li><a href="#heading-2">Heading 2</a><ul><li><a href="#heading-3">Heading 3</a><ul><li><a href="#heading-4">Heading 4</a><ul><li><a href="#heading-5">Heading 5</a><ul><li><a href="#heading-6">Heading 6</a></li></ul></li></ul></li></ul></li></ul></li></ul></li><li><a href="#heading-1-link-heading-link">Heading 1 link Heading link</a><ul><li><a href="#heading-2-link-heading-link">Heading 2 link Heading link</a><ul><li><a href="#heading-3-link-heading-link">Heading 3 link Heading link</a><ul><li><a href="#heading-4-link-heading-link-heading-link-heading-link">Heading 4 link Heading link Heading link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></a><ul><li><a href="#heading-5-link-heading-link">Heading 5 link Heading link</a><ul><li><a href="#heading-6-link-heading-link">Heading 6 link Heading link</a></li></ul></li></ul></li><li><a href="#%E6%A0%87%E9%A2%98%E7%94%A8%E5%BA%95%E7%BA%BF%E7%9A%84%E5%BD%A2%E5%BC%8Fheading-underline">标题（用底线的形式）Heading (underline)</a></li></ul></li></ul></li></ul></li><li><a href="#this-is-an-h1">This is an H1</a><ul><li><a href="#this-is-an-h2">This is an H2</a><ul><li><a href="#%E5%AD%97%E7%AC%A6%E6%95%88%E6%9E%9C%E5%92%8C%E6%A8%AA%E7%BA%BF%E7%AD%89">字符效果和横线等</a></li><li><a href="#%E5%BC%95%E7%94%A8-blockquotes">引用 Blockquotes</a></li><li><a href="#%E9%94%9A%E7%82%B9%E4%B8%8E%E9%93%BE%E6%8E%A5-links">锚点与链接 Links</a></li><li><a href="#%E5%A4%9A%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE-codes">多语言代码高亮 Codes</a><ul><li><a href="#%E8%A1%8C%E5%86%85%E4%BB%A3%E7%A0%81-inline-code">行内代码 Inline code</a></li><li><a href="#%E7%BC%A9%E8%BF%9B%E9%A3%8E%E6%A0%BC">缩进风格</a></li><li><a href="#%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE">代码高亮</a></li></ul></li><li><a href="#%E5%9B%BE%E7%89%87-images">图片 Images</a></li><li><a href="#%E5%88%97%E8%A1%A8-lists">列表 Lists</a><ul><li><a href="#%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8%E5%87%8F%E5%8F%B7unordered-lists--">无序列表（减号）Unordered Lists (-)</a></li><li><a href="#%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8%E6%98%9F%E5%8F%B7unordered-lists-">无序列表（星号）Unordered Lists (*)</a></li><li><a href="#%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8%E5%8A%A0%E5%8F%B7%E5%92%8C%E5%B5%8C%E5%A5%97unordered-lists-">无序列表（加号和嵌套）Unordered Lists (+)</a></li><li><a href="#%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8-ordered-lists--">有序列表 Ordered Lists (-)</a></li><li><a href="#gfm-task-list">GFM task list</a></li></ul></li><li><a href="#%E7%BB%98%E5%88%B6%E8%A1%A8%E6%A0%BC-tables">绘制表格 Tables</a><ul><li><a href="#%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7-html-entities-codes">特殊符号 HTML Entities Codes</a></li></ul></li><li><a href="#emoji%E8%A1%A8%E6%83%85-smiley">Emoji表情 :smiley:</a><ul><li><a href="#gfm-task-lists--emoji--fontawesome-icon-emoji--editormd-logo-emoji-editormd-logo-5x">GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</a></li><li><a href="#%E5%8F%8D%E6%96%9C%E6%9D%A0-escape">反斜杠 Escape</a></li></ul></li><li><a href="#%E7%A7%91%E5%AD%A6%E5%85%AC%E5%BC%8F-texkatex">科学公式 TeX(KaTeX)</a></li><li><a href="#%E7%BB%98%E5%88%B6%E7%B1%BB%E5%9B%BE-class-diagram">绘制类图 Class Diagram</a></li><li><a href="#%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE-flowchart">绘制流程图 Flowchart</a></li><li><a href="#%E7%BB%98%E5%88%B6%E5%BA%8F%E5%88%97%E5%9B%BE-sequence-diagram">绘制序列图 Sequence Diagram</a></li><li><a href="#end">End</a></li></ul></li><li><a href="#httpspandaogithubioeditormd">https://pandao.github.io/editor.md/</a></li></ul></li></ul><h1 id="Heading-1"><a href="#Heading-1" class="headerlink" title="Heading 1"></a>Heading 1</h1><h2 id="Heading-2"><a href="#Heading-2" class="headerlink" title="Heading 2"></a>Heading 2</h2><h3 id="Heading-3"><a href="#Heading-3" class="headerlink" title="Heading 3"></a>Heading 3</h3><h4 id="Heading-4"><a href="#Heading-4" class="headerlink" title="Heading 4"></a>Heading 4</h4><h5 id="Heading-5"><a href="#Heading-5" class="headerlink" title="Heading 5"></a>Heading 5</h5><h6 id="Heading-6"><a href="#Heading-6" class="headerlink" title="Heading 6"></a>Heading 6</h6><h1 id="Heading-1-link-Heading-link"><a href="#Heading-1-link-Heading-link" class="headerlink" title="Heading 1 link Heading link"></a>Heading 1 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h1><h2 id="Heading-2-link-Heading-link"><a href="#Heading-2-link-Heading-link" class="headerlink" title="Heading 2 link Heading link"></a>Heading 2 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h2><h3 id="Heading-3-link-Heading-link"><a href="#Heading-3-link-Heading-link" class="headerlink" title="Heading 3 link Heading link"></a>Heading 3 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h3><h4 id="Heading-4-link-Heading-link-Heading-link-Heading-link"><a href="#Heading-4-link-Heading-link-Heading-link-Heading-link" class="headerlink" title="Heading 4 link Heading link Heading link Heading link"></a>Heading 4 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a> Heading link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h4><h5 id="Heading-5-link-Heading-link"><a href="#Heading-5-link-Heading-link" class="headerlink" title="Heading 5 link Heading link"></a>Heading 5 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h5><h6 id="Heading-6-link-Heading-link"><a href="#Heading-6-link-Heading-link" class="headerlink" title="Heading 6 link Heading link"></a>Heading 6 link <a href="https://github.com/pandao/editor.md" title="Heading link">Heading link</a></h6><h4 id="标题（用底线的形式）Heading-underline"><a href="#标题（用底线的形式）Heading-underline" class="headerlink" title="标题（用底线的形式）Heading (underline)"></a>标题（用底线的形式）Heading (underline)</h4><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h3 id="字符效果和横线等"><a href="#字符效果和横线等" class="headerlink" title="字符效果和横线等"></a>字符效果和横线等</h3><hr><p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><em><strong>粗斜体</strong></em> <em><strong>粗斜体</strong></em></p><p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p><p><strong>缩写(同HTML的abbr标签)</strong></p><blockquote><p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p></blockquote><p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p><h3 id="引用-Blockquotes"><a href="#引用-Blockquotes" class="headerlink" title="引用 Blockquotes"></a>引用 Blockquotes</h3><blockquote><p>引用文本 Blockquotes</p></blockquote><p>引用的行内混合 Blockquotes</p><blockquote><p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href="http://localhost/">普通链接</a>。</p></blockquote><h3 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h3><p><a href="http://localhost/">普通链接</a></p><p><a href="http://localhost/" title="普通链接带标题">普通链接带标题</a></p><p>直接链接：<a href="https://github.com/">https://github.com</a></p><p><a href="http://www.this-anchor-link.com/">锚点链接</a></p><p>GFM a-tail link @pandao</p><blockquote><p>@pandao</p></blockquote><h3 id="多语言代码高亮-Codes"><a href="#多语言代码高亮-Codes" class="headerlink" title="多语言代码高亮 Codes"></a>多语言代码高亮 Codes</h3><h4 id="行内代码-Inline-code"><a href="#行内代码-Inline-code" class="headerlink" title="行内代码 Inline code"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p><h4 id="缩进风格"><a href="#缩进风格" class="headerlink" title="缩进风格"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似<code>&lt;pre&gt;</code>预格式化文本(Preformatted Text)的功能。</p><pre><code>&lt;?php    echo &quot;Hello world!&quot;;?&gt;</code></pre><p>预格式化文本：</p><pre><code>| First Header | Second Header || ------------ | ------------- || Content Cell | Content Cell  || Content Cell | Content Cell  |</code></pre><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello Hexo!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello Hexo!\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="图片-Images"><a href="#图片-Images" class="headerlink" title="图片 Images"></a>图片 Images</h3><p>Image:</p><p><img src="https://pandao.github.io/editor.md/examples/images/4.jpg" loading="lazy"></p><blockquote><p>Follow your heart.</p></blockquote><p><img src="https://pandao.github.io/editor.md/examples/images/8.jpg" loading="lazy"></p><blockquote><p>图为：厦门白城沙滩</p></blockquote><p>图片加链接 (Image + Link)：</p><p><a href="https://pandao.github.io/editor.md/examples/images/7.jpg" title="李健首张专辑《似水流年》封面"><img src="https://pandao.github.io/editor.md/examples/images/7.jpg" loading="lazy"></a></p><blockquote><p>图为：李健首张专辑《似水流年》封面</p></blockquote><hr><h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="无序列表（减号）Unordered-Lists"><a href="#无序列表（减号）Unordered-Lists" class="headerlink" title="无序列表（减号）Unordered Lists (-)"></a>无序列表（减号）Unordered Lists (-)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（星号）Unordered-Lists"><a href="#无序列表（星号）Unordered-Lists" class="headerlink" title="无序列表（星号）Unordered Lists (*)"></a>无序列表（星号）Unordered Lists (*)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（加号和嵌套）Unordered-Lists"><a href="#无序列表（加号和嵌套）Unordered-Lists" class="headerlink" title="无序列表（加号和嵌套）Unordered Lists (+)"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul><li>列表一</li><li>列表二<ul><li>列表二-1</li><li>列表二-2</li><li>列表二-3</li></ul></li><li>列表三<ul><li>列表一</li><li>列表二</li><li>列表三</li></ul></li></ul><h4 id="有序列表-Ordered-Lists"><a href="#有序列表-Ordered-Lists" class="headerlink" title="有序列表 Ordered Lists (-)"></a>有序列表 Ordered Lists (-)</h4><ol><li>第一行</li><li>第二行</li><li>第三行</li></ol><h4 id="GFM-task-list"><a href="#GFM-task-list" class="headerlink" title="GFM task list"></a>GFM task list</h4><ul><li><input checked="" disabled="" type="checkbox"> GFM task list 1</li><li><input checked="" disabled="" type="checkbox"> GFM task list 2</li><li><input disabled="" type="checkbox"> GFM task list 3<ul><li><input disabled="" type="checkbox"> GFM task list 3-1</li><li><input disabled="" type="checkbox"> GFM task list 3-2</li><li><input disabled="" type="checkbox"> GFM task list 3-3</li></ul></li><li><input disabled="" type="checkbox"> GFM task list 4<ul><li><input disabled="" type="checkbox"> GFM task list 4-1</li><li><input disabled="" type="checkbox"> GFM task list 4-2</li></ul></li></ul><hr><h3 id="绘制表格-Tables"><a href="#绘制表格-Tables" class="headerlink" title="绘制表格 Tables"></a>绘制表格 Tables</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>Function name</th><th>Description</th></tr></thead><tbody><tr><td><code>help()</code></td><td>Display the help window.</td></tr><tr><td><code>destroy()</code></td><td><strong>Destroy your computer!</strong></td></tr></tbody></table><table><thead><tr><th align="left">Left-Aligned</th><th align="center">Center Aligned</th><th align="right">Right Aligned</th></tr></thead><tbody><tr><td align="left">col 3 is</td><td align="center">some wordy text</td><td align="right">$1600</td></tr><tr><td align="left">col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td align="left">zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><table><thead><tr><th>Item</th><th align="right">Value</th></tr></thead><tbody><tr><td>Computer</td><td align="right">$1600</td></tr><tr><td>Phone</td><td align="right">$12</td></tr><tr><td>Pipe</td><td align="right">$1</td></tr></tbody></table><hr><h4 id="特殊符号-HTML-Entities-Codes"><a href="#特殊符号-HTML-Entities-Codes" class="headerlink" title="特殊符号 HTML Entities Codes"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;</p><p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p><p>18&ordm;C  &quot;  &apos;</p><h3 id="Emoji表情-smiley"><a href="#Emoji表情-smiley" class="headerlink" title="Emoji表情 :smiley:"></a>Emoji表情 :smiley:</h3><blockquote><p>Blockquotes :star:</p></blockquote><h4 id="GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x"><a href="#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x" class="headerlink" title="GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul><li><input checked="" disabled="" type="checkbox"> :smiley: @mentions, :smiley: #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li><li><input checked="" disabled="" type="checkbox"> list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li><li><input checked="" disabled="" type="checkbox"> [ ] :smiley: this is a complete item :smiley:;</li><li><input disabled="" type="checkbox"> []this is an incomplete item <a href="#">test link</a> :fa-star: @pandao;</li><li><input disabled="" type="checkbox"> [ ]this is an incomplete item :fa-star: :fa-gear:;<ul><li><input disabled="" type="checkbox"> :smiley: this is an incomplete item <a href="#">test link</a> :fa-star: :fa-gear:;</li><li><input disabled="" type="checkbox"> :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href="#">test link</a>;</li></ul></li></ul><h4 id="反斜杠-Escape"><a href="#反斜杠-Escape" class="headerlink" title="反斜杠 Escape"></a>反斜杠 Escape</h4><p>*literal asterisks*</p><h3 id="科学公式-TeX-KaTeX"><a href="#科学公式-TeX-KaTeX" class="headerlink" title="科学公式 TeX(KaTeX)"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p><p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p><p>$$(\sqrt{3x-1}+(1+x)^2)$$</p><p>$$\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i + \cos(f))$$</p><p>多行公式：</p><div>$$\displaystyle\left( \sum\_{k=1}^n a\_k b\_k \right)^2\leq\left( \sum\_{k=1}^n a\_k^2 \right)\left( \sum\_{k=1}^n b\_k^2 \right)$$</div><div>$$\displaystyle    \frac{1}{        \Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{        \frac25 \pi}} = 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {        1+\frac{e^{-6\pi}}        {1+\frac{e^{-8\pi}}         {1+\cdots} }        }    }$$</div><div>$$f(x) = \int_{-\infty}^\infty    \hat f(\xi)\,e^{2 \pi i \xi x}    \,d\xi$$</div><h3 id="绘制类图-Class-Diagram"><a href="#绘制类图-Class-Diagram" class="headerlink" title="绘制类图 Class Diagram"></a>绘制类图 Class Diagram</h3><div class="mermaid">classDiagramClass01 <|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --> C2 : Where am i?Class09 --* C3Class09 --|> Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 <--> C2: Cool label</div><h3 id="绘制流程图-Flowchart"><a href="#绘制流程图-Flowchart" class="headerlink" title="绘制流程图 Flowchart"></a>绘制流程图 Flowchart</h3><div class="mermaid">graph TD;    A-->B;    A-->C;    B-->D;    C-->D;</div><h3 id="绘制序列图-Sequence-Diagram"><a href="#绘制序列图-Sequence-Diagram" class="headerlink" title="绘制序列图 Sequence Diagram"></a>绘制序列图 Sequence Diagram</h3><div class="mermaid">sequenceDiagramAndrew->China: Says HelloNote right of China: China thinks\nabout itChina-->Andrew: How are you?Andrew->>China: I am good thanks!</div><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><h2 id="https-pandao-github-io-editor-md"><a href="#https-pandao-github-io-editor-md" class="headerlink" title="https://pandao.github.io/editor.md/"></a><a href="https://pandao.github.io/editor.md/">https://pandao.github.io/editor.md/</a></h2>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>minheap</title>
      <link href="/2021/03/13/unity/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/minheap/"/>
      <url>/2021/03/13/unity/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/minheap/</url>
      
        <content type="html"><![CDATA[<p>TODO</p>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Moon Game Framework</title>
      <link href="/2021/03/09/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/moon-game-framework/"/>
      <url>/2021/03/09/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/moon-game-framework/</url>
      
        <content type="html"><![CDATA[<p>async all，一切基于异步。</p><h2 id="始于Main，起于FGame"><a href="#始于Main，起于FGame" class="headerlink" title="始于Main，起于FGame"></a>始于Main，起于FGame</h2><p>Main脚本继承Monobehaviour，是程序入口。提供Mono事件回调，Awake、Update、LateUpdate、FixedUdpate、OnGUI等等Monobehaviour事件，以及协程管理。</p><p>FGame则是实际游戏逻辑的起点，基于ET框架的ECS架构（但本框架只当成EC来使用），Component、Entity可以挂载在FGame上面。基于ET的异步事件框架，可以异步起动AppStart事件，即游戏自定义的各种逻辑入口。</p><p>TODO</p><ul><li>程序入口</li><li>类图</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> unity gamedev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据的编辑和读写</title>
      <link href="/2021/02/20/unity/%E7%BC%96%E8%BE%91%E5%99%A8%E6%89%A9%E5%B1%95/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BC%96%E8%BE%91%E5%92%8C%E8%AF%BB%E5%86%99/"/>
      <url>/2021/02/20/unity/%E7%BC%96%E8%BE%91%E5%99%A8%E6%89%A9%E5%B1%95/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BC%96%E8%BE%91%E5%92%8C%E8%AF%BB%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>在游戏开发中，必定会有数据编辑、保存和读取。需要兼顾<code>开发效率、运行效率和兼容性</code>。</p><img src="/img/index/数据的编辑和读写.png" loading="lazy"><h2 id="数据的显示、编辑"><a href="#数据的显示、编辑" class="headerlink" title="数据的显示、编辑"></a>数据的显示、编辑</h2><p>unity的内置序列化还是比较好用的，所见即所得，但有个比较蛋疼的地方，不支持<code>接口、多态对象</code>。在设计数据结构的时候，如果没有多态，将会有很多数据冗余。。。</p><p>在unity2020版本中，多了一个<code>SerializeReference</code>特性，可以帮助我们显示多态数据，但也有个比较蛋疼的地方，它只能显示，不能编辑，你说艹蛋不艹蛋🙄，做功能只做一半之unity。</p><p>这里，我们使用Odin插件。如果没有Odin，可以考虑<a href="https://github.com/TextusGames/UnitySerializedReferenceUI">UnitySerializedReferenceUI</a>。有了上面的基础，就可以在编辑器下快速创建、删除多态对象了！</p><h3 id="不使用多态"><a href="#不使用多态" class="headerlink" title="不使用多态"></a>不使用多态</h3><pre class="language-cs" data-language="cs"><code class="language-cs"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">data</span><span class="token punctuation">&#123;</span>    <span class="token comment">// event id</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> id<span class="token punctuation">;</span>    <span class="token comment">// animation event parameter</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> animationName<span class="token punctuation">;</span>    <span class="token comment">// sound event parameter</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> soundName<span class="token punctuation">;</span>    <span class="token comment">// more and more...</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">table</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>data<span class="token punctuation">></span></span> datas<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>动画事件只会用到animationName，声音事件只会用到soundName，但每个data都包含了其他无用字段，这真是太。。。</p><p>如果在unityeditor下编辑，还得根据事件类型做switch case，只在面板中只曝露出有用的参数。。。不然。。。</p><p>如果采用json、xml之类自动化的方式来保存，那无用的参数就全进文本了。。。手写parser？那慢慢写吧。。。</p><h3 id="使用多态"><a href="#使用多态" class="headerlink" title="使用多态"></a>使用多态</h3><pre class="language-cs" data-language="cs"><code class="language-cs"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">data</span><span class="token punctuation">&#123;</span>    <span class="token comment">// event id</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">uint</span></span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">animation_data</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">data</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// animation event parameter</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> animationName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">sound_data</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">data</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// sound event parameter</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> soundName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// more and more...</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">table</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>data<span class="token punctuation">></span></span> datas<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这样数据结构看起来就清晰多了，而且不会存储不必要的东西！文件大小、内存大小都会降低！也不用编写又臭又长的编辑器代码和序列化代码！</p><h2 id="数据的读写"><a href="#数据的读写" class="headerlink" title="数据的读写"></a>数据的读写</h2><p>处理了显示、编辑的问题，另一个问题就是编辑器读取，以及运行时读写的问题了，不过一般运行时只考虑读。</p><p>序列化库可以先选用 json.net 或者 protobuf.net，都支持多态序列化。</p><p>数据的读写有个问题，我们可能在开发过程中修改数据结构，可能有以下几种问题：</p><ol><li>字段名改变</li><li>基元类型改变，如，int-&gt;string</li><li>容器类型改变，如，list-&gt;dictionary</li><li>数据结构类改版，如，classA包含a、b、c，现要改为classA包含classB，classB包含a、b、c</li></ol><p>出现上述问题后，plan A，手动检查，重新弄。<s>策划：头伸过来，我给你加个buff。</s>哈哈哈~</p><p>plan B，使用序列化库解决：</p><ol><li>字段名改变<br> protobuf使用int作为key，仅改变字段名，没有任何影响。<br> json.net则使用JsonProperty即可指定名称，类似unity的SerializeAs。</li><li>剩下所有，可以考虑如下方案<br>被<code>（ProtoAfterDeserializaton、ProtoBeforeDeserializaton）、（OnSerializing、OnDeserialized）</code>等特性标记的方法可以在对应时机的被反射调用，所以利用这个，我们可以编写兼容代码，来最大化保证数据的兼容性！</li></ol><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>Q: SerializeReference 在类名修改后，可能会出现报错，且编辑器下ScriptableObject无法保存。</p><p>A: 由于我们是序列化成自己的数据文件了，则可以删掉后，再重新生成ScriptableObject</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>有了以上基础，即可在unity里编辑逻辑数据，从了避免在excel里抽象数据结构了。</p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> gamedev </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
