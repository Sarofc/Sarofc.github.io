<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>用户类持有池对象引用问题</title>
    <link href="/2022/01/22/unity/%E5%85%B6%E4%BB%96/%E7%94%A8%E6%88%B7%E7%B1%BB%E6%8C%81%E6%9C%89%E6%B1%A0%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <url>/2022/01/22/unity/%E5%85%B6%E4%BB%96/%E7%94%A8%E6%88%B7%E7%B1%BB%E6%8C%81%E6%9C%89%E6%B1%A0%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>通常游戏开发，带gc的语言，频繁创建的小对象，都会考虑用对象池优化，从而减少gc耗时，内存碎片。但是对象池管理不当，是非常危险的，而且会增加编码难度，可能使原本易于维护的代码变得复杂化。</p><p>用户案例，用户类需要持有<code>池对象A</code>的引用，进行一些操作，但<code>池对象A</code>可能随时被回收掉，或者回收后再利用了，这时候再通过<code>池对象A</code>的引用来使用，就会出现非常严重得错误。</p><p>上述用户案例中，池对象的生命周期可能很难控制，变得难以维护，但有时候又有这种需求，又想享受对象池带来的性能提升。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight csharp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// struct实现，避免分配堆内存</span><br><span class="hljs-comment">// 实现IEquatable接口，重写HashCode方法，可用于字典，而没有额外内存分配</span><br><span class="hljs-comment">// 重写操作符，方便使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> ObjectHandle : IEquatable&lt;ObjectHandle&gt;<br>&#123;<br>    <span class="hljs-comment">// 池对象维护一个ObjectID，每次生成对象时，全局自增</span><br>    <span class="hljs-keyword">public</span> Object Object &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Handle =&gt; m_CachedObjectID;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">int</span> m_CachedObjectID; <span class="hljs-comment">// 从1开始有效，0无效</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ObjectHandle</span>(<span class="hljs-params">Object Object</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 创建一个Handle，记录当前对象的引用，以及ObjectID</span><br>        Object = Object;<br>        m_CachedObjectID = Object.ObjectID;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsValid</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// 对象不为空，且对象的ObjectID等于创建Handle时的ObjectID，才会认为对象可操作，否则，不应该再操作此对象了</span><br>        <span class="hljs-keyword">return</span> Object != <span class="hljs-literal">null</span> &amp;&amp; m_CachedObjectID == Object.ObjectID;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">implicit</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">bool</span>(<span class="hljs-params">ObjectHandle handle</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">return</span> handle.IsValid();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">explicit</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">Object</span>(<span class="hljs-params">ObjectHandle handle</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">return</span> handle ? handle.Object : <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">Equals</span>(<span class="hljs-params">ObjectHandle other</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">return</span> CompareObjects(<span class="hljs-keyword">this</span>, other);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">Equals</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (!(obj <span class="hljs-keyword">is</span> ObjectHandle)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> Equals((ObjectHandle)obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-keyword">operator</span> ==(ObjectHandle lhs, ObjectHandle rhs)<br>    &#123;<br>        <span class="hljs-keyword">return</span> CompareObjects(lhs, rhs);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-keyword">operator</span> !=(ObjectHandle lhs, ObjectHandle rhs)<br>    &#123;<br>        <span class="hljs-keyword">return</span> !CompareObjects(lhs, rhs);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">CompareObjects</span>(<span class="hljs-params">ObjectHandle lhs, ObjectHandle rhs</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">var</span> validA = lhs.IsValid();<br>        <span class="hljs-keyword">var</span> validB = rhs.IsValid();<br><br>        <span class="hljs-keyword">if</span> (validA &amp;&amp; !validB) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (!validA &amp;&amp; validB) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> lhs.m_CachedObjectID == rhs.m_CachedObjectID;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetHashCode</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">return</span> m_CachedObjectID;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>unity引擎的gc算法(BOEHM GC)过于古老，即使多了分帧机制，总gc时长并未被减少，甚至可能还增加了，对象池的使用还是很有必要。</p><p>capcom的re引擎，也是c#作为脚本，也是il2cpp技术，但是gc的效率非常高，即使ps4上每帧分配300k左右的托管堆内存，每帧gc耗时依然可以保持0.2ms左右（cedec演讲，案例是鬼泣5）。这种gc作为后盾，开发效率可以大大提高！希望unity也能达到这种效果，造福广大开发者！</p>]]></content>
    
    
    <categories>
      
      <category>unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>object pool</tag>
      
      <tag>unity</tag>
      
      <tag>c#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据表</title>
    <link href="/2022/01/14/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E6%95%B0%E6%8D%AE%E8%A1%A8/"/>
    <url>/2022/01/14/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E6%95%B0%E6%8D%AE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Excel库调研"><a href="#Excel库调研" class="headerlink" title="Excel库调研"></a>Excel库调研</h2><table><thead><tr><th>库名</th><th>测试用例</th><th>效率</th></tr></thead><tbody><tr><td>ExcelDataReader</td><td>250excel文件，共计50w行</td><td>16000 ms</td></tr><tr><td>NPOI</td><td>250excel文件，共计50w行</td><td>60000 ms</td></tr><tr><td>EPPlus</td><td>250excel文件，共计50w行</td><td>60000 ms</td></tr></tbody></table><p>ExcelDataReader优势是可以按需读取，内存占用、读取效率都要比另外两个快，NPOI、EPPlus貌似只能全量读取</p><h2 id="使用yield-return"><a href="#使用yield-return" class="headerlink" title="使用yield return"></a>使用yield return</h2><p>测试发现 <code>yield return</code> 返回IEnumerable对象，读取Excel的IO效率会提高很多，从16000ms，到7000ms</p><p>以下代码，V1版本要比V2版本快将很多。</p><figure class="highlight csharp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IEnumerable&lt;ExcelData&gt; <span class="hljs-title">LoadExcel_V1</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> filePath</span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> stream = <span class="hljs-keyword">new</span> FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))<br>    &#123;<br>        <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> reader = ExcelReaderFactory.CreateReader(stream))<br>        &#123;<br>            <span class="hljs-keyword">var</span> counter = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">do</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (IsSheetNameValid(reader.Name))<br>                &#123;<br>                    counter++;<br>                    ExcelData data;<br>                    <span class="hljs-keyword">try</span><br>                    &#123;<br>                        Console.WriteLine(<span class="hljs-string">$&quot;parsing...... <span class="hljs-subst">&#123;reader.Name&#125;</span> (<span class="hljs-subst">&#123;counter&#125;</span>/<span class="hljs-subst">&#123;reader.ResultsCount&#125;</span>)&quot;</span>);<br>                        data = ParseExcel(reader);<br>                    &#125;<br>                    catch (Exception e)<br>                    &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">$&quot;excel:<span class="hljs-subst">&#123;filePath&#125;</span> sheet:<span class="hljs-subst">&#123;reader.Name&#125;</span> 读取失败.&quot;</span>, e);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (data != <span class="hljs-literal">null</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> data;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (reader.NextResult());<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IEnumerable&lt;ExcelData&gt; <span class="hljs-title">LoadExcel_V2</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> filePath</span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">var</span> ret = <span class="hljs-keyword">new</span> List&lt;ExcelData&gt;();<br>    <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> stream = <span class="hljs-keyword">new</span> FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))<br>    &#123;<br>        <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> reader = ExcelReaderFactory.CreateReader(stream))<br>        &#123;<br>            <span class="hljs-keyword">var</span> counter = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">do</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (IsSheetNameValid(reader.Name))<br>                &#123;<br>                    counter++;<br>                    ExcelData data;<br>                    <span class="hljs-keyword">try</span><br>                    &#123;<br>                        Console.WriteLine(<span class="hljs-string">$&quot;parsing...... <span class="hljs-subst">&#123;reader.Name&#125;</span> (<span class="hljs-subst">&#123;counter&#125;</span>/<span class="hljs-subst">&#123;reader.ResultsCount&#125;</span>)&quot;</span>);<br>                        data = ParseExcel(reader);<br>                    &#125;<br>                    catch (Exception e)<br>                    &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">$&quot;excel:<span class="hljs-subst">&#123;filePath&#125;</span> sheet:<span class="hljs-subst">&#123;reader.Name&#125;</span> 读取失败.&quot;</span>, e);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (data != <span class="hljs-literal">null</span>)<br>                    &#123;<br>                        ret.Add(data);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (reader.NextResult());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="yield-return-坑点"><a href="#yield-return-坑点" class="headerlink" title="yield return 坑点"></a>yield return 坑点</h2><p>本读表案例，多了一次forloop遍历，会多增加3000ms读表、解析表格耗时。7000ms上升到10000ms。</p><p>坑点可看以下代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestYield</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">IEnumerable&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">list</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;111&quot;</span>;<br>        Console.WriteLine(<span class="hljs-string">&quot;work&quot;</span>);<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;222&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> a = list();<br><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> a)<br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;outside loop: &quot;</span> + item);<br>    &#125;<br><br>    Process(a);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Process</span>(<span class="hljs-params">IEnumerable&lt;<span class="hljs-built_in">string</span>&gt; inData</span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> inData)<br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Process: &quot;</span> + item);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// result:</span><br><span class="hljs-comment">// outside loop: 111</span><br><span class="hljs-comment">// work</span><br><span class="hljs-comment">// outside loop: 222</span><br><br><span class="hljs-comment">// Process: 111</span><br><span class="hljs-comment">// work</span><br><span class="hljs-comment">// Process: 222</span><br><br><span class="hljs-comment">// 每次forloop，work都会被调用，需要尽量避免，特别是方法里有繁重逻辑</span><br></code></pre></td></tr></table></figure><h2 id="使用Span"><a href="#使用Span" class="headerlink" title="使用Span"></a>使用Span</h2><p>Span已是 <code>.Net Standard 2.1</code>的标准库的一部分，<code>2.0</code> 需要引入nuget才行。</p><p>Span(ref struct)为内存切片，是内存片段的封装，可以接住<code>栈内存</code>和<code>非托管堆内存</code>进行操作，<code>托管堆</code>则有另一个类型Memory来处理。以前版本，也可以开启unsafe直接使用指针操作，但是很危险，所以.net为了性能提供了这玩意儿，同时保证了代码安全。</p><p>Span能有效降低字符串SubString等操作的开销，不会生成新的字符串，减少gc。</p><p>但是Span对字符串操作，还没有提供Split方法，这个比较蛋疼。<br>使用这个<a href="https://github.com/dotnet/runtime/pull/295/files/2da605832d09f8bd046517b463652cc52ec6553e#diff-caa10aad67c342827c4ba85e5880f6d6b0ef93a8bbb0555669a885e1cc7bb082">ReadOnlySpan.Split</a>，性能比String.Split快一丢丢，也没有零时字符串生成了，但使用起来繁琐一些</p><p>MGF后续升级 .Net Standard 2.1后，也将会大量使用Span</p><h2 id="多key的实现"><a href="#多key的实现" class="headerlink" title="多key的实现"></a>多key的实现</h2><p>支持1到4个key作为数据行的索引，每个key(int)，但支持值得范围有限，最终合成唯一combinekey(ulong)，支持负数。</p><p>ulong为64bit。2个key，则int32和int32，合成64bit，3个key则，int32，int16，int16合成64bit。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">MethodImpl(MethodImplOptions.AggressiveInlining)</span>]<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">ulong</span> <span class="hljs-title">GetKey</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> key1, <span class="hljs-built_in">int</span> key2</span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (((<span class="hljs-built_in">ulong</span>)key1 &amp; <span class="hljs-number">0xffffffff</span>) | (((<span class="hljs-built_in">ulong</span>)key2 &amp; <span class="hljs-number">0xffffffff</span>) &lt;&lt; <span class="hljs-number">32</span>));<br>&#125;<br><br>[<span class="hljs-meta">MethodImpl(MethodImplOptions.AggressiveInlining)</span>]<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">ulong</span> <span class="hljs-title">GetKey</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> key1, <span class="hljs-built_in">int</span> key2, <span class="hljs-built_in">int</span> key3</span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">short</span> shortKey2 = System.Convert.ToInt16(key2);<br>    <span class="hljs-built_in">short</span> shortKey3 = System.Convert.ToInt16(key3);<br>    <span class="hljs-keyword">return</span> (((<span class="hljs-built_in">ulong</span>)key1 &amp; <span class="hljs-number">0xffffffff</span>) | (((<span class="hljs-built_in">ulong</span>)shortKey2 &amp; <span class="hljs-number">0xffff</span>) &lt;&lt; <span class="hljs-number">32</span>) | (((<span class="hljs-built_in">ulong</span>)shortKey3 &amp; <span class="hljs-number">0xffff</span>) &lt;&lt; <span class="hljs-number">48</span>));<br>&#125;<br><br>[<span class="hljs-meta">MethodImpl(MethodImplOptions.AggressiveInlining)</span>]<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">ulong</span> <span class="hljs-title">GetKey</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> key1, <span class="hljs-built_in">int</span> key2, <span class="hljs-built_in">int</span> key3, <span class="hljs-built_in">int</span> key4</span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">short</span> shortKey1 = System.Convert.ToInt16(key1);<br>    <span class="hljs-built_in">short</span> shortKey2 = System.Convert.ToInt16(key2);<br>    <span class="hljs-built_in">short</span> shortKey3 = System.Convert.ToInt16(key3);<br>    <span class="hljs-built_in">short</span> shortKey4 = System.Convert.ToInt16(key4);<br>    <span class="hljs-keyword">return</span> (((<span class="hljs-built_in">ulong</span>)shortKey1 &amp; <span class="hljs-number">0xffff</span>) | (((<span class="hljs-built_in">ulong</span>)shortKey2 &amp; <span class="hljs-number">0xffff</span>) &lt;&lt; <span class="hljs-number">16</span>) | (((<span class="hljs-built_in">ulong</span>)shortKey3 &amp; <span class="hljs-number">0xffff</span>) &lt;&lt; <span class="hljs-number">32</span>) | (((<span class="hljs-built_in">ulong</span>)shortKey4 &amp; <span class="hljs-number">0xffff</span>) &lt;&lt; <span class="hljs-number">48</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>使用CodeDom，部分代码片使用StringBuilder拼接。</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/Sarofc/GTable">https://github.com/Sarofc/GTable</a></p>]]></content>
    
    
    <categories>
      
      <category>unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>游戏性标签(GameplayTag)</title>
    <link href="/2022/01/09/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/%E6%B8%B8%E6%88%8F%E6%80%A7%E6%A0%87%E7%AD%BE/"/>
    <url>/2022/01/09/unity/%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95/%E6%B8%B8%E6%88%8F%E6%80%A7%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<p>在UE4中，层次化标签系统(GameplayTag)大量使用。树形结构，可替代枚举、一些变量，甚至能当成事件来传递。</p><p>设计如下标签，Buff.Strong.Stun、Buff.Weak.Fire、Buff.Weak.Ice。标签Buff.Weak.Fire、Buff.Weak.Ice，MatchesTag(“Buff.Weak”) 都会返回true。那么就可以很轻松的实现Buff驱散，而不用新增各种变量，来处理这些问题。所以GameplayTag的设计尤为重要。</p><p>很多buff都可能会给角色施加Stun效果，如果Stun状态仅仅为一个bool的话，buff的移除就要格外小心，而GameplayTagCountConainer则可以有效解决这个问题。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><img src="pic1.png"><ol><li>GameplayTag是struct，只保存TagName的TagHash(int)，作为Dictionary的Key是非常高效的。UE则是引擎FName直接实现的，也是hash字符串。</li><li>GameplayTagManager管理所有GameplayTagNode以及TagName，可以运行时获取GameplayTag以及TagName。解析TagAsset文本后，用Dictionary保存在内存里，用树形结构管理层级。树形结构可以方便的回溯，很容易实现层级化引用。</li><li>GameplayTagNode是class，被GameplayTagManager所管理，里面只存有GameplayTag和编辑器下才会有的注释信息，以及父节点和子节点引用。</li><li>GameplayTagContainer，是GameplayTag容器，List实现，可序列化，提供多项匹配。内部会额外存储parent节点，以加速匹配。</li><li>GameplayTagCountContainer，可以有效处理GameplayTag堆叠，并抛出对应的事件。内部维护两个Dictionary&lt;GameplayTag,int&gt;，分别处理<code>显式GameplayTag</code>，以及<code>GameplayTag</code>，举个例子，添加1个A.1，则<code>显式GameplayTag</code>只有{A.1,1}，<code>GameplayTag</code>则有{A,1}{A.1,1}，标签A也会被隐式添加。</li><li>GameplayTagAsset，序列化文件json。反序列化细节，使用 [UnityEditor.Callbacks.DidReloadScripts] 特性，来每次脚本编译后，重新反序列化一次TagAsset到内存里。也可以手动点击编辑器里的Load按钮，来刷新。</li></ol><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// json</span><br>&#123;<br>    <span class="hljs-attr">&quot;Tags&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;TagName&quot;</span>: <span class="hljs-string">&quot;A.1&quot;</span>,<br>            <span class="hljs-attr">&quot;DevComment&quot;</span>: <span class="hljs-string">&quot;test tag A.1&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;TagName&quot;</span>: <span class="hljs-string">&quot;B.1&quot;</span>,<br>            <span class="hljs-attr">&quot;DevComment&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;TagName&quot;</span>: <span class="hljs-string">&quot;B.2&quot;</span>,<br>            <span class="hljs-attr">&quot;DevComment&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>    ]<br>&#125;<br><br><span class="hljs-comment">// 内存布局</span><br>Root<br>   ├──A<br>   ├  └──A.1<br>   └──B<br>      ├──B.1<br>      └──B.2<br></code></pre></td></tr></table></figure><h2 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h2><table><thead><tr><th>Source</th><th>Function/Operation</th><th>Input Parameter</th><th>Return Value</th></tr></thead><tbody><tr><td>A.1</td><td>MatchesTag</td><td>A</td><td>true</td></tr><tr><td>A.1</td><td>MatchesTagExact (or ==)</td><td>A</td><td>false</td></tr><tr><td>A.1</td><td>MatchesAny</td><td>{A, C}</td><td>true</td></tr><tr><td>A.1</td><td>MatchesAnyExact</td><td>{A, C}</td><td>false</td></tr><tr><td>A.1</td><td>MatchesAll</td><td>{A}</td><td>true</td></tr><tr><td>A.1</td><td>MatchesAllExact</td><td>{A}</td><td>false</td></tr><tr><td>{A.1, B.1}</td><td>HasTag</td><td>A</td><td>true</td></tr><tr><td>{A.1, B.1}</td><td>HasTagExact</td><td>A</td><td>false</td></tr><tr><td>{A.1, B.1}</td><td>HasAny</td><td>{A, C}</td><td>true</td></tr><tr><td>{A.1, B.1}</td><td>HasAnyExact</td><td>{A, C}</td><td>false</td></tr><tr><td>{A.1, B.1}</td><td>HasAll</td><td>{A, B}</td><td>true</td></tr><tr><td>{A.1, B.1}</td><td>HasAllExact</td><td>{A, B}</td><td>false</td></tr></tbody></table><h2 id="编辑器支持"><a href="#编辑器支持" class="headerlink" title="编辑器支持"></a>编辑器支持</h2><ol><li>GameplayTag可以直接编辑Json文本，也可以在Editor面板里直接编辑。</li><li>Inspector面板可以直接选择对应的GameplayTag，Tag注释也会显示成Tooltip，并且Tag丢失时，会标红。</li></ol><p><img src="pic2.png" width="50%"><img src="pic0.png" width="50%"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>UE4 GameplayTag</p>]]></content>
    
    
    <categories>
      
      <category>unity</category>
      
      <category>gameplay</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gamedev</tag>
      
      <tag>gameplay</tag>
      
      <tag>gameplaytag</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件下载器</title>
    <link href="/2022/01/09/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    <url>/2022/01/09/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>基于 <code>HttpWebRequest</code> 和 <code>UnityWebRequest</code> 的多线程、断点续传文件下载器</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><img src="/img/index/文件下载器.png"><p><code>IDonwloadAgent</code>为下载器接口，目前有两种实现，HttpDownload和UnityWebRequestDownload，可以无缝切换。IDonwloadAgent继承IEnumerator接口，可以无缝接入unity协程、UniTask(Async)，实现非回调式异步等待，逻辑更清晰。IDonwloadAgent提供各种操作接口供Downloader调用，例如开始、暂停、重试、取消等等。</p><p><code>Downloader</code>为工厂模式实现，管理所有下载器实例，避免重复下载，等等。通过DownloadAsync(DownloadInfo)，即可异步下载文件。覆写s_OnDownloadAgentFactory委托，可以使用自定义IDownloadAgent实例。</p><h2 id="下载器实现"><a href="#下载器实现" class="headerlink" title="下载器实现"></a>下载器实现</h2><h3 id="HttpDownload"><a href="#HttpDownload" class="headerlink" title="HttpDownload"></a>HttpDownload</h3><ol><li>读取已下载文件流的Position，加上Http Range头，即可实现断点续传。</li><li>通过DownloadInfo中的Offset参数，加上Http Range头，即可切片下载。</li><li>每个HttpDownload都会使用c#线程池进行下载任务。（需注意unity切后台，线程终止问题，需要重新开启下载任务，否则下载器会假死，下载任务无法完成）</li><li>修改buffer大小，貌似可以达成限速效果。</li></ol><p>以下为完整实现</p><figure class="highlight csharp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></div></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HttpDownload</span> : <span class="hljs-title">IDownloadAgent</span><br>&#123;<br>    <span class="hljs-comment">// 通过buffer size 貌似可以限速？</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">long</span> s_ReadBufferSize = <span class="hljs-number">1024</span> * <span class="hljs-number">64</span>;<br><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">region</span> Instance</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">byte</span>[] m_ReadBuffer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[s_ReadBufferSize];<br>    <span class="hljs-keyword">private</span> FileStream m_Writer;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HttpDownload</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Status = EDownloadStatus.Wait;<br>        Position = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> DownloadInfo Info &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> EDownloadStatus Status &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Error &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> Action&lt;IDownloadAgent&gt; Completed;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> IsDone =&gt; Status == EDownloadStatus.Failed || Status == EDownloadStatus.Success;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Progress =&gt; Position * <span class="hljs-number">1f</span> / Info.Size;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">long</span> Position &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Retry</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Status = EDownloadStatus.Wait;<br>        Start();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Resume</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Retry();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Pause</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Status = EDownloadStatus.Wait;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Cancel</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Error = <span class="hljs-string">&quot;User Cancel.&quot;</span>;<br>        Status = EDownloadStatus.Failed;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Complete</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (Completed != <span class="hljs-literal">null</span>)<br>        &#123;<br>            Completed(<span class="hljs-keyword">this</span>);<br>            Completed = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span> &#123; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            Downloading();<br>            CloseWrite();<br><br>            <span class="hljs-keyword">if</span> (Status == EDownloadStatus.Wait) <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-keyword">if</span> (Status == EDownloadStatus.Failed) <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-keyword">if</span> (Position != Info.Size)<br>            &#123;<br>                Error = <span class="hljs-string">$&quot;Download length <span class="hljs-subst">&#123;Position&#125;</span> mismatch to <span class="hljs-subst">&#123;Info.Size&#125;</span>&quot;</span>;<br>                Status = EDownloadStatus.Failed;<br><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            Status = EDownloadStatus.Success;<br>        &#125;<br>        catch (Exception e)<br>        &#123;<br>            Error = e.Message;<br>            Status = EDownloadStatus.Failed;<br>        &#125;<br>        <span class="hljs-keyword">finally</span><br>        &#123;<br>            CloseWrite();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CloseWrite</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (m_Writer != <span class="hljs-literal">null</span>)<br>        &#123;<br>            m_Writer.Flush();<br>            m_Writer.Close();<br>            m_Writer = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">CheckValidationResult</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, X509Certificate certificate, X509Chain chain,</span></span><br><span class="hljs-function"><span class="hljs-params">        SslPolicyErrors spe</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Downloading</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-comment">// TODO</span><br>        <span class="hljs-comment">// 下载中，长时间没速度，也应该进行处理</span><br><br>        <span class="hljs-keyword">var</span> request = CreateWebRequest();<br>        <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> response = request.GetResponse())<br>        &#123;<br>            <span class="hljs-keyword">if</span> (response.ContentLength &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (Info.Size == <span class="hljs-number">0</span>) Info.Size = response.ContentLength + Position;<br><br>                <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> reader = response.GetResponseStream())<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (Position &lt; Info.Size)<br>                    &#123;<br>                        <span class="hljs-keyword">while</span> (Status == EDownloadStatus.Progressing)<br>                        &#123;<br>                            <span class="hljs-keyword">if</span> (ReadToEnd(reader))<br>                            &#123;<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                Status = EDownloadStatus.Success;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> WebRequest <span class="hljs-title">CreateWebRequest</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        WebRequest request;<br>        <span class="hljs-keyword">if</span> (Info.DownloadUrl.StartsWith(<span class="hljs-string">&quot;https&quot;</span>, StringComparison.OrdinalIgnoreCase))<br>        &#123;<br>            ServicePointManager.ServerCertificateValidationCallback = CheckValidationResult;<br>            request = GetHttpWebRequest();<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            request = GetHttpWebRequest();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> request;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> WebRequest <span class="hljs-title">GetHttpWebRequest</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">var</span> httpWebRequest = (HttpWebRequest)WebRequest.Create(Info.DownloadUrl);<br>        httpWebRequest.ProtocolVersion = HttpVersion.Version11;<br><br>        <span class="hljs-keyword">var</span> <span class="hljs-keyword">from</span> = Info.Offset + Position;<br>        <span class="hljs-keyword">var</span> to = Info.Offset + Info.Size;<br><br>        httpWebRequest.AddRange(<span class="hljs-keyword">from</span>, to);<br><br>        <span class="hljs-comment">// TODO 加上超时</span><br>        <span class="hljs-comment">//httpWebRequest.Timeout = 1000000; // 默认是1000s</span><br><br>        <span class="hljs-keyword">return</span> httpWebRequest;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">ReadToEnd</span>(<span class="hljs-params">Stream reader</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">var</span> len = reader.Read(m_ReadBuffer, <span class="hljs-number">0</span>, m_ReadBuffer.Length);<br>        <span class="hljs-keyword">if</span> (len &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            m_Writer.Write(m_ReadBuffer, <span class="hljs-number">0</span>, len);<br>            Position += len;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (Status != EDownloadStatus.Wait) <span class="hljs-keyword">return</span>;<br><br>        Status = EDownloadStatus.Progressing;<br>        <span class="hljs-keyword">var</span> fileInfo = <span class="hljs-keyword">new</span> FileInfo(Info.SavePath);<br><br>        <span class="hljs-keyword">if</span> (fileInfo.Exists &amp;&amp; fileInfo.Length &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (Info.Size &gt; <span class="hljs-number">0</span> &amp;&amp; fileInfo.Length == Info.Size)<br>            &#123;<br>                Status = EDownloadStatus.Success;<br>                Position = Info.Size;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// TODO</span><br>            <span class="hljs-comment">// issue：</span><br>            <span class="hljs-comment">// IOException: Sharing violation on path</span><br>            <span class="hljs-comment">// 文件读取了多次</span><br>            <span class="hljs-keyword">if</span> (m_Writer == <span class="hljs-literal">null</span>)<br>                m_Writer = fileInfo.OpenWrite();<br><br>            Position = m_Writer.Length - <span class="hljs-number">1</span>;<br><br>            <span class="hljs-keyword">if</span> (!Info.IsValid(Position))<br>            &#123;<br>                Error = <span class="hljs-string">$&quot;Invalid Range [<span class="hljs-subst">&#123;Info.Offset + Position &#125;</span>-<span class="hljs-subst">&#123; Info.Offset + Position + Info.Size&#125;</span>]&quot;</span>;<br>                Status = EDownloadStatus.Failed;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (Position &gt; <span class="hljs-number">0</span>) m_Writer.Seek(<span class="hljs-number">-1</span>, SeekOrigin.End);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!Info.IsValid(Position))<br>            &#123;<br>                Error = <span class="hljs-string">$&quot;Invalid Range [<span class="hljs-subst">&#123;Info.Offset + Position &#125;</span>-<span class="hljs-subst">&#123; Info.Offset + Position + Info.Size&#125;</span>]&quot;</span>;<br>                Status = EDownloadStatus.Failed;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br><br>            <span class="hljs-keyword">var</span> dir = Path.GetDirectoryName(Info.SavePath);<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(dir) &amp;&amp; !Directory.Exists(dir)) Directory.CreateDirectory(dir);<br><br>            m_Writer = File.Create(Info.SavePath);<br>            Position = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        Task.Run(Run);<br>    &#125;<br><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">endregion</span></span><br><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">region</span> IEnumerator Impl</span><br><br>    <span class="hljs-built_in">bool</span> IEnumerator.MoveNext() =&gt; !IsDone;<br><br>    <span class="hljs-keyword">void</span> IEnumerator.Reset()<br>    &#123; &#125;<br><br>    <span class="hljs-built_in">object</span> IEnumerator.Current =&gt; <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">endregion</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="UnityWebRequestDownload"><a href="#UnityWebRequestDownload" class="headerlink" title="UnityWebRequestDownload"></a>UnityWebRequestDownload</h3><ol><li>大体上同HttpDownload，但没有线程操作，unity托管。</li><li>使用DownloadHandlerScript实现下载回调。</li><li>DownloadHandlerScript传入buffer，可以减少内存分配。</li></ol><p>以下为完整实现</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UnityWebRequestDownload</span> : <span class="hljs-title">IDownloadAgent</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyDownloadScript</span> : <span class="hljs-title">DownloadHandlerScript</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> UnityWebRequestDownload m_Download;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyDownloadScript</span>(<span class="hljs-params">UnityWebRequestDownload download, <span class="hljs-built_in">byte</span>[] bytes</span>) : <span class="hljs-title">base</span>(<span class="hljs-params">bytes</span>)</span><br><span class="hljs-function"></span>        &#123;<br>            m_Download = download;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">float</span> <span class="hljs-title">GetProgress</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>        &#123;<br>            <span class="hljs-keyword">return</span> m_Download.Progress;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">ReceiveData</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] buffer, <span class="hljs-built_in">int</span> dataLength</span>)</span><br><span class="hljs-function"></span>        &#123;<br>            <span class="hljs-keyword">return</span> m_Download.ReceiveData(buffer, dataLength);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CompleteContent</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>        &#123;<br>            m_Download.CompleteContent();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">long</span> Position &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-keyword">public</span> DownloadInfo Info &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> IsDone =&gt; Status == EDownloadStatus.Failed || Status == EDownloadStatus.Success;<br>    <span class="hljs-keyword">public</span> EDownloadStatus Status &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> Action&lt;IDownloadAgent&gt; Completed;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Progress =&gt; Position * <span class="hljs-number">1f</span> / Info.Size;<br><br><br>    <span class="hljs-keyword">private</span> UnityWebRequest m_Request;<br>    <span class="hljs-keyword">private</span> FileStream m_Writer;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">long</span> s_ReadBufferSize = <span class="hljs-number">1024</span> * <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">byte</span>[] m_ReadBuffer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[s_ReadBufferSize];<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Error &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">internal</span> <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ToString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">return</span> Info.ToString();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (Status != EDownloadStatus.Wait) <span class="hljs-keyword">return</span>;<br><br>        Status = EDownloadStatus.Progressing;<br><br>        Error = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">var</span> fileInfo = <span class="hljs-keyword">new</span> FileInfo(Info.SavePath);<br><br>        <span class="hljs-keyword">if</span> (fileInfo.Exists &amp;&amp; fileInfo.Length &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (Info.Size &gt; <span class="hljs-number">0</span> &amp;&amp; fileInfo.Length == Info.Size)<br>            &#123;<br>                Status = EDownloadStatus.Success;<br>                Position = Info.Size;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (m_Writer == <span class="hljs-literal">null</span>)<br>                m_Writer = fileInfo.OpenWrite();<br><br>            Position = m_Writer.Length - <span class="hljs-number">1</span>;<br><br>            <span class="hljs-keyword">if</span> (!Info.IsValid(Position))<br>            &#123;<br>                Error = <span class="hljs-string">$&quot;Invalid Range [<span class="hljs-subst">&#123;Info.Offset + Position &#125;</span>-<span class="hljs-subst">&#123; Info.Offset + Position + Info.Size&#125;</span>]&quot;</span>;<br>                Status = EDownloadStatus.Failed;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (Position &gt; <span class="hljs-number">0</span>) m_Writer.Seek(<span class="hljs-number">-1</span>, SeekOrigin.End);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!Info.IsValid(Position))<br>            &#123;<br>                Error = <span class="hljs-string">$&quot;Invalid Range [<span class="hljs-subst">&#123;Info.Offset + Position &#125;</span>-<span class="hljs-subst">&#123; Info.Offset + Position + Info.Size&#125;</span>]&quot;</span>;<br>                Status = EDownloadStatus.Failed;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            Position = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">if</span> (!Info.IsValid(Position))<br>            &#123;<br>                Error = <span class="hljs-string">$&quot;Invalid Range [<span class="hljs-subst">&#123;Info.Offset + Position &#125;</span>-<span class="hljs-subst">&#123; Info.Offset + Position + Info.Size&#125;</span>]&quot;</span>;<br>                Status = EDownloadStatus.Failed;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">var</span> dir = Path.GetDirectoryName(Info.SavePath);<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(dir) &amp;&amp; !Directory.Exists(dir)) Directory.CreateDirectory(dir);<br><br>            m_Writer = File.Create(Info.SavePath);<br>        &#125;<br><br>        m_Request = CreateHttpWebRequest();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (Status == EDownloadStatus.Progressing)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (m_Request.isDone &amp;&amp; m_Request.downloadedBytes &lt; (<span class="hljs-built_in">ulong</span>)Info.Size)<br>            &#123;<br>                Error = <span class="hljs-string">&quot;unknown error: downloadedBytes &lt; len&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(m_Request.error))<br>            &#123;<br>                Error = m_Request.error;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Pause</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Status = EDownloadStatus.Wait;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Resume</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Retry();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Cancel</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Error = <span class="hljs-string">&quot;User Cancel.&quot;</span>;<br>        Status = EDownloadStatus.Failed;<br>        CloseWrite();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Complete</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (Completed != <span class="hljs-literal">null</span>)<br>        &#123;<br>            Completed(<span class="hljs-keyword">this</span>);<br>            Completed = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        CloseWrite();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> UnityWebRequest <span class="hljs-title">CreateHttpWebRequest</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">var</span> request = UnityWebRequest.Get(Info.DownloadUrl);<br>        request.downloadHandler = <span class="hljs-keyword">new</span> MyDownloadScript(<span class="hljs-keyword">this</span>, m_ReadBuffer);<br><br>        <span class="hljs-keyword">var</span> <span class="hljs-keyword">from</span> = Info.Offset + Position;<br>        <span class="hljs-keyword">var</span> to = Info.Offset + Info.Size;<br><br>        request.SetRequestHeader(<span class="hljs-string">&quot;Range&quot;</span>, <span class="hljs-string">&quot;bytes=&quot;</span> + (<span class="hljs-keyword">from</span>) + <span class="hljs-string">&quot;-&quot;</span> + (to));<br><br>        request.SendWebRequest();<br><br>        <span class="hljs-comment">// TODO 加上超时</span><br>        <span class="hljs-comment">//m_Request.Timeout = 1000000; // 默认是1000s</span><br><br>        <span class="hljs-keyword">return</span> request;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CloseWrite</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (m_Writer != <span class="hljs-literal">null</span>)<br>        &#123;<br>            m_Writer.Close();<br>            m_Writer.Dispose();<br>            m_Writer = <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (m_Request != <span class="hljs-literal">null</span>)<br>        &#123;<br>            m_Request.Abort();<br>            m_Request.Dispose();<br>            m_Request = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Retry</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        CloseWrite();<br>        Status = EDownloadStatus.Wait;<br>        Start();<br>    &#125;<br><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">region</span> Handler</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">ReceiveData</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] buffer, <span class="hljs-built_in">int</span> dataLength</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(m_Request.error))<br>        &#123;<br>            Error = m_Request.error;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        m_Writer.Write(buffer, <span class="hljs-number">0</span>, dataLength);<br>        Position += dataLength;<br><br>        <span class="hljs-keyword">return</span> Status == EDownloadStatus.Progressing;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CompleteContent</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        Status = EDownloadStatus.Success;<br><br>        CloseWrite();<br>    &#125;<br><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">endregion</span></span><br><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">region</span> IEnumerator Impl</span><br><br>    <span class="hljs-built_in">bool</span> IEnumerator.MoveNext() =&gt; !IsDone;<br><br>    <span class="hljs-keyword">void</span> IEnumerator.Reset()<br>    &#123; &#125;<br><br>    <span class="hljs-built_in">object</span> IEnumerator.Current =&gt; <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">endregion</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>TODO</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/xasset/xasset">XAsset</a></p>]]></content>
    
    
    <categories>
      
      <category>unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>c#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ugui组件绑定和代码生成</title>
    <link href="/2021/10/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/ugui%E7%BB%84%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/"/>
    <url>/2021/10/29/unity/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/ugui%E7%BB%84%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</url>
    
    <content type="html"><![CDATA[<p>基于ET <code>ReferenceCollector</code> 的UI代码自动生成</p><h2 id="生成细节"><a href="#生成细节" class="headerlink" title="生成细节"></a>生成细节</h2><ol><li>配置ui类型，使用反射获取<code>字符串-ui类型</code> 键值对。使用接口反射的目的是为了分程序集，可以方便每个项目自定义扩展。</li><li>根据1中的配置，递归收集字段实例，并序列化到容器中，得到 <code>字符串-ui组件实例</code> 键值对。</li><li>根据键值对生成代码。利用partial技术，以及uibinder(Mono脚本)直接引用uiscript，可有效简化操作，适应大多数情况。要扩展到lua，也非常容易。</li></ol><h2 id="补上代码"><a href="#补上代码" class="headerlink" title="补上代码"></a>补上代码</h2><img src="pic0.png"><img src="pic1.png"><img src="pic2.png"><img src="pic3.png"><img src="pic4.png">]]></content>
    
    
    <categories>
      
      <category>unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ugui</tag>
      
      <tag>codegen</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据的编辑和读写</title>
    <link href="/2021/02/20/unity/%E7%BC%96%E8%BE%91%E5%99%A8%E6%89%A9%E5%B1%95/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BC%96%E8%BE%91%E5%92%8C%E8%AF%BB%E5%86%99/"/>
    <url>/2021/02/20/unity/%E7%BC%96%E8%BE%91%E5%99%A8%E6%89%A9%E5%B1%95/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BC%96%E8%BE%91%E5%92%8C%E8%AF%BB%E5%86%99/</url>
    
    <content type="html"><![CDATA[<p>在游戏开发中，必定会有数据编辑、保存和读取。需要兼顾<code>开发效率、运行效率和兼容性</code>。</p><img src="/img/index/数据的编辑和读写.png"><h2 id="数据的显示、编辑"><a href="#数据的显示、编辑" class="headerlink" title="数据的显示、编辑"></a>数据的显示、编辑</h2><p>unity的内置序列化还是比较好用的，所见即所得，但有个比较蛋疼的地方，不支持<code>接口、多态对象</code>。在设计数据结构的时候，如果没有多态，将会有很多数据冗余。。。</p><p>在unity2020版本中，多了一个<code>SerializeReference</code>特性，可以帮助我们显示多态数据，但也有个比较蛋疼的地方，它只能显示，不能编辑，你说艹蛋不艹蛋🙄，做功能只做一半之unity。</p><p>这里，我们使用Odin插件。如果没有Odin，可以考虑<a href="https://github.com/TextusGames/UnitySerializedReferenceUI">UnitySerializedReferenceUI</a>。有了上面的基础，就可以在编辑器下快速创建、删除多态对象了！</p><h3 id="不使用多态"><a href="#不使用多态" class="headerlink" title="不使用多态"></a>不使用多态</h3><figure class="highlight cs"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">data</span><br>&#123;<br>    <span class="hljs-comment">// event id</span><br>    <span class="hljs-keyword">public</span> uint id;<br><br>    <span class="hljs-comment">// animation event parameter</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> animationName;<br><br>    <span class="hljs-comment">// sound event parameter</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> soundName;<br><br>    <span class="hljs-comment">// more and more...</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">table</span><br>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;data&gt; datas;<br>&#125;<br></code></pre></td></tr></table></figure><p>动画事件只会用到animationName，声音事件只会用到soundName，但每个data都包含了其他无用字段，这真是太。。。</p><p>如果在unityeditor下编辑，还得根据事件类型做switch case，只在面板中只曝露出有用的参数。。。不然。。。</p><p>如果采用json、xml之类自动化的方式来保存，那无用的参数就全进文本了。。。手写parser？那慢慢写吧。。。</p><h3 id="使用多态"><a href="#使用多态" class="headerlink" title="使用多态"></a>使用多态</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">data</span><br>&#123;<br>    <span class="hljs-comment">// event id</span><br>    <span class="hljs-keyword">public</span> uint id;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">animation_data</span> : <span class="hljs-title">data</span><br>&#123;<br>    <span class="hljs-comment">// animation event parameter</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> animationName;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">sound_data</span> : <span class="hljs-title">data</span><br>&#123;<br>    <span class="hljs-comment">// sound event parameter</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> soundName;<br>&#125;<br><br><span class="hljs-comment">// more and more...</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">table</span><br>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;data&gt; datas;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样数据结构看起来就清晰多了，而且不会存储不必要的东西！文件大小、内存大小都会降低！也不用编写又臭又长的编辑器代码和序列化代码！</p><h2 id="数据的读写"><a href="#数据的读写" class="headerlink" title="数据的读写"></a>数据的读写</h2><p>处理了显示、编辑的问题，另一个问题就是编辑器读取，以及运行时读写的问题了，不过一般运行时只考虑读。</p><p>序列化库可以先选用 json.net 或者 protobuf.net，都支持多态序列化。</p><p>数据的读写有个问题，我们可能在开发过程中修改数据结构，可能有以下几种问题：</p><ol><li>字段名改变</li><li>基元类型改变，如，int-&gt;string</li><li>容器类型改变，如，list-&gt;dictionary</li><li>数据结构类改版，如，classA包含a、b、c，现要改为classA包含classB，classB包含a、b、c</li></ol><p>出现上述问题后，plan A，手动检查，重新弄。<s>策划：头伸过来，我给你加个buff。</s>哈哈哈~</p><p>plan B，使用序列化库解决：</p><ol><li>字段名改变<br> protobuf使用int作为key，仅改变字段名，没有任何影响。<br> json.net则使用JsonProperty即可指定名称，类似unity的SerializeAs。</li><li>剩下所有，可以考虑如下方案<br>被<code>（ProtoAfterDeserializaton、ProtoBeforeDeserializaton）、（OnSerializing、OnDeserialized）</code>等特性标记的方法可以在对应时机的被反射调用，所以利用这个，我们可以编写兼容代码，来最大化保证数据的兼容性！</li></ol><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>Q: SerializeReference 在类名修改后，可能会出现报错，且编辑器下ScriptableObject无法保存。</p><p>A: 由于我们是序列化成自己的数据文件了，则可以删掉后，再重新生成ScriptableObject</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>有了以上基础，即可在unity里编辑逻辑数据，从了避免在excel里抽象数据结构了。</p>]]></content>
    
    
    <categories>
      
      <category>unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>gamedev</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
